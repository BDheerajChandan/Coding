java basic


What is the output of the Java code snippet?
int a=5, b=10, c=15;
a -= 3;
b *= 2;
c /= 5;

System.out.println(a +" " + b + " " + c);
A) 2 20 3
B) 2 20 5
C) 2 10 5
D) -2 20 3
A


15) What is the output of the Java code snippet?
int a=4, b=6, c=8;
boolean d = a>5 && b>5 & c++<10;
System.out.println(c);
A) 8
B) 9
C) 10
D) Compiler 
error
B



What is the output of Java program with IF statement?
if(1)
{
  System.out.println("OK");
}
A) OK
B) No output
C) Compiler error
D) None
C


20) What is the output of the Java program?
int a=10;
if(a==9)
  System.out.println("OK ");
  System.out.println("MASTER");					
else
  System.out.println("BYE");
A) OK MASTER
B) BYE
C) Compiler error
D) None
C








28) What is the output of the below Java program with SWITCH and Strings?
String phone = "APPLE";
switch(phone)
{
case "Apple": System.out.println("Apple");break;
case "APPLE": System.out.println("APPLE");break;
case "SAMSUNG": System.out.println("SAMSUNG");
}
A) Apple
B) APPLE
C) SAMSUNG
D) Compiler error
B





37) What is the output of the Java code snippet?
int i=0;
for(i=1; i<=6;i++)
{
  if(i%3==0)
    continue;
  System.out.print(i+",");
}
A) 1,2,
B) 1,2,4,5,
C) 3,6,
D) Compiler error
B


15) What is the output of the below Java program with arrays?
public class Polo {
  public static void main(String args[])
  {
    String[] computer = {"RAM","HDD","MOUSE"};
    String[] parts = {computer[0],computer[2]};
    System.out.print(parts[1]);
  }
}
A) RAM
B) HDD
C) MOUSE
D) Compiler error
C

16) What is the output of the below Java program?
int ages[3] = {25, 27, 30};
System.out.println(ages[1]);
A) 25
B) 27
C) 30
D) Compile error
D



---------------------------------------------------------------------------------------------
oops



10) What is the output of the below Java program that passes primitive values?
class Testing10
{
  int rats = 5;

  static void modify(int r)
  { r = 20; }

  public static void main(String[] args)
  {
    Testing10 t1 = new Testing10();
    System.out.println("Rats Before = " + t1.rats);
    modify(t1.rats);
    System.out.println("Rats After = " + t1.rats);
  }
  
}
A) 
Rats Before = 5
Rats After = 5
B) 
Rats Before = 20
Rats After = 20
C) 
Rats Before = 5
Rats After = 20
D) 
Rats Before = 20
Rats After = 5
A



19) What is the output of the below Java program?

class Cricket
{ int runs;

}

class Testing19
{
  public static void main(String[] args)
  {
    Cricket c1 = new Cricket();
    c1.runs = 250;
    Cricket c2;
    c2 = c1;
    c2.runs = 300;
    System.out.println("Runs= " + c1.runs);
  }
}
A) Runs= 0
B) Runs= 250
C) Runs= 300
D) Compiler error
C



15) What is the output of the below Java program?
public class TestingMethods5
{
  public static void main(String[] args)
  {
    int localVariable;
    System.out.println(localVariable);
  }
}
A) 0
B) garbage value
C) NullPointerException
D) Compiler error
D




19) What is the output of the below Java program with a final local variable?
public class TestingMethods8
{
  int cars = 20;
  void change(final int cars)
  {
    cars = 10;
    this.cars = cars;
  }
  public static void main(String[] args)
  {
    TestingMethods8 t8 = new TestingMethods8();
    t8.change(30);
    System.out.println(t8.cars);
  }
}
A) 30
B) 20
C) 10
D) Compiler error
D

18) What is the output of the Java program with static variables?
public class TestingMethods6
{
  static int cats=25;
  public static void main(String[] args)
  {
    TestingMethods6 t6 = new TestingMethods6();
    System.out.println("t6 BIRDS before=" + t6.cats);
    TestingMethods6 t7 = new TestingMethods6();
    t7.cats = 10;
    System.out.println("t6 BIRDS after=" + t6.cats);
  }
}




6) What is the output of the below Java program?
public class TestingConstructor
{
  void TestingConstructor()
  {
    System.out.println("Amsterdam");	
  }

  TestingConstructor()
  {
    System.out.println("Antarctica");	
  }
	
  public static void main(String[] args)
  {
    TestingConstructor tc = new TestingConstructor();
  }
}
A) Antarctica
B) Amsterdam
C) No output
D) Compiler error
A



13) What is the output of the below Java program with overloaded constructors?
public class Constructor3
{
  int birds=10;
  Constructor3()
  {
    this(20);
  }
  Constructor3(int birds)
  {
    System.out.println("Birds=" + birds);
  }

  public static void main(String[] args)
  {
    Constructor3 con = new Constructor3();
  }
}
A) Birds=0
B) Birds=10
C) Birds=20
D) Compiler error
C


5) What is the output of the below Java program?
public class MethodOverloading2
{
  int info()
  {
    System.out.println("PLANE");
    return 0;
  }

  void info()
  {
    System.out.println("AIRPORT");
  }

  public static void main(String[] args)
  {
    MethodOverloading2 m = new MethodOverloading2();
    int a = m.info();
  }
}

A) PLANE
B) AIRPORT
C) Compiler error
D) None
C




17) What is the output of the below Java program with inheritance?
class Sweet
{
  void price()
  {
    System.out.print("Sweet=$10 ");
  }
}
class Sugar extends Sweet
{
  void price()
  {
    super.price();
    System.out.print("Sugar=$20");
  }
}
public class JavaInheritance1
{
  public static void main(String[] args)
  {
    Sugar su = new Sugar();
    su.price();
  }
}
A) Sweet=$10 Sugar=$20
B) Sweet=$10 Sugar=$10
C) Sweet=$20 Sugar=$20
D) Compiler error
A


5) What is the output of the below Java program?
final class Bus
{
  void show()
  {
    System.out.print("Generic Bus. ");
  }
}
class ElectricBus extends Bus
{
  void show()
  {
    System.out.println("Electric Bus. ");
  }
}
public class Inheritance4
{
  public static void main(String[] args)
  {
    ElectricBus eb = new ElectricBus();
    eb.show();
  }
}
A) Generic Bus
B) Electric Bus
C) Generic Bus. Electric Bus.
D) Compiler error.
D



7) What is the output of the below Java program with Method Overriding and SUPER keyword?
class Car
{
  void showTransmission()
  {
    System.out.println("Transmission Manual");
  }
}
class ElectricCar extends Car
{
  void showTransmission()
  {
    System.out.println("Transmission AMT");
  }
  void showInfo()
  {
    this.showTransmission();
    super.showTransmission();
  }
}
public class MethodOverriding2
{
  public static void main(String[] args)
  {
    ElectricCar ec = new ElectricCar();
    ec.showInfo();
  }
}
A) 
Transmission AMT
Transmission Manual
B) 
Transmission Manual
Transmission AMT
C) 
Transmission Manual
Transmission Manual
D) 
Transmission AMT
Transmission AMT
A



8) What is the output of the below Java program with an abstract class?
abstract class Coffee
{
  Coffee()
  {
    System.out.println("Inside Constructor of Coffee..");
  }
}
class ColdCoffee extends Coffee
{
  ColdCoffee()
  {
    System.out.println("Inside Constructor of ColdCoffee..");
  }
}
public class AbstractClassTesting
{
  public static void main(String[] args)
  {
    ColdCoffee cf = new ColdCoffee();
  }
}
A) Compiler error
B) 
Inside Constructor of Coffee..
Inside Constructor of ColdCoffee..
C) 
Inside Constructor of ColdCoffee..
D) 
Inside Constructor of Coffee..
B





6) What is the output of the below Java program with an Interface?

interface Bus
{
  void move();
}

class ElectricBus implements Bus
{
  public void move()
  {
    System.out.println("Implemented  move() method.");
  }	
}
public class InterfaceTest1
{
  public static void main(String[] args)
  {
    Bus b = new ElectricBus()
    b.move()
  }
}
A) No output
B) Implemented move() method.
C) Compiler error
D) None of the above
B

----------------------------------------------------------------------------------
packages(29)

Exception


7. Which of the following keyword is used to explicitly raise an exception?
A raise

B catch

C throw

D throws

Answer
 C

What is the output of the following code?
public class Main 
{
  public static void main(String args[]) 
  {
    try 
    {
      System.out.print("Calculate:" + " " + 1 / 0);
    }
    catch(ArithmeticException e) 
    {
      System.out.print("Exception: Division by zero");          
    }
  }
}
A Calculate:

B Calculate:Exception: Division by zero

C Exception: Division by zero

D Exception: Division by zeroCalculate:

Answer
 C

1. Which of these classes is a super class of all Exception classes?
A RuntimeExceptions

B String

C Throwable

D Cachable

Answer
 C


6. Which block is always executed, regardless of the exception thrown?
A throws

B finally

C catch

D throw

Answer  


String 

public class Q4
{
    public static void main(String []args)
    {
        String s1 = new String("Ali");
        String s2 = new String("Alis");
        System.out.println(s1 = s2);
    }
}
A true

B false

C Ali

D Alis

Answer
 D

6. Which of the following method is used to get the character at specified index?
A getChar()

B Charat()

C charat()

D charAt()

Answer
 D


7. The String method compareTo() returns _______.
A 1

B -1

C false

D true

E Int value

Answer
 E



What is the output of the following code?
public class Q8
{
    public static void main(String []args)
    {
        String str = "hello";
        System.out.println(str.substring(1, 4)); 
    }
}
A hel

B ell

C llo

D hell

Answer
 C

8. What is the output of the following code?
public class Main{
  public static void main(String args[]){ 
    String str = "StackHowTo";
    System.out.println(str.substring(3, 5)); 
  } 
}
A Sta

B ckH

C ck

D HowTo

Answer
 C




What is the output of the following code?
public class Main{ 
  public static void main (String[] args){ 
    String str = "x1y2z3"; 
    String[] arr = str.split("\\d"); 
    for(String s: arr) 
      System.out.print(s); 
  } 
}
A x1y2z3

B 123

C xyz

D None of the above

Answer
 C

annotation

In Java, annotation refers to a form of metadata that can be added to Java source code. Annotations provide additional information about the code to tools, libraries, or the runtime environment. They do not directly affect the program's logic but can influence the way the code is processed or executed.
Thread




Q) Thread synchronization in a process will be required when
All threads sharing the same address space
All threads sharing the same global variables
All threads sharing the same files
All
View Answer





class MyThread implements Runnable {

    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName());
    }
}

public class ThreadTest {
    public static void main(String arg[]) {
        Thread thread = new Thread(new MyThread());
        thread.run();
        thread.run();
        thread.start();
    }
}
a)
main
main
Thread-0
b)
Thread-0
main
Thread-1
c)
main
Thread-0
Thread-1
d)
Thread-0
Thread-1
Thread-2



class MyThread extends Thread {
    public void run() {
        System.out.println("Running");
    }
}

public class ThreadTest {
    public static void main(String args[]) throws InterruptedException {
        Runnable r = new MyThread(); // #1
        Thread myThread = new Thread(r); // #2
        myThread.start();
    }
}
a) The program will result in a compilation error at statement #1.
b) The program will result in a compilation error at statement #2.
c) The program will compile with no errors and will print  Running  in the console.
d) The program will compile with no errors but does not print any output in the console.




 
Which of the following line of code is suitable to start a thread?

class Demo implements Runnable 
{ 
    public void run() {
     System.out.println( Thread is in Running state );
     } 
    
    public static void main(String args[]) 
    {
        /* Missing code? */
    } 
    }
  Thread t = new Thread(X);
2. 
Thread t = new Thread(X);
t.start();
3. 
X obj = new X();
Thread tobj = new Thread(obj);
tobj.start();
4. 
Thread t = new Thread();
x.run();
5.  None of these.




interface Bus
{  
  void move();
}

class ElectricBus implements Bus
{  
  public void move()
  {
    System.out.println("Implemented  move() method.");
  }	
}
public class InterfaceTest1
{
  public static void main(String[] args)
  {
    Bus b = new ElectricBus()
    b.move()
  }
}
A) No output
B) Implemented move() method.
C) Compiler error
D) None of the above
B



public class JavaExceptionExample
{  
  public static void main(String args[])
{  
   try{  
      //code that may raise exception  
      int data=100/20;  
   }catch(ArithmeticException e)
{System.out.println(e);}

  
   //rest code of the program   
   System.out.println("rest of the code...");  
  }  
}  


class TestFinallyBlock {    
  public static void main(String args[])
{    
  try{    
//below code do not throw any exception  
   int data=25/0;    
   System.out.println(data);    
  }    

//catch won't be executed  
  catch(ArithmeticException e)
{  
System.out.println("inside catcah block);  
}    
//executed regardless of exception occurred or not  
 finally 
{  
System.out.println("finally block is always executed");  
}    

    
System.out.println("rest of phe code...");    
  }    


throw new IOException("sorry device error");   

throw new ArithmeticException("Person is not eligible to vote"); 


Throws

It gives an information to the programmer that there may occur an exception. So, it is better for the programmer to provide the exception handling code so that the normal flow of the program can be maintained.

public void elegible() throws ioexception
{
   read("a.text") 

}

main() Throws ioexception
{
    elegible()
}


collection

interface
implemented class
  iterator
comparitor<>
  -sorting objects
Iterable or Throwable
available method
collections.sort

Map
  <key value>

arraylist
vector
  - 
------------------------------------------------------------------------

file handling

text based
filereader
filewriter


inputstrem
fileinputstream
objectinputstream
objectoutputstreem
bufferedinputstream
readline()
objectread()
objectwrite()
write()
read()

------------------------------------------------------------------

jdbc
  - drivermanager
  - Class
  - connection
  - preparedstatement
  - stateement
  -resultset
      next
      hasnext()
      executeQuery()
      executeupdate()
   resultset rs = pmt.executequery()  
     rs.getInt()
     rs.getString()
-----------------------------------------------------------------------
client server
Tcp socket
Socket
ServerSocket
  accept
- write

-----------------------------------------------------------------------------------
additional topics

wrapper class

In Java, wrapper classes are classes that encapsulate primitive data types within an object. They provide a way to convert primitive data types into objects (or vice versa) so that they can be used in situations where objects are required. Wrapper classes are part of the Java API and are found in the java.lang package.

The primitive data types in Java are:

byte
short
int
long
float
double
char
boolean
And their corresponding wrapper classes are:

Byte
Short
Integer
Long
Float
Double
Character
Boolean

String numberString = "123.5";
Float parsedInt = Integer.parseFloat(numberString);

-------------------------------------------------------

Object class
- 

clas emp extends object
{

  void disp()
}
emp e = new emp
e.disp()
e.

In Java, the Object class is the root class of the Java class hierarchy. Every class in Java is a direct or indirect subclass of the Object class. The Object class provides some fundamental methods that are inherited by all classes in Java. Here are some key methods provided by the Object class:


toString()
equals
hashcode
getclass
finalize
-------------------------------------------------------------

enum

   - it is used to store more than one value constant data

  final pi = 3.5

enum
enum (enumeration) is a special type that represents a group of constants,


// Define an enum type called Day
enum Day {
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY
}

 Day today = Day.MONDAY;

        // Switch statement with enum
        switch (today) {
            case MONDAY:
                System.out.println("It's Monday!");
                break;
            case TUESDAY:
                System.out.println("It's Tuesday!");
                break;
            case WEDNESDAY:
                System.out.println("It's Wednesday!");
                break;
            case THURSDAY:
                System.out.println("It's Thursday!");
                break;
            case FRIDAY:
                System.out.println("It's Friday!");
                break;
            case SATURDAY:
            case SUNDAY:
                System.out.println("It's the weekend!");
                break;


Generic


Arraylist<Integer> al = new Arraylist<>()
al.add(20)

generic class

class Emp
{
   T eno

   Emp(T eno)
  {
    This.T = eno;
   }
   void disp(){ syso(T.eno)}

}
main()
   {  Emp<String> e = new Emp("cdac")
           e.disp()
}



class Test<T, U>
{
    T obj1;  // An object of type T
    U obj2;  // An object of type U
 
    // constructor
    Test(T obj1, U obj2)
    {
        this.obj1 = obj1;
        this.obj2 = obj2;
    }
 
    // To print objects of T and U
    public void print()
    {
        System.out.println(obj1);
        System.out.println(obj2);
    }
}
 
// Driver class to test above
class Main
{
    public static void main (String[] args)
    {
        Test <Integer, Integer> obj =
            new Test<String, Integer>(24, 15);
 
--------------------------------------------------------------------


public class GenericMethodExample 

{


// Generic method to print elements of an array
    
public static <T> void printArray(T[] array)
 {
        System.out.print("Array elements: ");

        for (T element : array) {
            System.out.print(element + " ");
        }

        System.out.println();
    }


    public static void main(String[] args) {
        // Example with Integer
        Integer[] intArray = {1, 2, 3, 4, 5};
        printArray(intArray);

        // Example with Double
        Double[] doubleArray = {1.1, 2.2, 3.3, 4.4, 5.5};
        printArray(doubleArray);

        // Example with String
        String[] stringArray = {"Java", "C++", "Python", "JavaScript"};
        printArray(stringArray);
    }

    
}

-------------------------------------------------------------
Garbage collection
   System.Gc
final
finally
finalize method

------------------------------------------------------------------------
lambda expression
  -function 
       without name
       annonimous function

- inside the functional interface
- in stream API




A functional interface in Java is an interface that contains only one abstract method. 



        interface Sayable
{  
    public String say();  
}  

public class LambdaExpressionExample3
{  
public static void main(String[] args)
 {  
    Sayable s=()->{return "I have nothing to say."; };  
    System.out.println(s.say());  
}  
}  


 Sayable s1=(name)->{return "Hello, "+name;  }
  
        System.out.println(s1.say("Sonoo"));  






import java.util.Arrays;
import java.util.List;

public class StreamExample {

    public static void main(String[] args) {
        // Create a list of numbers
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // Filter: Select even numbers
        List<Integer> evenNumbers = numbers.stream()
                .filter(n -> n % 2 == 0)
                .toList();

        System.out.println("Even numbers: " + evenNumbers);

        // Map: Square each number
        List<Integer> squaredNumbers = numbers.stream()
                .map(n -> n * n)
                .toList();

        System.out.println("Squared numbers: " + squaredNumbers);

        // Reduce: Calculate the sum of all numbers
        int sum = numbers.stream()
                .reduce(0, Integer::sum);

        System.out.println("Sum of numbers: " + sum);
    }
}


------------------------------------------------------------------------------------













 