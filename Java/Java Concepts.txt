=========================================================================================================================================================================
									JAVA ENVIRONMENT
=========================================================================================================================================================================
Introduction to Java :
- Developed by SUn Microsysems and James Gosling in 1990-1991
- HLL(High Level Language)
- OOP(Object Oriented Programming) language
- Secure, Portable, Robustness
- Platform indepenent (Can run on any platform in any OS)

Usage of Java :
Standalone appliations [Java SE(Standard Edition)]
- Used to create desktop applications 	: javaSE, java, avac, awt
- Used to create web applications	: javaEE, serlet, jsp, spring, Ejb    	
- Used to create mobilwe aplications	: javaME, Android

Components of Java :
- 3 Components of Java : JDK, JVM, JRE
- JDK=JVM+JRE + Development Tools(compilers and debuggers)
- JDK(Java Development Kit): To develop and run/execute java applications
- JVM(Java Virtual Machine): It converts .class file or byte code into machine code.
- JRE(Java Runtime Environment): It can execute java applications
- JRE contains the JVM
- JDK includes the JRE+Development tools(compilers and debuggers)+(JVM and libraries)
- JDK=JRE+{Set of tool : javac, java}
- JRE=JVM+{set of libraries}

- Compiler : It compiles code only once
  Interpreter : It compiles line by line

=========================================================================================================================================================================
									JAVA PART-1
=========================================================================================================================================================================

Topics : Data types, Variables, Operators, Conditionl/Control Statements, Methods, Arrays

Data Types :-
- 2 types : Primitive and Non-Primitive
	Primitive : byte, short, int, long, float, double, boolean
	Non-Primitive : String, Array, class, enum
- Primitive data types are inbuilt data types.
- Non-Primitive data types are userdefined data types and also known as reference data types or composite data type.It is a 'reference variables' or 'object references'.
- Size in bytes : byte-1 , short-2, int-4, long-8, float-4 , double-8 , char-2 , boolean - 1 (ASCII-8 bits)
- Declaration of primitive data types : <datatype> <variable>=<value/data>;
- Declaration of non-primitive data types : 	String <variableName>=new String("<Value>");
						<datatype> <variableName>[]=new <datatype>[<size>];
						<classname> <objectName>=new <className>();//<objectName>.<methodName>();

Variable :-
- Temporary memeory location which holds the data or value.
- Value can be changed during execution of a program.
- 3 types : Local,instance,Static
	Local : Declared within a method or function.Not accessable outside method or function.Scope lost outside method.
	Instance : Declared within a class and outside the method.
	Static : 

Operators :-
Arithmatic : 	+ - / * %
Relational :	< > <=>= == !
Logical : 	&& || !
Bitwise : 	& | ^ ~ << >> >>>   (XOR NOT LeftShift RigthShift URigthShift)
Ternary : 	?:
Assinment : 	=
new :		<ClassName> <ObjectName>=new <ObjectName>();
. dot :		<ObjectName>.<MethodName>();
- 2 types : Unary(Operator works with single operand) ; Binary(Operator works with more than one operand)
	ex- Unary[a+=1 , a*=3] , Binary[a=a+b , a=b*a], 'a' and 'b' are operands
- Expression = Operands + Operators

Conditionl/Control Statements :-
- if
	if(<Condition>)
	{
		<Statements>;
	}
- if else
	if(<Condition>)
	{
		<True Statements>;
	}else{
		<False Statements>;
	}
- if else if or if else ladder
	if(<Condition-1>)
	{
		<Statements-1>;
	}else if(<Condition-2>)
	{
		<Statements-2>;
	}...
	..
	else if(<Condition-n>)
	{
		<Statements-n>;
	}else{
		<Default Statement>
	}
Loops : for ,while , do while
- for 
	for(intialization;condition;updation)
	{
		<Statements>;
	}
- while
	<initialization>;
	while(<Condition>)
	{
		<Statements>;
		<Updation>;
	}
- do while
	<initialization>;
	do
	{
		<Statements>;
		<Updation>;
	}while(<Condition>);
- Switch
	Switch(<choice>)
	{
		case <choice1>: <Statement-1>; break;
		case <choice2>: <Statement-2>; break;
		..
		..	
		case <choicen>: <Statement-n>; break;
		default : <default Statement>; 
	}

Methods :-
- 2 types : Userdefined methods and builtin methods
	Inbuilt :- Methods already defined by JVM
			example :- .nextInt() , .nextFloat(), .next() , .length() , .substring()
	User Defined :- Methods defined by user
	Static : Method can be called directly using method name <MethodName>(); or by class name <ClassName>.<MethodName>();
				<MethodName>();
				<ClassName>.<MethodName>();			
	NonStatic : Need reference of a class where method is defined.To call the method we need to create a refrence of a class. 
				<ClassName> <ObjectName>=new <ClassName>(); 
				<ObjectName>.<MethodName>();


Array :-
- Continous memeory location
- Stores similar type of data (as a container)
- Size is fixed and cant be changed during runtime
- Used to store similar/same type of data
- Individual element can be accessd using index
- Declaration : 	<Datatype> <ArrayVariable>[]=new <Datatype>[<size>];
- Initialisation : 	<ArrayVariable>[]={<data1>,<data2>,....<datan>}; or 
			<Datatype> <ArrayVariable>[]={<data1>,<data2>,....<datan>}; 
			<ArrayVariable>[0]=<data1>; <Variable>[1]=<data2>;
- Retrieve : 	for(<datatype> <ArrayVariable>:<ArrayName>)
		{
			//<statements> or <ArrayVariable>;
		}

		for(<datatype> <ArrayVariable>=0;<ArrayVariable> < <ArraySize>;<Updateing ArrayVariable>)
		{
			//<statements> or <ArrayVariable>;
		}
- Applications: Sorting(Selection , Bubble) , Searching(Binary , Linear) , Deleting , Updating , Storing
- Returning array by method : 	<access-specifier> <datatype>[] <methodName>()
				{
					<datatype> <ArrayVariable>[]={<data1>,<data2>,....<datan>}; 
					return <ArrayVariable>;
				}
=========================================================================================================================================================================
									JAVA PART-2
=========================================================================================================================================================================

Topics : Classes, Objects, Static & non static behaviour , Constructors

- Primitive data will lost while coming out of method. Reference can have data even after coming out of method.

Objects :
- It is an identificiable entity/realworld entity which has its own characteristics and behaviour
- It is a real world entity
- It has data & behaviour
- It is an instance of a class
- It stores data as an object
- It has properties(Data) and behaviour(method)
- Creation : Using a reference , Using a method , Using a constructor
Classes :
- It is a collection of an objects
- It is a template or blue print of an object
- It is used to create an object
- It is used to instanciate the object
- It is a representation of an object



example: (Object)Phone - (Properties){price, color, RAM, Memory, processor, SN, make}
		class Phone
		{
			price, color, RAM, Memory, processor, SN, make
		}
	(Object)Headphone - (Properties){price, color, frequency, model, warranty, weight, make}
		class Phone
		{
			price, color, frequency, model, warranty, weight, make
		}
	
javaObjectProperty file :
	class <Class/ObjectName>
	{
		<Declare Properties>;
		Read()
		{
			<Property inputs>
		}
		calculate()
		{
			<Using property data for results>
		}
		display() // we can return the results to pass it to display() method.
		{
			<Disply object's data>;
			<Display calculated results>;
		}
		/*main()
		{
			read();
			calculate();
			display();
		}*/
	}
javaMain file :
	class Main
	{
		main()
		{
			read();
			calculate(); // we can store calculated results and pass them to display() method if calculate() method has return type.
			display();
		}
	}


Constructors :
- It  is used to construct value for an object or useed to initialize the value for an object.
- It is a kind of method or block of code
- It gets automatically called during object creation.
	example: <ClassName> <ObjectName>=new <ClassName>(); //Here <ClassName>() is a contructor
- Rules: Constructor name should be same as a class name
	 It should not return anything
- Constructors can be overloaded by different number of parameters with same constructor name
- Constructors are of two types - 1. Non Parameterised /default parameterised/ no parametrised constructor
				  2. Parametrised constructor
class <ClassName_1>
{
	Objects; 			// Instance variables;
	A1()				// Non Parameterised
	{
		<initialisation>;	// Initializing data to objects(User intialization or by default)
	}
	A1(<Datatype> <Parameters>)	// Parameterised
	{
		<initialisation>;	// Initializing data to objects(User intialization or by default)
	}
	<MethodName>()
	{
		<Print Data>;
	}
}

class <ClassName_2>
{
	main()
	{
		<ClassName_1> <ObjectName_1>=new <ClassName_1>();		// Non parameterised constructor
		<ObjectName_1>.<MethodName>();
		<ClassName_1> <ObjectName_2>=new <ClassName_1>(<Datavalues>);	// Passing data to Parameterised constructor
		<ObjectName_1>.<MethodName>();
	}
}


Static and Non-Static :
- Static: It is a keyword
	  It is applied to a method or block of code
- NonStatic: It is an instance variable

class <ClassName_1>
{
	<Datatype> <Parameter_1>
	static <Datatype> <Parameter_2>=<Data value>;
	Objects; 			// Instance variables;
	A1()				// Non Parameterised
	{
		<initialisation>;	// Initializing data to objects(User intialization or by default)
	}
	A1(<Datatype> <Parameter_1>)	// Parameterised
	{
		<initialisation>;	// Initializing data to objects(User intialization or by default)
	}
	<MethodName>()
	{
		<Print -Parameter_1,Parameter_2>;
	}
}

class <ClassName_2>
{
	main()
	{
		<ClassName_1> <ObjectName_1>=new <ClassName_1>();		// Non parameterised constructor
		<ObjectName_1>.<MethodName>();
		<ClassName_1> <ObjectName_2>=new <ClassName_1>(<DatavalueParameter_1>);	// Passing data to Parameterised constructor
		<ObjectName_1>.<MethodName>();
	}
}












