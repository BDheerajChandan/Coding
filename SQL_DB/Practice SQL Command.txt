=================================================================================================================================================
								CREATING A TABLE-1
=================================================================================================================================================
CREATE TABLE EMPLOYEE_1
(
Employeeid INTEGER,
Name TEXT,
Gender varchar(15),
Salary float,
Department varchar(15),
Experience INTEGER
);
=================================================================================================================================================
							INSERTING VALUES INTO TABLE
=================================================================================================================================================
INSERT INTO EMPLOYEE_1 VALUES(5,'Priya Sharma','Female',45000.0,'IT',2);
INSERT INTO EMPLOYEE_1 VALUES(6,'Rahul Patel','Male',65000.0,'Sales',5);
INSERT INTO EMPLOYEE_1 VALUES(7,'Nisha Gupta','Female',55000.0,'Marketing',4);
INSERT INTO EMPLOYEE_1 VALUES(8,'Vikram Singh','Male',75000.0,'Finance',7);
INSERT INTO EMPLOYEE_1 VALUES(9,'Aarti Desai','Female',50000.0,'IT',3);
=================================================================================================================================================
							RETRIEVING DATA WITH QUERIES
=================================================================================================================================================
- SELECT * FROM EMPLOYEE_1;
- SELECT sum(Salary) AS SALARY FROM EMPLOYEE_1;
- SELECT Department,sum(Salary) as SALARY FROM EMPLOYEE_1 GROUP BY Department;
- SELECT Department,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Department ORDER BY sum(SALARY);
- SELECT Department,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Department ORDER BY sum(SALARY) DESC;
- SELECT Department,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Department ORDER BY sum(SALARY) ASC;
- SELECT Department,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Department HAVING sum(Salary)>55000;
- SELECT Department,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Department HAVING sum(Salary)>55000 ORDER BY sum(Salary);
- SELECT Department,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Department HAVING sum(Salary)>55000 ORDER BY sum(Salary) DESC;
- SELECT Department,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Department HAVING sum(Salary)>55000 ORDER BY sum(Salary) ASC;
- SELECT Gender,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Gender;
- SELECT Gender,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Gender HAVING sum(Salary)>=50000 ORDER BY sum(Salary);
- SELECT Gender,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Gender HAVING sum(Salary)>=50000 ORDER BY sum(Salary) ASC;
- SELECT Gender,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Gender HAVING sum(Salary)>=50000 ORDER BY sum(Salary) DESC;
- SELECT Gender,sum(Salary) AS SALARY FROM EMPLOYEE_1 WHERE experience>2 GROUP BY Gender HAVING sum(Salary)>=50000 ORDER BY sum(Salary) ASC;
- SELECT Gender,sum(Salary) AS SALARY FROM EMPLOYEE_1 WHERE Employeeid>2 GROUP BY Gender HAVING sum(Salary)>=50000 ORDER BY sum(Salary) DESC;
- SELECT * FROM EMPLOYEE_1;
- SELECT * FROM EMPLOYEE_1 LIMIT 3;
- SELECT * FROM EMPLOYEE_1 WHERE experience>3 ORDER BY Salary desc;
- SELECT * FROM EMPLOYEE_1 WHERE experience>3 ORDER BY Salary desc LIMIT 2;
- SELECT Gender,sum(Salary) AS SALARY FROM EMPLOYEE_1 GROUP BY Gender;
- SELECT Gender,sum(Salary) FROM EMPLOYEE_1 GROUP BY Gender ORDER BY sum(Salary);
- SELECT Gender,sum(Salary) FROM EMPLOYEE_1 WHERE experience>3 GROUP BY Gender ORDER BY sum(Salary) DESC LIMIT 1;
- SELECT Gender,sum(Salary) FROM EMPLOYEE_1 WHERE experience>3 GROUP BY Gender ORDER BY sum(Salary) ASC LIMIT 1;
- SELECT * FROM EMPLOYEE_1 WHERE experience>2;
- SELECT * FROM EMPLOYEE_1 WHERE NOT experience>2;
- SELECT * FROM EMPLOYEE_1 WHERE Salary BETWEEN 45000 AND 50000;
- SELECT * FROM EMPLOYEE_1 WHERE Salary NOT BETWEEN 45000 AND 50000;
- SELECT * FROM EMPLOYEE_1 WHERE Name like 'R%';
- SELECT * FROM EMPLOYEE_1 WHERE Name NOT like 'R%';
- SELECT * FROM EMPLOYEE_1 WHERE Name like '%a %';
- SELECT * FROM EMPLOYEE_1 WHERE Name NOT like '%a %';
- SELECT * FROM EMPLOYEE_1 WHERE Name like '%r__%';
- SELECT * FROM EMPLOYEE_1 WHERE Name like '%___r%';
- SELECT * FROM EMPLOYEE_1 WHERE Name like 'P%a';
- SELECT * FROM EMPLOYEE_1 WHERE Name like 'V%h';
- SELECT * FROM EMPLOYEE_1 WHERE Name not like 'P%a';
- SELECT * FROM EMPLOYEE_1 WHERE Name not like 'V%h';
- SELECT * FROM EMPLOYEE_1 WHERE Name not like 'P%a' AND Name NOT like 'V%h';

drop procedure if exists func_1;
delimiter |;
create procedure func_1()
begin
select * from employee_1;
select * from employee_2;
end
|;
delimiter ;
call func_1()


drop view if exists view_1;
create view view_1 as select * from employee_1;
select * from view_1;

select Salary from employee_1 union select Salary from employee_2;
select Salary from employee_1 union all select Salary from employee_2;

select * from employee_1;
select concat(Name,'_',Gender) as Name_Gender from employee_1;
select substr(Name,1,5) as Substr_Name from employee_1;
select upper(Name) as upper_Name from employee_1;
select lower(Name) as upper_Name from employee_1;
select upper(substr(Name,1,5)) as UpperSubstr_Name from employee_1;
select lower(substr(Name,1,5)) as LowerSubstr_Name from employee_1;







=================================================================================================================================
							CREATING A TABLE-2
=================================================================================================================================
CREATE TABLE EMPLOYEE_2
(
empID INTEGER,
emp_name varchar(15),
emp_sal float,
emp_City varchar(15)
);
==================================================================================================================================
						INSERTING VALUES INTO TABLE-2
==================================================================================================================================
INSERT INTO EMPLOYEE_2 VALUES(201,'Abhay',2000,'Goa');
INSERT INTO EMPLOYEE_2 VALUES(202,'Ankit',65000,'Delhi');
INSERT INTO EMPLOYEE_2 VALUES(203,'Bheem',8000,'Jaipur');
INSERT INTO EMPLOYEE_2 VALUES(204,'Ram',50000,'Goa');
INSERT INTO EMPLOYEE_2 VALUES(205,'Sumit',5000,'Delhi');
===================================================================================================================================
						RETRIEVING DATA WITH QUERIES
===================================================================================================================================
- SELECT * FROM EMPLOYEE_2;
- SELECT emp_City,sum(emp_sal) from EMPLOYEE_1 GROUP BY emp_City;
- SELECT emp_City,sum(emp_sal) from EMPLOYEE_1 WHERE empID>202 GROUP BY emp_City;







SELECT * FROM EMPLOYEE_1;
SELECT * FROM EMPLOYEE_2;
ALTER TABLE EMPLOYEE_1 RENAME emp_sal TO Salary;
SELECT Employeeid,Name,Department,Salary FROM EMPLOYEE_1 WHERE EXISTS (SELECT Name FROM EMPLOYEE_2 WHERE EMPLOYEE_1.Salary=EMPLOYEE_2.Salary);
SELECT Employeeid,Name,Department,Salary FROM EMPLOYEE_1 WHERE NOT EXISTS (SELECT Name FROM EMPLOYEE_2 WHERE EMPLOYEE_1.Salary=EMPLOYEE_2.Salary);
SELECT count(*) FROM EMPLOYEE_1 WHERE EXISTS (SELECT Name FROM EMPLOYEE_2 WHERE EMPLOYEE_1.Salary=EMPLOYEE_2.Salary);
SELECT Salary FROM EMPLOYEE_1 WHERE EXISTS (SELECT Name FROM EMPLOYEE_2 WHERE EMPLOYEE_1.Salary=EMPLOYEE_2.Salary GROUP BY Salary);
SELECT count(*),sum(Salary) FROM EMPLOYEE_1 WHERE EXISTS (SELECT Name FROM EMPLOYEE_2 WHERE EMPLOYEE_1.Salary=EMPLOYEE_2.Salary GROUP BY Salary);
SELECT Employeeid,Name,Department,Salary FROM EMPLOYEE_1 WHERE EXISTS (SELECT Name FROM EMPLOYEE_2 WHERE EMPLOYEE_1.Salary=EMPLOYEE_2.Salary and Department='IT');
SELECT Employeeid,Name,Department,Salary FROM EMPLOYEE_1 WHERE NOT EXISTS (SELECT Name FROM EMPLOYEE_2 WHERE EMPLOYEE_1.Salary=EMPLOYEE_2.Salary and Department='IT');
SELECT EMPLOYEE_1.Employeeid,EMPLOYEE_1.Name,EMPLOYEE_2.Salary FROM EMPLOYEE_1 INNER JOIN EMPLOYEE_2 ON EMPLOYEE_1.Salary=EMPLOYEE_2.Salary; 
SELECT EMPLOYEE_1.Employeeid,EMPLOYEE_1.Name,EMPLOYEE_2.Salary FROM EMPLOYEE_1 LEFT JOIN EMPLOYEE_2 ON EMPLOYEE_1.Salary=EMPLOYEE_2.Salary;
SELECT EMPLOYEE_1.Employeeid,EMPLOYEE_1.Name,EMPLOYEE_2.Salary FROM EMPLOYEE_1 RIGHT JOIN EMPLOYEE_2 ON EMPLOYEE_1.Salary=EMPLOYEE_2.Salary;
SELECT * FROM EMPLOYEE_1 LEFT JOIN EMPLOYEE_2 ON EMPLOYEE_1.Employeeid=EMPLOYEE_2.empID 
	UNION SELECT * FROM EMPLOYEE_1 RIGHT JOIN EMPLOYEE_2 ON EMPLOYEE_1.Employeeid=EMPLOYEE_2.empID;


=================================================================================================================================
							CREATING A TABLE-3
=================================================================================================================================
CREATE TABLE EMPLOYEE_3
(
Employeeid INTEGER,
Name varchar(15),
emp_sal float,
emp_City varchar(15)
);
==================================================================================================================================
						INSERTING VALUES INTO TABLE-3
==================================================================================================================================
INSERT INTO EMPLOYEE_3 VALUES(201,'Sam',2000,'Goa');
INSERT INTO EMPLOYEE_3 VALUES(202,'Jose',65000,'Delhi');
INSERT INTO EMPLOYEE_3 VALUES(203,'Puttin',8000,'Khurda');
INSERT INTO EMPLOYEE_3 VALUES(204,'Ram',50000,'Vizag');
INSERT INTO EMPLOYEE_3 VALUES(205,'Modi',5000,'Delhi');

===================================================================================================================================
						RETRIEVING DATA WITH QUERIES
===================================================================================================================================
SELECT * FROM EMPLOYEE_2 UNION SELECT * FROM EMPLOYEE_3;
SELECT emp_name,Salary FROM EMPLOYEE_2 UNION SELECT Name,emp_sal FROM EMPLOYEE_3;
SELECT emp_name,Salary FROM EMPLOYEE_2 UNION SELECT Name,emp_sal FROM EMPLOYEE_3 WHERE Name like 'A%';
SELECT emp_name,Salary FROM EMPLOYEE_2 WHERE emp_name like 'R%' UNION SELECT Name,emp_sal FROM EMPLOYEE_3 WHERE Name like 'S%';
SELECT emp_name FROM EMPLOYEE_2 UNION SELECT Name FROM EMPLOYEE_3;
SELECT count(*),sum(Salary) FROM EMPLOYEE_2;
ALTER TABLE EMPLOYEE_3 ADD COLUMN DOJ INTEGER;
UPDATE EMPLOYEE_3 SET DOJ='1999-02-21' WHERE Employeeid=201;
UPDATE EMPLOYEE_3 SET DOJ='2005-10-08' WHERE Employeeid=202;
UPDATE EMPLOYEE_3 SET DOJ='2003-05-28' WHERE Employeeid=203;
UPDATE EMPLOYEE_3 SET DOJ='2010-08-14' WHERE Employeeid=204;
UPDATE EMPLOYEE_3 SET DOJ='2017-07-15' WHERE Employeeid=205;

SELECT CURDATE(),DOJ FROM EMPLOYEE_3;
SELECT CURDATE(),DOJ,CONCAT(FLOOR(DATEDIFF(CURDATE(), DOJ) / 365),'-',
        		    FLOOR((DATEDIFF(CURDATE(), DOJ) % 365) / 30),'-',
        		    DATEDIFF(CURDATE(), DOJ) % 30) as DateDifference 
		FROM EMPLOYEE_3;

ALTER TABLE EMPLOYEE_3 ADD COLUMN Experience INTEGER;
UPDATE EMPLOYEE_3 SET EXPERIENCE=FLOOR(DATEDIFF(CURDATE(),DOJ)/365);
ALTER TABLE EMPLOYEE_3 ADD COLUMN DOB DATE;
UPDATE EMPLOYEE_3 SET DOB='1975-07-19' WHERE Employeeid=201;
UPDATE EMPLOYEE_3 SET DOB='1990-11-18' WHERE Employeeid=202;
UPDATE EMPLOYEE_3 SET DOB='1970-09-21' WHERE Employeeid=203;
UPDATE EMPLOYEE_3 SET DOB='1977-03-12' WHERE Employeeid=204;
UPDATE EMPLOYEE_3 SET DOB='1960-12-10' WHERE Employeeid=205;
ALTER TABLE EMPLOYEE_3 ADD COLUMN AGE INTEGER;
UPDATE EMPLOYEE_3 SET AGE=FLOOR(DATEDIFF(CURDATE(),DOB)/365);
SELECT * FROM EMPLOYEE_3;
SELECT * FROM EMPLOYEE_3 ORDER BY DOB;
SELECT * FROM EMPLOYEE_3 ORDER BY DOJ;
SELECT * FROM EMPLOYEE_3 WHERE AGE>35 AND AGE<50;
SELECT Name FROM EMPLOYEE_3 WHERE AGE>50;
SELECT COUNT(*) FROM EMPLOYEE_3 WHERE AGE>50;
SELECT * from employee_3 where DOB Like '197%';
SELECT * from employee_3 where DOB Like '197%' and DOB Like '197%';
SELECT * FROM EMPLOYEE_3 WHERE YEAR(DOB) < 1980 ORDER BY DOB;
SELECT * FROM EMPLOYEE_3 WHERE YEAR(DOB) < 1975 ORDER BY DOB;
SELECT * FROM EMPLOYEE_3 WHERE MONTH(DOB) < 08 ORDER BY DOB;
SELECT * FROM EMPLOYEE_3 WHERE DAY(DOB) < 20 ORDER BY DOB;
SELECT * FROM EMPLOYEE_3 WHERE DAY(DOB) < 15 ORDER BY DOB;
SELECT * FROM EMPLOYEE_3 WHERE DAY(DOB) < 19 ORDER BY DOB;
SELECT * FROM EMPLOYEE_3 WHERE DAY(DOB) < 19 AND YEAR(DOB) < 1990 ORDER BY DOB;
SELECT * FROM EMPLOYEE_3 WHERE DAY(DOB) < 19 AND YEAR(DOB) < 1990 ORDER BY DOB limit 1;
select * from employee_3 where DAY(DOB) < 19 AND YEAR(DOB) < 1990 ORDER BY DOB limit 2;




===================================================================================================================================
							DATE AND TIME
===================================================================================================================================
SELECT CURDATE();
SELECT CURTIME();
SELECT NOW();
SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s');
SELECT DATE_ADD(CURDATE(), INTERVAL 3 DAY);
SELECT TIMESTAMPDIFF(DAY, '2022-01-01', CURDATE());
SELECT GETDATE();
SELECT DATE_FORMAT(NOW(), '%m/%d/%Y %h:%i:%s %p');
SELECT DATE_FORMAT(NOW(), '%m/%d/%Y %H:%i:%s');
===================================================================================================================================
							DELIMITER - IF STATEMENT WITH DECLARED VARIABLE
===================================================================================================================================
drop procedure if exists FindEvOdd;
delimiter |;
create procedure FindEvOdd()
begin
	declare num int default 0;
	set num=32;
	if num%2=0 then
		select num as 'Number','Even' as 'Results';
	else
		select num as 'Number','Odd' as 'Results';
	end if;
end
|;
delimiter ;
call FindEvOdd();


===================================================================================================================================
							DELIMITER - IF STATEMENT WITH INPUT VARIABLE						
===================================================================================================================================

drop procedure if exists FindEvOdd;
delimiter |;
create procedure FindEvOdd(in num int)
begin
	if num%2=0 then
		select num as 'Number','Even' as 'Results';
	else
		select num as 'Number','Odd' as 'Results';
	end if;
end
|;
delimiter ;
call FindEvOdd(21);
call FindEvOdd(20);

===================================================================================================================================
							    DOUBT IN OUTPUT AND ERRORS
===================================================================================================================================
drop procedure if exists dispEmp;
delimiter |;
create procedure dispEmp(out Ename varchar(20))
begin
select Name into Ename from employee_1 where Employeeid=5;
end
|;
delimiter ;
select @Ename;


drop procedure if exists FindEvOdd;
delimiter |;
create procedure FindEvOdd()
begin
declare num int default 0;
declare i int default 0;
set num=10;
while i<num do
if num%2=0 then
select num as 'Number','Even' as 'Results';
else
select num as 'Number','Odd' as 'Results';
end if;
done
end;
|;
delimiter ;
call FindEvOdd();
