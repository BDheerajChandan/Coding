MongoDB is a document database. It is a NoSQL.
It is often reffered as non-RDBMS(Non tabular database).
MongoDB stores data in a type of JSON called BSON(Binary JSON).
Records in a MongoDB database are called documents.
Collections in a MonoDB is nothing but a tables in RDBMS.
Instead of having multiple tables we can keep all related data together. This makes reading your data very fast. You can still have multiple groups of data.
MongoDB can be installed locally.

MongoDB Query API can be used two ways: CRUD Operations and Aggregation Pipelines

show dbs :						To see all databases
show databases :					To see all databases
use <Database_name> : 					To create new database <Database_name> 
db.createCollection("<Collection_Name>"):		To create a new collection
db.<Collection_Name>.insertOne({<Key>:<Value>}):	To insert one document
db.<Collection_Name>.insertMany([{<Key>:<Value>},{K2:V2},..,{Kn:Vn}]): 	To insert multiple Documents
db.<Collection_Name>.find() :			To get all documents/data from collection
db.<Collection_Name>.find({<Key>:<Value>}) :	To get all documents/data having the value for specific key(1le condition) from collection
db.<Collection_Name>.findOne() :		To get first document/data from collection
db.<Collection_Name>.findOne({<Key>:<Value>}) :	To get first document/data having the value for specific key(1le condition) from collection
NOTE : Second parameter in find is known as projection.In Key:Value, Value is 0 there excluding mentioned key docment;value is 1 then including mentioned key docment only.
db.<Collection_Name>.find({},{<K1>:1}) : To get mentioned key specific document/data from collection
db.<Collection_Name>.find({},{<K1>:0}) : To get (except)mentioned key specific document/data from collection
db.<Collection_Name>.find({},{<K1>:1,..,<Kn>:1}) : To get mentioned keys specific documents/data from collection
db.<Collection_Name>.find({},{<K1>:0,..,<Kn>:0}) : To get (except)mentioned key specific documents/data from collection
db.<Collection_Name>.updateOne({<K>:<V>},{$set:{<K>:<New_V>}}) : Updating a new value for a key at first occurance in document according to a filter
db.<Collection_Name>.updateMany({<K>:<V>}),{$set:{<K>:<New_V>}}) : Updating a new value for all keys at every occurance in document according to a filter
db.<Collection_Name>.deleteOne({<K>:<V>}) : To delete a value for a key at first occurance in document according to a filter
db.<Collection_Name>.deleteMany({<K>:<V>} : To delete a value for a key at every occurance in document according to a filter
db.<Collection_Name>.deleteMany({<K1>:<V1>},{<K2>:<V2>}) : To delete a value for a keys at first occurance in document according to a multiple filter
-------------------------------
MongoDB Query Operators
--------------------------------

==========================================================================================================================================================================

show databases
use database_name
db.createCollection("Employee_1")
show collections
db.Employee_1.insertOne({Employeeid:5,Name:'Priya Sharma',Gender:'Female',Salary:45000.0,Department:'IT',Experience:2})
db.Employee_1.insertMany([{Employeeid:6,Name:'Rahul Patel',Gender:'Male',Salary:65000.0,Department:'Sales',Experience:5},
			  {Employeeid:7,Name:'Nisha Gupta',Gender:'Female',Salary:55000.0,Department:'Marketing',Experience:4},
			  {Employeeid:8,Name:'Vikram Singh',Gender:'Male',Salary:75000.0,Department:'Finance',Experience:7},
			  {Employeeid:9,Name:'Aarti Desai',Gender:'Female',Salary:50000.0,Department:'IT',Experience:3},
			  {Employeeid:0,Name:'temp',Gender:'Male',Salary:1,Department:'Finance',Experience:2},
			  {Employeeid:10,Name:'temp',Gender:'Female',Salary:1,Department:'IT',Experience:2}])
-----------------------------------------------------------------------------------------------------------------------------------------------------------
db.Employee_1.count();
db.Employee_1.find();
db.Employee_1.find({Name:'Aarti Desai'});
db.Employee_1.findOne();
db.Employee_1.findOne({Name:'Aarti Desai'});
db.Employee_1.deleteOne({Name:'temp'}); 
db.Employee_1.deleteOne({Name:'temp'},{Employeeid:0});
db.Employee_1.deleteMany({Name:'temp'});
db.Employee_1.deleteMany({Name:'temp'},{Experience:1});
db.Employee_1.updateOne({Name:'Priya Sharma'},{$set:{Name:'Priya Singh'}});
db.Employee_1.find();
db.Employee_1.updateOne({Name:'Priya Singh'},{$set:{Name:'Priya Sharma'}});
db.Employee_1.find();
db.Employee_1.updateOne({},{$set:{Name:'Priya Singh'}});
db.Employee_1.find();
db.Employee_1.updateMany({},{$set:{Name:'Priya Singh'}});
db.Employee_1.find();
db.Employee_1.updateOne({Employeeid:5},{$set:{Name:'Priya Sharma'}});
db.Employee_1.updateOne({Employeeid:6},{$set:{Name:'Rahul Patel'}});
db.Employee_1.updateOne({Employeeid:7},{$set:{Name:'Nisha Gupta'}});
db.Employee_1.updateOne({Employeeid:8},{$set:{Name:'Vikram Singh'}});
db.Employee_1.updateOne({Employeeid:9},{$set:{Name:'Aarti Desai'}});
db.Employee_1.find();



==========================================================================================================================================================================

show collections;
db.Products.drop();
db.createCollection("Products");
show collections;
db.Employee_1.insertOne({ProductName:'JAVA',sellerName:'SunMicroJamesGosling',ProductImage:'C:/Users/KIIT/Desktop/PROGRAM LANGUAGES/Coding/MongoDB/Java-Logo.png', Quantity:10});
db.Products.insertMany([
    {ProductName:'C++',sellerName:'Dennis',ProductImage:"C:\Users\KIIT\Desktop\PROGRAM LANGUAGES\Coding\MongoDB\C++_img.png",Quanity:17},
    {ProductName:'Python',sellerName:'Mark',ProductImage:'C:/Users/KIIT/Desktop/PROGRAM LANGUAGES/Coding/MongoDB/Python_img.png',Quantity:17},
    {ProductName:'C',sellerName:'Dennis',ProductImage:'C:/Users/KIIT/Desktop/PROGRAM LANGUAGES/Coding/MongoDB/DSA_img.png',Quantity:20},
    {ProductName:'LabVIEW',sellerName:'NI',ProductImage:'C:/Users/KIIT/Desktop/PROGRAM LANGUAGES/Coding/MongoDB/LabVIEW_img.png',Quantity:0}
]);
db.Products.find();
db.Products.find({Quantity:0});
db.Products.updateOne({sellerName:'NI'},{$set:{ProductImage:''}});
db.Products.find({ProductImage:''});
db.Products.updateOne({ProductImage:''},{$set:{ProductImage:'C:/Users/KIIT/Desktop/PROGRAM LANGUAGES/Coding/MongoDB/LabVIEW_img.png'}});
db.Products.find({sellerName:{$eq:'Dennis'}});
db.Products.find({Quantity:{$gt:17}});
db.Products.find({Quantity:{$eq:17}});
db.Products.find({Quantity:{$lt:17}});
db.Products.find({Quantity:{$gte:17}});
db.Products.find({Quantity:{$ne:17}});
db.Products.find({Quantity:{$lte:17}});
db.Products.find({Quantity:{$in:[17]}});
db.Products.find({Quantity:{$in:[0]}});
db.Products.find({Quantity:{$in:[0,17]}});
db.Products.find({Quantity:{$in:[0,17,20]}});
db.Products.find({Quantity:{$nin:[0,17]}});
db.Products.find({Quantity:{$nin:[17]}});
db.Products.find({$and:[{Quantity:17},{sellerName:'NI'}]})
db.Products.find({$or:[{Quantity:17},{sellerName:'NI'}]})
db.Products.find({$nor:[{Quantity:17},{sellerName:'NI'}]})
db.Products.find({$and:[{Quantity:17},{Quantity:0}]})
db.Products.find({$or:[{Quantity:17},{Quantity:15}]})
db.Products.find({$or:[{Quantity:17},{sellerName:'Dennis'}]})
db.Products.find({$nor:[{Quantity:17},{sellerName:'Dennis'}]})
db.Products.find({Quantity:{$not:{$gt:17}}});
db.Products.find({Quantity:{$not:{$lt:17}}});
db.Products.find({Quantity:{$not:{$et:17}}});
db.Products.find({Quantity:{$not:{$lt:17}}});
db.Products.find({Quantity:{$not:{$ne:17}}});
db.Products.find({Quantity:{$not:{$eq:17}}});
db.Products.find({sellerName:{$not:{$ne:'Dennis'}}});
db.Products.find({sellerName:{$not:{$eq:'Dennis'}}});

