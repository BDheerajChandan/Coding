<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20241.24.0425.1340                               -->
<workbook original-version='18.1' source-build='2024.1.2 (20241.24.0425.1340)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Sheet1 (sales_data_1)' inline='true' name='federated.1f77i8j0u3ts4e1g497xv0kfptq0' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='train' name='excel-direct.1u6duvn0ooqf9j16741p60z18u2s'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/KIIT/Desktop/DV data/train.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='Final_Marks_PGDBDA_March2024' name='excel-direct.08hlix31agqav91h8h1fr11eg88s'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/KIIT/Desktop/Personal _2/GitHub/Coding/ML/Dataset FIles/Result_Datasets/Final_Marks_PGDBDA_March2024.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.1u6duvn0ooqf9j16741p60z18u2s' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:S9801:no:A1:S9801:0' header='yes' outcome='6'>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='integer' name='Row ID' ordinal='1' />
            <column datatype='string' name='Order ID' ordinal='2' />
            <column datatype='date' date-parse-format='dd/MM/yyyy' name='Order Date' ordinal='3' />
            <column datatype='string' name='Ship Date' ordinal='4' />
            <column datatype='string' name='Ship Mode' ordinal='5' />
            <column datatype='string' name='Customer ID' ordinal='6' />
            <column datatype='string' name='Customer Name' ordinal='7' />
            <column datatype='string' name='Segment' ordinal='8' />
            <column datatype='string' name='Country' ordinal='9' />
            <column datatype='string' name='City' ordinal='10' />
            <column datatype='string' name='State' ordinal='11' />
            <column datatype='integer' name='Postal Code' ordinal='12' />
            <column datatype='string' name='Region' ordinal='13' />
            <column datatype='string' name='Product ID' ordinal='14' />
            <column datatype='string' name='Category' ordinal='15' />
            <column datatype='string' name='Sub-Category' ordinal='16' />
            <column datatype='string' name='Product Name' ordinal='17' />
            <column datatype='real' name='Sales' ordinal='18' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.1u6duvn0ooqf9j16741p60z18u2s' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:S9801:no:A1:S9801:0' header='yes' outcome='6'>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='integer' name='Row ID' ordinal='1' />
            <column datatype='string' name='Order ID' ordinal='2' />
            <column datatype='date' date-parse-format='dd/MM/yyyy' name='Order Date' ordinal='3' />
            <column datatype='string' name='Ship Date' ordinal='4' />
            <column datatype='string' name='Ship Mode' ordinal='5' />
            <column datatype='string' name='Customer ID' ordinal='6' />
            <column datatype='string' name='Customer Name' ordinal='7' />
            <column datatype='string' name='Segment' ordinal='8' />
            <column datatype='string' name='Country' ordinal='9' />
            <column datatype='string' name='City' ordinal='10' />
            <column datatype='string' name='State' ordinal='11' />
            <column datatype='integer' name='Postal Code' ordinal='12' />
            <column datatype='string' name='Region' ordinal='13' />
            <column datatype='string' name='Product ID' ordinal='14' />
            <column datatype='string' name='Category' ordinal='15' />
            <column datatype='string' name='Sub-Category' ordinal='16' />
            <column datatype='string' name='Product Name' ordinal='17' />
            <column datatype='real' name='Sales' ordinal='18' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:S9801:no:A1:S9801:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Row ID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Row ID]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Row ID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Order ID]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Order ID</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Order Date]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Order Date</remote-alias>
            <ordinal>3</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Ship Date]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Ship Date</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer ID]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Customer ID</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer Name]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Customer Name</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Segment]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Segment</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Postal Code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Postal Code]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Postal Code</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product ID]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Product ID</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sub-Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sub-Category]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Sub-Category</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product Name]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Product Name</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Sales less than 10' datatype='boolean' name='[Calculation_1427359672734306304]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Category]=&quot;Furniture&quot; &#13;&#10;THEN&#13;&#10;[Sales] &gt; 10&#13;&#10;ELSEIF [Category]=&quot;Office Supplies&quot;&#13;&#10;THEN&#13;&#10;[Sales] &lt; 100&#13;&#10;ELSE&#13;&#10;[Sales] &lt; 1000&#13;&#10;END' />
      </column>
      <column caption='Count_SubCategory' datatype='integer' name='[Calculation_1427359672750170113]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='COUNT([Sub-Category])' />
      </column>
      <column caption='Max_Sales' datatype='real' name='[Calculation_1427359672751616002]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='MAX([Sales])' />
      </column>
      <column caption='Sales &lt; 1000' datatype='boolean' name='[Calculation_595319641157259266]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[Sales] &lt; 10' />
      </column>
      <column caption='Top 10' datatype='boolean' name='[Calculation_595319641157980163]' role='measure' type='nominal'>
        <calculation class='tableau' formula='INDEX()&lt;10'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='string' name='[Category]' role='dimension' type='nominal' />
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='date' datatype-customized='true' name='[Order Date]' role='dimension' type='ordinal' />
      <column aggregation='Sum' datatype='integer' default-format='*00000' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column datatype='integer' name='[Row ID]' role='dimension' type='ordinal' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]' role='measure' type='quantitative' />
      <column-instance column='[City]' derivation='Attribute' name='[attr:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/KIIT/AppData/Local/Temp/TableauTemp/#TableauTemp_170voex11pm96n18u4prt0ige0ve.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='09/26/2024 12:53:39 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>F1</remote-name>
              <remote-type>20</remote-type>
              <local-name>[F1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>F1</remote-alias>
              <ordinal>0</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>9800</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Row ID</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Row ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Row ID</remote-alias>
              <ordinal>1</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>9800</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Order ID</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Order ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Order ID</remote-alias>
              <ordinal>2</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3166</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Order Date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[Order Date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Order Date</remote-alias>
              <ordinal>3</ordinal>
              <family>Sheet1</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>1418</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Ship Date</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Ship Date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Ship Date</remote-alias>
              <ordinal>4</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1498</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Ship Mode</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Ship Mode]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Ship Mode</remote-alias>
              <ordinal>5</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Customer ID</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Customer ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Customer ID</remote-alias>
              <ordinal>6</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1083</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Customer Name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Customer Name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Customer Name</remote-alias>
              <ordinal>7</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1083</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Segment</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Segment]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Segment</remote-alias>
              <ordinal>8</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Country</remote-alias>
              <ordinal>9</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>City</remote-name>
              <remote-type>129</remote-type>
              <local-name>[City]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>City</remote-alias>
              <ordinal>10</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>515</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>State</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State</remote-alias>
              <ordinal>11</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>55</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Postal Code</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Postal Code]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Postal Code</remote-alias>
              <ordinal>12</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>613</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Region</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Region]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Region</remote-alias>
              <ordinal>13</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Product ID</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Product ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Product ID</remote-alias>
              <ordinal>14</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2074</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Category</remote-alias>
              <ordinal>15</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sub-Category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Sub-Category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Sub-Category</remote-alias>
              <ordinal>16</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>17</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Product Name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Product Name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Product Name</remote-alias>
              <ordinal>17</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2035</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sales</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Sales]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Sales</remote-alias>
              <ordinal>18</ordinal>
              <family>Sheet1</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3430</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:City:nk]' palette='blue_red_brown_10_0' type='palette'>
            <map to='#3896c4'>
              <bucket>&quot;Allentown&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Arvada&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Bartlett&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Boca Raton&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Brownsville&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Carol Stream&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Chester&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Coachella&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Coral Springs&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Dearborn&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Dublin&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Elkhart&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Fayetteville&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Garden City&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Grapevine&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Haltom City&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Hickory&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Independence&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Keller&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Laguna Niguel&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Laurel&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Little Rock&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Macon&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Marysville&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Middletown&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Monroe&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Muskogee&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Niagara Falls&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Odessa&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Overland Park&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Pearland&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Plantation&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Pueblo&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Renton&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Rome&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Saint Peters&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;San Jose&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Seattle&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Springfield&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Tempe&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Troy&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Virginia Beach&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;West Allis&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Woodland&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Aberdeen&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Antioch&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Aurora&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Bellevue&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Bozeman&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Burlington&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Chandler&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Citrus Heights&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Concord&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Cuyahoga Falls&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Denver&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Eau Claire&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Eugene&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Franklin&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Glendale&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Greenwood&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Helena&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Homestead&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Jacksonville&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Knoxville&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Lakewood&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Lehi&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Lorain&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Manteca&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Mentor&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Mishawaka&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Morristown&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;North Las Vegas&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Orange&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Parker&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Philadelphia&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Port Orange&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Redding&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Rochester&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Sacramento&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;San Antonio&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Santa Ana&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Smyrna&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Superior&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Thousand Oaks&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Urbandale&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Waterbury&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Wheeling&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Yuma&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Abilene&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Apopka&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Austin&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Bellingham&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Brentwood&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Caldwell&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Chapel Hill&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Clarksville&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Conroe&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Dallas&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Des Moines&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Edinburg&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Evanston&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Freeport&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Glenview&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Gresham&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Hempstead&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Hoover&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Jamestown&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;La Crosse&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Lancaster&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Leominster&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Los Angeles&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Maple Grove&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Meriden&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Mission Viejo&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Mount Pleasant&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;New Castle&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;North Miami&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Orem&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Parma&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Phoenix&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Port Saint Lucie&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Redlands&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Rochester Hills&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Saginaw&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;San Bernardino&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Santa Barbara&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;South Bend&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Tallahassee&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Tigard&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Utica&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Waterloo&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Whittier&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Alexandria&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Arlington&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Baltimore&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Billings&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Broken Arrow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Canton&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chattanooga&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Clinton&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Coppell&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Davis&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dover&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;El Cajon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fargo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Frisco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Grand Prairie&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hackensack&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hesperia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Huntington Beach&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jonesboro&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;La Quinta&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Las Cruces&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Linden&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lowell&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Marion&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mesquite&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mobile&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Murray&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Newark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oakland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ormond Beach&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Passaic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Plainfield&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Providence&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Redwood City&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rockville&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saint Louis&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;San Francisco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Santa Maria&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Spokane&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Taylor&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Torrance&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Vancouver&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wausau&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wilson&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Altoona&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Asheville&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Bayonne&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Boise&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Bryan&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Carrollton&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Cheyenne&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;College Station&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Corpus Christi&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Dearborn Heights&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Dubuque&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Florence&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Garland&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Great Falls&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Hamilton&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Highland Park&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Indianapolis&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Kenner&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Lake Charles&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Lawrence&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Littleton&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Madison&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Mcallen&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Midland&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Montebello&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Naperville&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Noblesville&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Oklahoma City&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Owensboro&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Pembroke Pines&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Pleasant Grove&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Quincy&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Revere&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Romeoville&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Saint Petersburg&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;San Luis Obispo&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Sheboygan&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Sterling Heights&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Texarkana&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Tucson&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Visalia&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;West Jordan&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Woodstock&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Amarillo&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Athens&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Baytown&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Bolingbrook&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Buffalo&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Cary&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Chicago&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Colorado Springs&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Costa Mesa&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Decatur&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Durham&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Elyria&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Fort Collins&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Gastonia&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Greeley&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Hampton&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Hillsboro&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Inglewood&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Kenosha&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Lake Elsinore&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Lawton&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Logan&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Malden&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Medford&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Milford&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Montgomery&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Nashua&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Norfolk&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Olathe&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Oxnard&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Pensacola&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Pocatello&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Raleigh&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Richardson&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Roseville&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Salem&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;San Marcos&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Shelton&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Stockton&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Texas City&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Tulsa&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Waco&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;West Palm Beach&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Woonsocket&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Andover&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Atlantic City&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Bedford&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Bowling Green&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Bullhead City&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Cedar Rapids&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Chula Vista&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Columbus&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Covington&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Delray Beach&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;East Orange&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Englewood&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Fort Worth&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Gilbert&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Greensboro&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Harrisonburg&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Hollywood&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Irving&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Kirkwood&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Lakeland&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;League City&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Longmont&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Manhattan&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Melbourne&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Minneapolis&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Moreno Valley&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;New Albany&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Norman&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Omaha&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Palm Coast&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Perth Amboy&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Pompano Beach&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Rapid City&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Rio Rancho&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Round Rock&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Salt Lake City&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Sandy Springs&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Sioux Falls&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Summerville&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Thomasville&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Twin Falls&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Warwick&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Westland&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;York&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Allen&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Arlington Heights&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bangor&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bloomington&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Broomfield&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Carlsbad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chesapeake&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Clovis&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Coral Gables&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Daytona Beach&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Draper&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;El Paso&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Farmington&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gaithersburg&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Grand Rapids&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hagerstown&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hialeah&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Huntsville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jupiter&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lafayette&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Las Vegas&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lindenhurst&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lubbock&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Marlborough&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Miami&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Modesto&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Murrieta&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Newport News&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oceanside&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oswego&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Paterson&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Plano&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Provo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Reno&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Rogers&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Saint Paul&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;San Gabriel&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Scottsdale&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Springdale&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Temecula&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Trenton&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Vineland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Waynesboro&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Woodbury&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Anaheim&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Atlanta&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Beaumont&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Bossier City&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Buffalo Grove&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Cedar Hill&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Chico&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Columbia&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Cottage Grove&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Deer Park&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Eagan&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Encinitas&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Fort Lauderdale&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Georgetown&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Green Bay&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Harlingen&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Holland&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Iowa City&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Kent&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Lake Forest&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Layton&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Long Beach&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Manchester&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Medina&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Milwaukee&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Moorhead&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Nashville&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Normal&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Olympia&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Palatine&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Peoria&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Pomona&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Rancho Cucamonga&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Richmond&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Roswell&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Salinas&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;San Mateo&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Sierra Vista&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Suffolk&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;The Colony&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Tuscaloosa&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Warner Robins&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Westfield&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Yonkers&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Ann Arbor&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Auburn&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Belleville&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Boynton Beach&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Burbank&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Champaign&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Cincinnati&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Commerce City&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Cranston&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Deltona&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;East Point&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Escondido&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Frankfort&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Gladstone&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Greenville&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Hattiesburg&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Holyoke&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Jackson&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Kissimmee&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Lakeville&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Longview&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Mansfield&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Memphis&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Miramar&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Morgan Hill&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;New Bedford&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;North Charleston&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Park Ridge&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Pharr&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Port Arthur&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Reading&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Riverside&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Royal Oak&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;San Angelo&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Sanford&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Skokie&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Sunnyvale&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Thornton&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Tyler&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Westminster&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Yucaipa&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Akron&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Apple Valley&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Avondale&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Bethlehem&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Bridgeton&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Camarillo&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Charlotte&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Cleveland&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Conway&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Danbury&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Des Plaines&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Edmond&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Everett&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Fremont&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Goldsboro&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Grove City&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Henderson&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Hot Springs&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Jefferson City&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;La Mesa&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Lansing&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Lewiston&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Louisville&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Margate&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Meridian&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Missoula&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Mount Vernon&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;New Rochelle&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Norwich&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Orland Park&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Pasadena&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Pico Rivera&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Portage&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Redmond&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Rock Hill&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Saint Charles&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;San Clemente&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Santa Clara&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Southaven&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Tamarac&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Tinley Park&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Vacaville&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Watertown&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Wichita&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Albuquerque&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Appleton&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Bakersfield&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Beverly&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Bristol&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Cambridge&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Charlottesville&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Clifton&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Coon Rapids&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Danville&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Detroit&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Edmonds&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Fairfield&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Fresno&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Grand Island&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Gulfport&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Hendersonville&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Houston&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Johnson City&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;La Porte&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Laredo&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Lincoln Park&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Loveland&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Marietta&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Mesa&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Missouri City&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Murfreesboro&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;New York City&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Oak Park&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Orlando&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Pasco&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Pine Bluff&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Portland&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Redondo Beach&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Rockford&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Saint Cloud&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;San Diego&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Santa Fe&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Sparks&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Tampa&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Toledo&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Vallejo&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Waukesha&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Wilmington&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[attr:City:nk]' palette='blue_red_brown_10_0' type='palette'>
            <map to='#3896c4'>
              <bucket>&quot;Allentown&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Arvada&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Bartlett&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Boca Raton&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Brownsville&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Carol Stream&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Chester&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Coachella&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Coral Springs&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Dearborn&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Dublin&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Elkhart&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Fayetteville&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Garden City&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Grapevine&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Haltom City&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Hickory&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Independence&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Keller&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Laguna Niguel&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Laurel&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Little Rock&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Macon&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Marysville&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Middletown&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Monroe&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Muskogee&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Niagara Falls&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Odessa&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Overland Park&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Pearland&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Plantation&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Pueblo&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Renton&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Rome&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Saint Peters&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;San Jose&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Seattle&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Springfield&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Tempe&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Troy&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Virginia Beach&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;West Allis&quot;</bucket>
            </map>
            <map to='#3896c4'>
              <bucket>&quot;Woodland&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Aberdeen&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Antioch&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Aurora&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Bellevue&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Bozeman&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Burlington&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Chandler&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Citrus Heights&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Concord&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Cuyahoga Falls&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Denver&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Eau Claire&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Eugene&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Franklin&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Glendale&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Greenwood&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Helena&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Homestead&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Jacksonville&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Knoxville&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Lakewood&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Lehi&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Lorain&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Manteca&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Mentor&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Mishawaka&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Morristown&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;North Las Vegas&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Orange&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Parker&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Philadelphia&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Port Orange&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Redding&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Rochester&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Sacramento&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;San Antonio&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Santa Ana&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Smyrna&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Superior&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Thousand Oaks&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Urbandale&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Waterbury&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Wheeling&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Yuma&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Abilene&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Apopka&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Austin&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Bellingham&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Brentwood&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Caldwell&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Chapel Hill&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Clarksville&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Conroe&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Dallas&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Des Moines&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Edinburg&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Evanston&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Freeport&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Glenview&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Gresham&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Hempstead&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Hoover&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Jamestown&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;La Crosse&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Lancaster&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Leominster&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Los Angeles&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Maple Grove&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Meriden&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Mission Viejo&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Mount Pleasant&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;New Castle&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;North Miami&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Orem&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Parma&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Phoenix&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Port Saint Lucie&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Redlands&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Rochester Hills&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Saginaw&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;San Bernardino&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Santa Barbara&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;South Bend&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Tallahassee&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Tigard&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Utica&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Waterloo&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Whittier&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Alexandria&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Arlington&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Baltimore&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Billings&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Broken Arrow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Canton&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chattanooga&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Clinton&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Coppell&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Davis&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dover&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;El Cajon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fargo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Frisco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Grand Prairie&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hackensack&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hesperia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Huntington Beach&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jonesboro&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;La Quinta&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Las Cruces&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Linden&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lowell&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Marion&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mesquite&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mobile&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Murray&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Newark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oakland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ormond Beach&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Passaic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Plainfield&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Providence&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Redwood City&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rockville&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saint Louis&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;San Francisco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Santa Maria&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Spokane&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Taylor&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Torrance&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Vancouver&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wausau&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wilson&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Altoona&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Asheville&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Bayonne&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Boise&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Bryan&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Carrollton&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Cheyenne&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;College Station&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Corpus Christi&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Dearborn Heights&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Dubuque&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Florence&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Garland&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Great Falls&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Hamilton&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Highland Park&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Indianapolis&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Kenner&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Lake Charles&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Lawrence&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Littleton&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Madison&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Mcallen&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Midland&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Montebello&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Naperville&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Noblesville&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Oklahoma City&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Owensboro&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Pembroke Pines&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Pleasant Grove&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Quincy&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Revere&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Romeoville&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Saint Petersburg&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;San Luis Obispo&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Sheboygan&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Sterling Heights&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Texarkana&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Tucson&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Visalia&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;West Jordan&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Woodstock&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Amarillo&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Athens&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Baytown&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Bolingbrook&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Buffalo&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Cary&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Chicago&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Colorado Springs&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Costa Mesa&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Decatur&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Durham&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Elyria&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Fort Collins&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Gastonia&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Greeley&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Hampton&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Hillsboro&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Inglewood&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Kenosha&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Lake Elsinore&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Lawton&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Logan&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Malden&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Medford&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Milford&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Montgomery&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Nashua&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Norfolk&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Olathe&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Oxnard&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Pensacola&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Pocatello&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Raleigh&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Richardson&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Roseville&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Salem&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;San Marcos&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Shelton&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Stockton&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Texas City&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Tulsa&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Waco&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;West Palm Beach&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Woonsocket&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Andover&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Atlantic City&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Bedford&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Bowling Green&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Bullhead City&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Cedar Rapids&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Chula Vista&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Columbus&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Covington&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Delray Beach&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;East Orange&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Englewood&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Fort Worth&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Gilbert&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Greensboro&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Harrisonburg&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Hollywood&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Irving&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Kirkwood&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Lakeland&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;League City&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Longmont&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Manhattan&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Melbourne&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Minneapolis&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Moreno Valley&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;New Albany&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Norman&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Omaha&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Palm Coast&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Perth Amboy&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Pompano Beach&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Rapid City&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Rio Rancho&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Round Rock&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Salt Lake City&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Sandy Springs&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Sioux Falls&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Summerville&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Thomasville&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Twin Falls&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Warwick&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Westland&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;York&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Allen&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Arlington Heights&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bangor&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bloomington&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Broomfield&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Carlsbad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chesapeake&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Clovis&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Coral Gables&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Daytona Beach&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Draper&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;El Paso&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Farmington&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gaithersburg&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Grand Rapids&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hagerstown&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hialeah&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Huntsville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jupiter&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lafayette&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Las Vegas&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lindenhurst&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lubbock&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Marlborough&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Miami&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Modesto&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Murrieta&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Newport News&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oceanside&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oswego&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Paterson&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Plano&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Provo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Reno&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Rogers&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Saint Paul&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;San Gabriel&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Scottsdale&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Springdale&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Temecula&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Trenton&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Vineland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Waynesboro&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Woodbury&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Anaheim&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Atlanta&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Beaumont&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Bossier City&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Buffalo Grove&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Cedar Hill&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Chico&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Columbia&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Cottage Grove&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Deer Park&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Eagan&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Encinitas&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Fort Lauderdale&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Georgetown&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Green Bay&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Harlingen&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Holland&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Iowa City&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Kent&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Lake Forest&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Layton&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Long Beach&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Manchester&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Medina&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Milwaukee&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Moorhead&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Nashville&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Normal&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Olympia&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Palatine&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Peoria&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Pomona&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Rancho Cucamonga&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Richmond&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Roswell&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Salinas&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;San Mateo&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Sierra Vista&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Suffolk&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;The Colony&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Tuscaloosa&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Warner Robins&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Westfield&quot;</bucket>
            </map>
            <map to='#e9b87f'>
              <bucket>&quot;Yonkers&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Ann Arbor&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Auburn&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Belleville&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Boynton Beach&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Burbank&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Champaign&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Cincinnati&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Commerce City&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Cranston&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Deltona&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;East Point&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Escondido&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Frankfort&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Gladstone&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Greenville&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Hattiesburg&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Holyoke&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Jackson&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Kissimmee&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Lakeville&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Longview&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Mansfield&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Memphis&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Miramar&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Morgan Hill&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;New Bedford&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;North Charleston&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Park Ridge&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Pharr&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Port Arthur&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Reading&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Riverside&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Royal Oak&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;San Angelo&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Sanford&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Skokie&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Sunnyvale&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Thornton&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Tyler&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Westminster&quot;</bucket>
            </map>
            <map to='#ea8783'>
              <bucket>&quot;Yucaipa&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Akron&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Apple Valley&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Avondale&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Bethlehem&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Bridgeton&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Camarillo&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Charlotte&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Cleveland&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Conway&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Danbury&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Des Plaines&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Edmond&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Everett&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Fremont&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Goldsboro&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Grove City&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Henderson&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Hot Springs&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Jefferson City&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;La Mesa&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Lansing&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Lewiston&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Louisville&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Margate&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Meridian&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Missoula&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Mount Vernon&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;New Rochelle&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Norwich&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Orland Park&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Pasadena&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Pico Rivera&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Portage&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Redmond&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Rock Hill&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Saint Charles&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;San Clemente&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Santa Clara&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Southaven&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Tamarac&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Tinley Park&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Vacaville&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Watertown&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Wichita&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Albuquerque&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Appleton&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Bakersfield&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Beverly&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Bristol&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Cambridge&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Charlottesville&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Clifton&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Coon Rapids&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Danville&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Detroit&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Edmonds&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Fairfield&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Fresno&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Grand Island&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Gulfport&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Hendersonville&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Houston&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Johnson City&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;La Porte&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Laredo&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Lincoln Park&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Loveland&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Marietta&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Mesa&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Missouri City&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Murfreesboro&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;New York City&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Oak Park&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Orlando&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Pasco&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Pine Bluff&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Portland&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Redondo Beach&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Rockford&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Saint Cloud&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;San Diego&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Santa Fe&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Sparks&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Tampa&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Toledo&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Vallejo&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Waukesha&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Wilmington&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Category:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Furniture&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Technology&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Office Supplies&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Sub-Category:nk]' palette='blue_red_brown_10_0' type='palette'>
            <map to='#466f9d'>
              <bucket>&quot;Accessories&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Bookcases&quot;</bucket>
            </map>
            <map to='#466f9d'>
              <bucket>&quot;Paper&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Appliances&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Chairs&quot;</bucket>
            </map>
            <map to='#91b3d7'>
              <bucket>&quot;Copiers&quot;</bucket>
            </map>
            <map to='#a0d4ee'>
              <bucket>&quot;Envelopes&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tables&quot;</bucket>
            </map>
            <map to='#ba7e45'>
              <bucket>&quot;Fasteners&quot;</bucket>
            </map>
            <map to='#c8133b'>
              <bucket>&quot;Labels&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Art&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Furnishings&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Machines&quot;</bucket>
            </map>
            <map to='#ed444a'>
              <bucket>&quot;Storage&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Binders&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Phones&quot;</bucket>
            </map>
            <map to='#feb5a2'>
              <bucket>&quot;Supplies&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='F1' />
        <field-sort-custom-order field='Row ID' />
        <field-sort-custom-order field='Order ID' />
        <field-sort-custom-order field='Order Date' />
        <field-sort-custom-order field='Ship Date' />
        <field-sort-custom-order field='Ship Mode' />
        <field-sort-custom-order field='Customer ID' />
        <field-sort-custom-order field='Customer Name' />
        <field-sort-custom-order field='Segment' />
        <field-sort-custom-order field='Country' />
        <field-sort-custom-order field='City' />
        <field-sort-custom-order field='State' />
        <field-sort-custom-order field='Postal Code' />
        <field-sort-custom-order field='Region' />
        <field-sort-custom-order field='Product ID' />
        <field-sort-custom-order field='Category' />
        <field-sort-custom-order field='Sub-Category' />
        <field-sort-custom-order field='Calculation_1427359672750170113' />
        <field-sort-custom-order field='Product Name' />
        <field-sort-custom-order field='Sales' />
        <field-sort-custom-order field='Calculation_1427359672751616002' />
        <field-sort-custom-order field='Calculation_595319641157980163' />
        <field-sort-custom-order field='Calculation_595319641157259266' />
        <field-sort-custom-order field='Calculation_595319641155997696' />
        <field-sort-custom-order field='Geometry (generated)' />
        <field-sort-custom-order field='Latitude (generated)' />
        <field-sort-custom-order field='Longitude (generated)' />
        <field-sort-custom-order field=':Measure Names' />
        <field-sort-custom-order field='Multiple Values' />
      </field-sort-info>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_9759B647DB3F45EC8AF8975EA5E8CBE8'>
            <properties context=''>
              <relation connection='excel-direct.1u6duvn0ooqf9j16741p60z18u2s' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:S9801:no:A1:S9801:0' header='yes' outcome='6'>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='integer' name='Row ID' ordinal='1' />
                  <column datatype='string' name='Order ID' ordinal='2' />
                  <column datatype='date' date-parse-format='dd/MM/yyyy' name='Order Date' ordinal='3' />
                  <column datatype='string' name='Ship Date' ordinal='4' />
                  <column datatype='string' name='Ship Mode' ordinal='5' />
                  <column datatype='string' name='Customer ID' ordinal='6' />
                  <column datatype='string' name='Customer Name' ordinal='7' />
                  <column datatype='string' name='Segment' ordinal='8' />
                  <column datatype='string' name='Country' ordinal='9' />
                  <column datatype='string' name='City' ordinal='10' />
                  <column datatype='string' name='State' ordinal='11' />
                  <column datatype='integer' name='Postal Code' ordinal='12' />
                  <column datatype='string' name='Region' ordinal='13' />
                  <column datatype='string' name='Product ID' ordinal='14' />
                  <column datatype='string' name='Category' ordinal='15' />
                  <column datatype='string' name='Sub-Category' ordinal='16' />
                  <column datatype='string' name='Product Name' ordinal='17' />
                  <column datatype='real' name='Sales' ordinal='18' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1_784911362D06436E92D5A067648D53BC]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='IfThen CalcField' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Sub-Category' />
        <param name='target' value='IfThen CalcField' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Color_Label_Filter'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (sales_data_1)' name='federated.1f77i8j0u3ts4e1g497xv0kfptq0' />
          </datasources>
          <datasource-dependencies datasource='federated.1f77i8j0u3ts4e1g497xv0kfptq0'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]'>
            <groupfilter function='member' level='[none:Category:nk]' member='&quot;Technology&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Sub-Category:nk]' member='&quot;Tables&quot;' />
                <groupfilter function='member' level='[none:Sub-Category:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:State:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]</column>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]' />
              <text column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk] / [federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:State:nk])</rows>
        <cols>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]</cols>
      </table>
      <simple-id uuid='{F74BD64E-172E-47F4-9C4E-5657ECAD950B}' />
    </worksheet>
    <worksheet name='Date_Sales_Category'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (sales_data_1)' name='federated.1f77i8j0u3ts4e1g497xv0kfptq0' />
          </datasources>
          <datasource-dependencies datasource='federated.1f77i8j0u3ts4e1g497xv0kfptq0'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='date' datatype-customized='true' name='[Order Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[Ship Date]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Ship Date]' derivation='None' name='[none:Ship Date:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Month-Trunc' name='[tmn:Order Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]'>
            <groupfilter function='level-members' level='[none:Category:nk]' />
          </filter>
          <filter class='categorical' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Ship Date:nk]'>
            <groupfilter function='level-members' level='[none:Ship Date:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[tmn:Order Date:qk]' included-values='in-range'>
            <min>#2015-01-01 00:00:00#</min>
            <max>#2018-12-01 00:00:00#</max>
          </filter>
          <filter class='categorical' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[yr:Order Date:ok]'>
            <groupfilter from='2015' function='range' level='[yr:Order Date:ok]' to='2018' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Ship Date:nk]</column>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]</column>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[tmn:Order Date:qk]</column>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[yr:Order Date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[tmn:Order Date:qk]' value='' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='fill-above' id='refline1' value='#00000000' />
            <format attr='fill-below' id='refline1' value='#00000000' />
            <format attr='fill-above' id='refline2' value='#00000000' />
            <format attr='fill-below' id='refline2' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]' />
            </encodings>
            <reference-line axis-column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' enable-instant-analytics='true' formula='median' id='refline1' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' z-order='1' />
            <reference-line axis-column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' enable-instant-analytics='true' formula='average' id='refline2' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' z-order='2' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]</rows>
        <cols>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[tmn:Order Date:qk]</cols>
      </table>
      <simple-id uuid='{A618DAEB-0961-4E77-BE74-36A3A26F7597}' />
    </worksheet>
    <worksheet name='Dual Axis - Sales , Sub Category'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (sales_data_1)' name='federated.1f77i8j0u3ts4e1g497xv0kfptq0' />
          </datasources>
          <datasource-dependencies datasource='federated.1f77i8j0u3ts4e1g497xv0kfptq0'>
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Sales]' derivation='Avg' name='[avg:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[avg:Sales:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#e15759' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#e15759' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[avg:Sales:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#e15759' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk] + [federated.1f77i8j0u3ts4e1g497xv0kfptq0].[avg:Sales:qk])</rows>
        <cols>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]</cols>
      </table>
      <simple-id uuid='{F493F35A-7A84-4635-8EB0-CE31881BCDF4}' />
    </worksheet>
    <worksheet name='FilterLabel'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (sales_data_1)' name='federated.1f77i8j0u3ts4e1g497xv0kfptq0' />
          </datasources>
          <datasource-dependencies datasource='federated.1f77i8j0u3ts4e1g497xv0kfptq0'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Sales]' derivation='Avg' name='[avg:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[avg:Sales:qk]' included-values='in-range'>
            <min>14.027850467289728</min>
            <max>2215.880212121212</max>
          </filter>
          <filter class='categorical' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:City:nk]'>
            <groupfilter function='level-members' level='[none:City:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:City:nk]</column>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[avg:Sales:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]' value='33' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk] / [federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk])</rows>
        <cols />
      </table>
      <simple-id uuid='{7C9F8888-F553-4AF2-AE36-BA079D3D95A6}' />
    </worksheet>
    <worksheet name='Filters_Sliders'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (sales_data_1)' name='federated.1f77i8j0u3ts4e1g497xv0kfptq0' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1f77i8j0u3ts4e1g497xv0kfptq0'>
            <column caption='Sales &lt; 1000' datatype='boolean' name='[Calculation_595319641157259266]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[Sales] &lt; 10' />
            </column>
            <column caption='Top 10' datatype='boolean' name='[Calculation_595319641157980163]' role='measure' type='nominal'>
              <calculation class='tableau' formula='INDEX()&lt;10'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[City]' derivation='Attribute' name='[attr:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_595319641157259266]' derivation='None' name='[none:Calculation_595319641157259266:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_595319641157980163]' derivation='User' name='[usr:Calculation_595319641157980163:nk:1]' pivot='key' type='nominal'>
              <table-calc ordering-type='Field'>
                <order field='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Country:nk]' />
                <order field='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:City:nk]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Calculation_595319641157259266:nk]'>
            <groupfilter function='member' level='[none:Calculation_595319641157259266:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' included-values='in-range'>
            <min>1.3919999999999999</min>
            <max>570.88400000000001</max>
          </filter>
          <filter class='categorical' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[usr:Calculation_595319641157980163:nk:1]'>
            <groupfilter function='member' level='[usr:Calculation_595319641157980163:nk:1]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:City:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Calculation_595319641157259266:nk]</column>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[usr:Calculation_595319641157980163:nk:1]</column>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[usr:Calculation_595319641157980163:nk:1]' value='Top 10'>
              <formatted-text>
                <run>Top 10</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <tooltip column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[attr:City:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Country:nk] / [federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:City:nk])</rows>
        <cols>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]</cols>
      </table>
      <simple-id uuid='{47A20753-A9AA-45A5-8D72-FBCBFA35E40D}' />
    </worksheet>
    <worksheet name='IfThen CalcField'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (sales_data_1)' name='federated.1f77i8j0u3ts4e1g497xv0kfptq0' />
          </datasources>
          <datasource-dependencies datasource='federated.1f77i8j0u3ts4e1g497xv0kfptq0'>
            <column caption='Sales less than 10' datatype='boolean' name='[Calculation_1427359672734306304]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Category]=&quot;Furniture&quot; &#13;&#10;THEN&#13;&#10;[Sales] &gt; 10&#13;&#10;ELSEIF [Category]=&quot;Office Supplies&quot;&#13;&#10;THEN&#13;&#10;[Sales] &lt; 100&#13;&#10;ELSE&#13;&#10;[Sales] &lt; 1000&#13;&#10;END' />
            </column>
            <column caption='Max_Sales' datatype='real' name='[Calculation_1427359672751616002]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='MAX([Sales])' />
            </column>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1427359672734306304]' derivation='None' name='[none:Calculation_1427359672734306304:nk]' pivot='key' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1427359672751616002]' derivation='User' name='[usr:Calculation_1427359672751616002:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Calculation_1427359672734306304:nk]'>
            <groupfilter function='member' level='[none:Calculation_1427359672734306304:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]'>
            <groupfilter function='level-members' level='[none:Sub-Category:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Calculation_1427359672734306304:nk]</column>
            <column>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[usr:Calculation_1427359672751616002:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='fill-above' id='refline1' value='#00000000' />
            <format attr='fill-below' id='refline1' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <reference-line axis-column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' enable-instant-analytics='true' formula='median' id='refline0' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' z-order='1' />
            <reference-line axis-column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' enable-instant-analytics='true' formula='average' id='refline1' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' z-order='2' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[usr:Calculation_1427359672751616002:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#e1112d' />
                <format attr='mark-transparency' value='255' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk] + [federated.1f77i8j0u3ts4e1g497xv0kfptq0].[usr:Calculation_1427359672751616002:qk])</rows>
        <cols>([federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Calculation_1427359672734306304:nk] / ([federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk] / [federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]))</cols>
      </table>
      <simple-id uuid='{109CC9E6-CD72-4AD9-A39A-CD1F4A823267}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' name='Color_Label_Filter'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='checkdropdown' param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]' type='filter' />
            <card mode='dropdown' param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:State:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C76332B0-2275-493A-ACF3-0F54A832C46C}' />
    </window>
    <window class='worksheet' name='Filters_Sliders'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[sum:Sales:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Calculation_595319641157259266:nk]' type='filter' />
            <card AVG='true' KURTOSIS='false' MAX='true' MEDIAN='true' MIN='true' QUART1='false' QUART3='false' SKEWNESS='false' STDEV='false' SUM='true' type='summary' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Calculation_595319641157259266:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:City:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Country:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[usr:Calculation_595319641155997696:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[usr:Calculation_595319641157980163:nk]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='2' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{63C4B7C6-8A06-46A9-B270-DF647397492E}' />
    </window>
    <window class='worksheet' name='FilterLabel'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[avg:Sales:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card mode='dropdown' param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:City:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:City:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sales:qk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A678F651-412E-45C8-B47B-4413C251BFAF}' />
    </window>
    <window class='worksheet' name='Date_Sales_Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[tmn:Order Date:qk]' show-domain='false' show-null-ctrls='true' type='filter' />
            <card param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]' type='color' />
            <card param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]' type='highlighter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[my:Order Date:ok]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Order Date:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Ship Date:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[usr:Calculation_595319641157980163:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[yr:Order Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B395027C-69E8-454A-995E-E0DFD2FA0753}' />
    </window>
    <window class='worksheet' name='Dual Axis - Sales , Sub Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:City:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:State:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5EA252E4-E5AF-4897-BE20-8B8860651F07}' />
    </window>
    <window class='worksheet' maximized='true' name='IfThen CalcField'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]' type='filter' />
            <card pane-specification-id='1' param='[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Sub-Category:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[:Measure Names]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Calculation_1427359672750170113:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[none:Category:nk]</field>
            <field>[federated.1f77i8j0u3ts4e1g497xv0kfptq0].[usr:Calculation_1427359672750170113:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{37426C14-4070-44E0-BCEB-246EBDF203DA}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Color_Label_Filter' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Date_Sales_Category' width='192'>
      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
      JKemQKqk9m++AHrfasRWjgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dual Axis - Sales , Sub Category' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nOy9d5QkeV7Y+flFRHpb3nV3tfe+e6ZnenZ2Z2F3Z1g4EIsTIO4wQuJJSKeT
      QeLdIa3MIUCP08E9dHAIIZDESYvfRbeIXe3Mzs5Me1ftTXWX91VZ6TMyzO/+iMrqysqsNOW7
      tz7vzevJjMiMb2TF92e+VkgpJVts8U2KstECbLHFRrLhCpDP5zdahC1eUFbj2dlwBUilUhst
      wroyNjRA1rA2WoyXgtV4djZcAV5G/uvv/Rt+5md+hs//8m+QN+2iYx999c+ZTC8euWz+4gu/
      yd//+/+A//N3/qToyMzQTX7rP311jSX+5kXbaAFeRu4/GeC7/vKPcerIHqzJ+/z2pWm++2SQ
      P7wao8FM8lu/+ovE0wo/90/+EU1+N5mJXq4MCf7lL/4iCpKRh1f4N//+D8i7GjnaYfHl9x6i
      +hR2igG++MFtjpz/LJ87187P//K/xeX18vb3/yS5h1/lv119yI6jb/I/vdHKr/3RJVzhJpTY
      CP/zz/5DfutXf5Uf/1t/G48iNvrn2VRszQBrwE/+9Z/iwcU/55/+4q+RMwzyhom0LfS8AVqQ
      H/vpf8D3nGvjwtWb/Otf+pfcfDxMtKkNl6qgqiruQJQ3Pv4WUTXF/rMf41Of/UF+9DvO8rXr
      T/n+7/8cz25d4eKHH/A9f+N/5Ue//RyJVIobgyn+1S/9Er7R24zrBmZwG3/vr/8I5/ZF+ODa
      TQxfJ26x9fAvZksB1oALFy9z4tzH8edmSFsw9OwhH164gmEDts69nptc7Blkz959/Ohf/euc
      PnGcmccX+NoHF7lw7TYfffXL5BQvpmGiaT7GBu7zZGSGqFsyMZPm7CtnCAd9XL98gWs9D1E0
      F2o2xocXLzKYEoQ0we49e9AUwWuf+Sxf+Ne/wKlPfJKt578U9fOf//znN1KAbDaLz+fbSBFW
      HyPF3QdPeePt72Tf7t2I5BiBjj3s37OLfbu3MzrQz8HXP8WJvV34/X40t49TJw7y8O5dfI2d
      vHrmGH3PBjlx5ix7DxyjwZUmYQd5+5PnePLoCW0793Pq5HFio8+YmZqiad9Z/oe3TnH7zgPe
      +dz30x4N4w810BINoLgD3LzzkB/4nm9DfckUYDWeHVFwhOXz+Q2xyKRSKYLB4Lpf90VndvQp
      F28/wchbfOLTbxP2lJ/MH968xAwRXj95cJ0lXHtW49kRG+0JnpmZobGxcSNF2OIFZTWena09
      wBbf1GwpwBbf1GwpwBbf1GwpwBbf1GwpwBbf1GwpwBqRzuX580tPsO2XP93C7H0Xa/rJRoux
      LLYUYI140D/Fb3zxGjnD3GhR1pz8tX+Pee+LGy3GsthSgGVijfZgTdxf8riUIAS8ZM7XUqRE
      2iZ2YnijJVkWWwqwTPJX/x35a7+z5PFc3sSW8qVfAknbBD2JPfUYab94eQ5bCrAMpJRgW2At
      nZEUT+tICRn9JV8CmTrSyGJnppGZ6Y2Wpm62FGBZSGRuFjs1seQZibQOOJvhlxlp5kB1ITwh
      5Au4DNpSgOUgbWfES44ueUoikwMgnX25FQDTUXS1/TjW5KMNFqZ+tjLCloO0nene1JGWgVBd
      JafE52aAVM5Yb+nWFZlPIRQNteME9uSDjRanbrZmgOVg5MA2EYEW5BLLoERaJ+z3vPQzgMzG
      EL4GlJaDWJMPedHKTG0pwDKw05OIQAtKsA07NV72nERap6M5+PLvAQoKEN2OzMYg/2JV+Vih
      Atg8vH2dq1cuc+PuE2wrz82rl/jowmWSOYP0zBgXLl7g2u2HSGnytHcAKW0e3LlL/gU2D8r0
      JEqgFRFsRSbHSo9LSTyt09kUIp19yZdAcwogvBGEy4edWHpftBlZ4R5AsP/oKYSAKx98wFB/
      Hn/7Pg5HDG4+6oPUOKfPvcHwvSuMJnRmYwkm+x9i+htxv8DVCWR6ChFsQQTbkKlSBbBsiZ43
      aWsIkvommQGE5kGJbsee6UVt2b/RYtXMihUgE5/g2vWbiMgOjFyaYIMft8/EyDgPhkcVREIB
      JlJpYuP9jEz7+fbPHERKiWVZ2LaNYbxYo6SZHEf6GiHQihkfQiySfzaVw+d1EfBqjM8kX7j7
      qwcrPY2Idjv32LQfc+we7P7UussxNfyM3uEpjEyKHUfOMNvXQ8ZUwRvhzMFOPrp4E0WB7kOn
      cKeGeTgaxzKsFSqAlPgjLbz5yU9z5+pHWEqUdDpDXjNx+f2IdArdliRSGSLb/WTbdnC0SeV2
      7wjH93ahaRqKouBylVpRNjNWdgYl2IYS6cIcvlYifzafIeh1EQ35yOiTL9z91YOZi6MFm3G5
      XIi2Q+R7vrAh99vUuZOmzl0MPrxOLjlNUkY5//oRbly4wOCQxfbDZ9gZlVy83Y/IJ3jz/Hmm
      nvascA9g6dy8fpVr165h+prZs3cvqdHHXL3zjEP7d3Jo/26uX7rIjAzTEfYSiYRo3XkQV2aS
      jGFX//5NirMHaEYJtWOXWQIlszoBn5ugz01GN144y0g9FJZAAErTPuxYH9JanxnPtm1M03R+
      X2nRc/VDYqKRfR0RUFUEAk1AzjDRVBVFVcGykYAiBC6Xa4UzgObl1JlXit469cq55y+8Hbz+
      esf8yz37dgJw6PjJFV12I5FSIjMziEAzItRRdhOczOQJeN0EfG70vIltS9SXrSYJIKWNzM0i
      vFEAZy+gupHJMUR0+5pfX1EUNM15hPse3CLYdZjdHQ0IDEjfI5vLkLAUjrc28XBkhJAh8Ecb
      cCXTjMczjI1ObznC6kZazqjnb0L4okgjizSyCNfz+jSJtE444MHv0cgZFraUqBso8pph6mBb
      CHfAee0OIALN2LMDKOugAAvxB6P0D/cSG4Edew9x+uQhHt5/xNGTpwj53WxL9zI0Kzl6YDvC
      auPhg/s0dB/eUoC6KYx6/iYQimMKTY0jGnbOn5JI60QCHvwe1/wM8DIizRwSG+aUXwiB0nzA
      8QjvfGNdZWndvofWIp0LcPJU0/yrju69zK9FFA+HjzmrkC1HWL1YJlJPzK17heMMW7QMis/N
      AD6Pi1zexHpZ9wBGDqREuPzzb6ktB7AmH26gUPWxpQB1IrMzCE94Pv5HhNpKguIS6Rxhvwev
      R8O0bCzrxd3wV0KaWSfhZ8HyT2k5gD314oREbClAncj0JCLQDMxN+aGOkhmgsARShMDncZF+
      WQPicnFwBxHK8x2OEmpHmnlkZmYDBaudLQWoEzs9hQi0zL8WoXbHErRgxCssgQACPtdLGxC3
      0AQ6jyeE8EaQiaGNEapOthSgTgo+gAJK0JkBFk74jhXIC0DQ635pZwCZiSH8xbU5haKhNO3G
      mnq8QVLVx5YC1IlcagaYw5aSZDZPOOAGIOBzk3pJZwC73AwAqC0HX5jcgC0FqJNCKHSBxd7g
      TM7ApSm4NGddHPC6XtqQ6LJLIJjPDXgR2FKAOpBSOjOA//kSCE/I+VdPApDM6AR9bpS5dixB
      n/ulDYleUgEadiKTY0gjswFS1ceWAtTDnBNMWbTuVULt2HOm0GQmT8Dnnm9H9HLPADMoZRRA
      eMMITwg7vvmT5LcUoB5sC5mLO17gBYjg831AIqMT9D6fAZw9wEs4A0i55AyA6kGEO7Fnnq2/
      XHWypQD1IC1kdrbI8iFEYQaYU4C0TtjvRhSWQF73SzkDSNsEI/t8CbgAIcQLsxHeUoA6kHrK
      if9Z4PoHURQVmljgA4DnfoAXxTNaM6ZT9qX4t3iO8oKERKxYAWzLIJGIo+dNkDapZIJ43Hkt
      517reROQ85lRhq5jv4APhOMDaGFxv9HCHqCQC1zwAQD4vS6yusmLd7eVkUbWUWpX+S6NavN+
      7Oknm75c4goVwOLRvXuMjo5x6cJFMqkYF6/1MDExQUY3GHhwi4fPBrh08SI50+D2rYdY+TSX
      r9zkRYyOcXwAzSXvi1A7cq46RCLjhEEU8Hlc6Ib18kWEGjlAFoWBL0T4mxCqa/532aysMBxa
      5eCxExi5FJPjk2QzSfI5nZwhCfg83I9leP38G4w/ucXwdBrT0Llzq4cDJ0+jwvyy4EVZHthz
      cUCL5RXBNuzUGFLaJFI5Qn73/Dk+t4ZumFiWjfoCFwJYjJ1PIlQ3KK6yfz/p8oG/GTvWhwh1
      lPmGzcGK8wESk0Ncv9/PyTOvEA14+Ow73SSnBrnW82i+Nriiqli2TSYZI61p7HE5l7VtG9u2
      sazNPU0WsFIT4G8uldffgkxOYJsm8XSOkM89f47HpaDnTQzTRH2JdlxWehq8USx76blcadqL
      OfEAul5dR8nqY4VJ8SbXex5z9vXXcamC+OQISenFo+toHjchVAYnYoyPxDj4yj5Sje0cPdTJ
      havXefP8WVRVLUpr2+yY2WmUaHepvFoQ4fajGAkSmTwNYd/8OUG/F92wEOLFuc9akHoCxd9Y
      8Z5k2yHMoaub+r5XPCbt2NbOs97H9Pb1429og8wMs6aXM4d3ceDEGcz4ODuPnCLkdrFnXzfu
      QCOnD+8mb70Yy54Cjhd4suweAJ7HBC22AnlcKraUGJs0J+DZaIx7fZN1f25JH8AClJaD2Ju8
      XOLKVFNo7D5wqOitbTv3Pn+huti97+D8y0jEsRmHGoodSS8EUs5FP5aXXQl1kJsZwrRt/J7n
      ZUGEEPjnvMHRoLfsZzeSL330iOl4ln/642/V9bmaFCDchdQToCfAG1m+kGvIS7QqXWNkIRWy
      sexhEWonPj5AyOeZd4IVCHo3ezyQrHuUrkUBcAcQ/ibs2YEVyLa2bClArcyHQVRSgD6CC+KA
      CmzmkOisbpLLW9S7SpHZmaoKIFQXSsNO7KnN20FySwFqRJo60sghlpjKlVAH8fHBokjQAps5
      IC6eypHK6hWtOeVwloNVZgCc3ABrE4dEbClAjcjMNMLfUJT/uhARbCORNQj53SXHNnNIdDyt
      k8zksepw1ElpI/X4fEGsSigtB7A3cUjElgLUyOJUyMUooXaSMkA4ULoH2KwzgBO6kSOVzddX
      ucLMgW0j3OXjgBaiNO3Fnu1HVmgouJFsKUCNyEWZYIsRgRaSMkgkUGrpCWzSGSCXdzpYet1a
      XWXcpZF1nJxa+TCIhQhPGOGNYMfXPkk+k5ghnnbuY2Z8iDt37vC4b3ju9TBP+oaxpRPJ+uzJ
      QyZiyS0FqJWSTLBFCNVFytdd5AMoEPC6N2WfgEIN04aQj3hKr/2DRg4JS8YBFaGtT25AOjbO
      ndu3GJqcBaC3b4hde/eyo7OVzMwwDwZn8dtx7vYO8/DmVUSohf6717cUoFYWl0MpR8rfTcRX
      6loJ+lybcgZIZnT8XheNYR+zqVzNn5NGBoECWnW/hpMbcGBNcgMKPSaklAQa2jh6YPdcuImN
      pae5d/s2g2PTTE9N0rVzJx3bu0lOTzGjW3S3NbJne/OWAtSKTE+iBCsrQFJECInSHlmBuaSY
      zeYRdWYAFw0h73xXy1qQuTjCE1rSILAYpXn/mmyEhRAoSrlHWOG1j38rZ8+cIdb/GB0F6ax9
      QBGIuSA1y7a3iuPWglMSfXpJL3CBRMYgmOkHjhe97/c6NUKlLEkl2FASGZ2Q30ND0Eu8nhmg
      FifYApTGXdiz/csRsSoFg0Nqdoq+vkHGcx6a/Sqjo8N43C5yqo+uzi6u3rxNzCto79qPKznI
      tVt3ycUTWwpQE3ZlL3CBeFonmC79Q/s8GrphYdk2So2j5noQT+WIBDxEgl5iyWzNn6vFCbYQ
      EWhFZmJL9lReDTy+ANv2HmXb3P8fDAfIZPPs2hvEpSq8evYEeROCAT90RGlIpdA8+7cUoCZs
      E6knKzp+LNsmndXxp58hpSwyhfrcLvKGhWVLNlOzpHhaJxr0Egl46RudrflzMlPfDCA0L7gD
      juIE25YjalVcHh9Rz8JNuYuI+/kexeP189w8oRAMhef+b4vq2CboyYp/9FQ2j0+1UFJjzlpz
      AT6PRn4TZoXNpnKEAx4iQQ/xdK7mPYrM1acAqC6EN4xMTy1T0rVjSwFqQObioHkRWqmJs0Ai
      7aynZXqijAK4nKywOsMN1pp4WicS8BLye8jkjJq9wbWGQcyjaAhfAzJdf9j1WrNiBTDzOUZH
      RkhlHCtCKj7DxPQsUoK0LSbHx0hmdECSzTgbrWwq9UI1jXjuBFt6B5tI64TDYadTulVsUXFp
      CkII8ubmynyLp3NEgx5CPjcZvXYFrXcT/LyM/OZror3ipPjex08wbZubVy4Rmx7l1v0+poee
      8Hhoit67N5hIZum5epmMkef+vScY2QTXb2/e4Khy2Eskwy8kkdEJBbwowRbs1ETRsfmcgE3m
      C4innBkg6HOT1Q2sWpKUKhXEqoAIdSBX0EXeHLqG0fu1ZX9+KVacFH/gyFFyqRn6FBdTE+Ps
      2HeQbSGTC7cGwNB5/dguJkSS4ek0uUyCmzduc+TUqyg4OcFSSux1XhrIxDD2dC/qro/XdL6d
      mkD4myvKGZ9LhheyHTs+gojuLDoe8LpIZvR1v9elkFI6Vex8LnwelbxpoRsmXndlK5W0DKck
      iitY370E27D6Hi/7/s1nXweXH3XXW8v6/FKs2Ao0PfKUe33TnHrlLNP9d4vt3IUXQgASaVnk
      kSwukrPeDiLjydcw7/w+vu43QFSfBOUS1SAWUmiKoQinSpyy6NyA18kJ2CzOsEzOQFMEbpeK
      IgRBr3uutVNpNOtCpJFx/p6at657UUIdmHO1k5aDHR9C3f3JVf/9VpgUb3Cj5zHHzpxBz6Zp
      bmnlVu8Tsn6L5vZtKLEsj/qGiI3EOXZuP8lQA8eO7ODCtWucP38OTXHWxqq6vrZxM59wYnuy
      0yih9qrnG5lplPZjFeVMZvI0RXwoagekx0vODfrdZHVz3e91KdK5LAGfG5emoqoqkaCXZMao
      Kp9t6QihoHr8iDruRUQ6kakxVEVZljdQJkbQottX/fdb4QygcOTIITKpJIrmJtLVxdE9LlKG
      oKO1GboaGRsdof3kGQIuFwcO7cbl8/PKycNspEXQTo5BPo099biqAkgpsdNTaNX2AGmdXR0N
      CHcH1uitkuPBTRYSncjoBBYU8S2YQqshjSwgaooDWojwRsAynDiiQl/hGpHSRiZHEeHOuj5X
      C1UV4OndG/jbtnH5vXfZe/YtDu9sfX5QqHRs31F0frixhfDC413Pm7cGAk78uC8YZiORiVGU
      9qNYI9fRdr1Z5eS5VMgqXuD5xnieNszUeIkzbLOFRCfn1v8KFtI0iAS8zNYSEZpPgeYGtfJS
      qQTVjfBGnZm3XgXIxhxfgjtY3zVroOoC+A//6E+4e+HLjCXz/N4f/3+rLsB6I20TmZ3Gtf8d
      rJEb1deUVnUnGDzfA4hgm+PwkcUmz80WEl2QN3/jP6B/45eJ1joDzHmBFyf9VEXREL4I9jJ8
      ATI57gxAaxBGUVUBThzo4ovv3ufs0R10tK6NG3td0VMgJWrXGezUpNPqsxK2icynqipAIjO3
      CQ62IjNTsKgobGCThUQXnGAyPoQ9+ZBIwF1TQFy9cUAFhKIiAi3LqhVqp8YcM7Sy+pE7VRXg
      re/4fr7r7TfR/M18y+snVl2A9UbmU4BEadiJ8ISwqiRqSCPjPMyepadfKeX8EghvBGmZJe2B
      NlufgEIgnExPYc8OEvGImkKil+MDKCCW6QyT8WGUcFf9s04NVFWA3/31XyFr6PQPDfGfv/SV
      VRdgvZGZGGg+hDuA2n4ca/RG5fPTU06l4wrm0mzeRAjwuLQ5r2dbUedImJsBNlFOQDytEwl6
      nRav6UlCapZERq8q30oUQFmmM8yOD6FEupZ1zWpUVYCA10M8keTOzetEoi9gRbdF2KlRx/Ij
      BGrXKazhG1QqilMtFxhKm2KIBR1jCvg8LvS8tWn6IsTTczNAcgylaQ/+dD9Z3cSskhy/VGvU
      WnDCIcaqn7j4molhRHjbsq5ZjaUVQEpM0+R7f/xvsbe7m/Nvfoqf+sF31kSI9UQmRufLdatt
      R7BnepHm0mvfmsIg0jphv2fevK0E25GLpnqfWyNvWnWVH1lL4imdsJYHoaB2ncaf7iOnm5hV
      wiFWtAQKd5T8LrUg13AGWHpXkZ3i1//tfyJvPh8Rxmaz/MBnq5gNNzl2cmze9i+CbQjNiz07
      gNpyoOz5MlO5HAqUmwFKRzqfZy4nwLJB23hnWDydI0wC4WtAaT2M/8kHZPPdVQPiZDaGUsUk
      vBQi2IZMTSClXXFJWXQ928ROTaKsUY+BpaXwt/DTf/vv8N2ffo1cOk0mkyZnmGsixHpiz/Yj
      GroBEJoHtes01sCFJc+XieoOmJlkloaQl0K0qBLdgYwPFq2n/V7XXFbYxs8ApmWTyuYJ2zOI
      YAtqx3HcyX4U2yBdoYSjtE2oUB6yGsLlB08QuShYsBIyMeKEXtdSgWIZVFXD3//jL3Pi9fP8
      lc99hmQNduLNjJS24wQLP59O1e3nMAcuLfUB7NQ4Itha/vgcs6kc0aD3+RIo3IGdHC/KC/B5
      NAzTqrrGXg8SaR2fx4WSHkMJdaI07ILsDFGPTaySKTQ/Z9laojFeVVQXwt9UYiCohJ0Ycfqy
      rVEqZVUFOLZ/L20NQb7wh19CN9Yhnl3KipvSFZFPg20iPM890WrbYexYHzKfLiOKhcwlUHxV
      kuEXNcYTgRZkZqbIF6AIBY9bI5PbeF9AYq6bvUiPIcLtThHb6A7CMlbRF+AUxFIQrmWWeRcK
      ir+pJFy8EnZiGBHqmK/ksNpU9CxYlslnvu9HENKgsaGN7d07Kp2+KuRv/Eew8rhf+YlV/26p
      J0EIxAKbvgi0INwB7FgfatuR4g9YBuRTCN/SNTALnSF3dT7fGIpACzI3C7YBOCEDQmyeEonJ
      OQUgNY7S9DrglC4JPRqsGA7hRIIqUCEzrhJCFFrK1r4RlvFhlMi2NSunUXEG+N1f+QWezGT4
      7V/5ef7si7/Pv/3Dd9dEiCKB2o5g3PvTNZkFZC7ueBMXxKII1YXSeghr7HbpB2wTmU9XVACY
      iwPyL9gEqy6EL1qSA7tZiuQ66ZtuSI3NW8SUlv2ElWzlcIh8ChQXqMtTAKDuzLC19AFAFQWY
      yRh40n3cj4X4yR/+bgYG1ra8HYDafgxpGWvSZFmmxh3LT5EFQqB1nsIavl56vpFxEuLLdENf
      SCEMYiGF3sEL2SzxQIUwiIUWMaVpL2GRqugNltlZhC+6Io+sYwqtZw8wjAhvkAJ8z3d9hv/w
      H/6UH/7Rv8LM1BTnTp9aM0GeS6Sh7fkk5uO/WPWvthOjZc1pSscJrPG7SKt4dJbpaYS/sarJ
      bj4MYgEi2F7eG7wJGmXEUzkiPsWpdTRn4lWi3UTcZuU9wDLjgBZSbmBY+oLy+RJojai4B9h5
      7A1+7tgbc6/a6TpUes5w30Pu3O/nY5/+DD5zlr94/yrNjVG27T6ASAzzaCSGlCqvv36S+z29
      HD22hyuXbnDqtVdxl+mbK4TAtf8dsn/+s7jP/3TN9uJasJOjiDLx/0qoA6FoTtZR467592vx
      AgNOJlXJDFDqC3BKJG78Eiie1un0pJwY/bkAM+FvIhL0zZdHKTfKr8QJVmA+N7iGMnlST4C0
      l2xKshqsOLyutWs3O+NOPcxMchbNHaC1YxutDUEuPZjm/OvnGXt0k+GZLKZp8vReD537D5d9
      +AsobYcBsCful25MV4BMjqGWi/93+ZzyfeN3ixTATk9WrAgNhRLjAq+7+KcUoXbsiXtF7wU3
      ywyQ1jngmat0V1AAIQi3bCczqmPZEk1dIwXwhEAIp9CYt3JeiJ2sPQo0m5zh1vWrhHee5nB3
      E/duXiaRtXGFmjmxr51Ll24gBew+fApXepQHQ9PYtrJyBXC5nttn/Y3bePVUA8npYa7fy2AD
      qhB43G6S+Tyx8UHGXT6+9XBwvrKvbdsYRumoqO7+FvQHX8bVuH+lIs5jJUZQ/K1lr0f7CYyh
      a7D37efnJyfA31T+/Dmm42nCATemWewklP4WrMRY0We9bpXpeKbi960Hs8kswWgM/E2OX2LO
      NxFo3kbuaZacnsfjKvVWW+lplNYjK5PfluBrwIiPItTKzi1rdhj8zZi2nLOoLY3bF+LIof0M
      52wwUsR0H+dfP8b1jy4wPKTTtu8Euxrg8t1+hB7n9dfPM/Xk5uqWRsylEtian4ZohMFEipAm
      mEnrjE7N0nV0N5m2Hezf1cDVm/d4/cwRNE1DUZQiJSqgHPo2sn/2d9E+/ndXZRkkLYN8bhZX
      uA2l3PW2nSH34M/QNHX+elZ2BqWhu6x8BTK6RSTgRdO0omWDFWnHzM2gKQKhOj9zOODj8VCs
      4vetB4mMToQ4arijSJZIezc5fRBE+b+JocdRg00rkl9KFcPfhJKbRnOVDz+ZPzc9BpEuXK7y
      2We2bWOaTp61qrlQC6sK0wCXC4HApUBaNwhGXKiaxJ6LZtCEwOPxrLQukM2Tez3MpHXu3e7B
      Vt2M9T3i8UiCE4f3cuj4cYYe3yXYsY8Gn5uubW0EmzrZ0xYkZ1T2iCrNBxCKC7uceXIZFHwA
      uMtbdJSGbqSZK0rYqGUPEE+XWoBgbhOcmiwauYK+zeEHiKd0wvZsiUEg2NiBYVgYSxTwqrcm
      aDmEEIhgKzJZPTHGMYEuvQFWFKVk4AHAG4T0LPm8TtJS6GxuYGpiksTMFP5IlLBLMJ3WGZ2I
      rTwpfu/h4yxojc3BIwtLgwc5fvL0/Ku2dudhatvWXf2rhYK279MYj/4bSvvxlSdD6AnHi+lZ
      Ih/VE3JCGCYfOXHr0nasHoFqXuAcYX8ZBfA1gKI6ZdXn/oh+j4usbmJLWdJJcr3IGxZ5y8Zn
      TiNCrxQd06Jd+F3OPTWEipcnUkpkbnbFCgC1V4mT8WFEx/Gq5wHEJoZ48mwUUwqGvAc4dngX
      t2/fZf+RY0QiPpoSD3k6DkcOHUCxWrh3/y6B1j2btzq0EALtwDtk/+Rv4nnz74FYWQSlnZkG
      d3BJJ44QCmrHSayRG2i7P+FUMMinq3ZCTKR1wsHSxnhCCKdH7syz+VFsYUSosl1VBlwAACAA
      SURBVEERoYmMTsjnQqTGSipiCJePaMDN7PQk3e2LHnQz51hklhsHtPA6oQ6ssZ6q59mJYZQa
      8wAaWrfxSmvxuWeant9f995DzA+7WmB+YN7UxXGVpr0Id6BsmZF6kXNOn0ozidp12nGISQlW
      3inhUcULHF/kBV6I0rgLO/bceeh1aximvaERoYm0TtDngdR4WZNwtKmVeKK0y43MZxBCrbsc
      SjmUGvICpLSxEyNrUgqlSJY1/fYVIhBo+z6D+ejPV5xKaC9IhFkKpXk/dmocqcedtp5GtqoN
      enEgXNH3Newqag7ndWsYlrWhVaITaZ2g2wZLR3hLlzORcJDYVBlPrZEBRalYIbtWyuVLLEZm
      ZhCap+4SKvWyqRUAIdD2v4355L87IQkrwJkBKiuA8EURgWasqSfI7Cy4A4gK9W8K9TXLbYIB
      Zwk024+cC4suhETXVIR2jUhkdEJ2HCXQBGW61USCXmYnR5CLlFQaaWcZugoKoARbkekpJ79g
      CWRy1AlDX4NKEEWyrOm3rwJq426EN4o1Ujl5vRqOF7iKAigaattRrNFbc42xa/ACZ0rDIAoo
      kW1O8sdck2iPS8O0JMYG5gTMpnKEiKP4yytANOhlNhZzRvwFyFwC3MGaG+NVRPUgPCFkZnrJ
      U+zEKEqwrabarSth0ysAQqAdeHtFyyApJTI5ihKuXge0sA+oxQQqKU2HXIgIdzgRqHOJJIoi
      8Hk0MhtoCo2ndcIi5YSBl4mxjwQ8xFNZJ59hATI7g+JroFKPhJpRVCcxpkJegEwMIdaoFEqR
      KGv67auEa99nMHvfc+Lzl4ORRZp6VYsOONGo9tRj7Phw1WR4pFMUt5wZFECobickIj44/17Q
      t7HxQPFUjrCcdTbAZR6uSMBL0vZhTj8per/urjCVEAoi0OxkzS2BHR9e0zDoAi+EAigN3c7a
      fPjqsj4v9YRTmayG2pLC34TwhrEGL1dVANOyyeqGk1yyBIs3wgGve0PjgeJpnZC5dJJ5wOdG
      F37yk4sUYBXigAo4tZNKK2csxE6sbRRogRdCAUDgOvAOxjKXQc8TYarbsIXmQWnejzVyveoe
      oJBZpVQK7GvchbXAFBrwuUhtYFJMPJ0jrGTKmkDB8VbnFR/5yd6i33o1FQCqW4Ls+NCa5gEU
      eEEUALS9n8Z69j6YtXc0LyBTE87IXqNFQe067eQOV4kELSSWVEJp2IWceTb/MAU2uERiPKUT
      VjJLloUPeN3klQD52GDRknO1FUCpkBopbROZmlizUihFcqz5FVYJJbodEerEGrpc92ft5ChK
      uPYfU+08CUKt0QdQ2SyoRLc7bv85k99GJsU4+cs5QsbEkjOAz6MhNS+5+ORcHdW5z2ZjVUvE
      14NTOWMJBUhNOL/9Kphcq8qx5ldYRVwH3sF4WP8ySNZgAl2IEupA7ThRtf5NvIIPoIAIdyHT
      0/MzV3ADk2J0w8K2bHyq5cTll0EIQdjvISFDyPiQ8+YyG+NVYj45vszf0nFatpU10642L5QC
      aHs/hdX/IZjZuj5n1+AEW4hwB/D/wO+iVHHDl0uFXIzijYDqmu+RG/A5vcI2gkRaJ+QyUIIt
      Fe3r0aCXhNaKNfUIcNrdOnFRq9fYRPgakEaubFlKmRhGCa5dKZSFvFAKoIQ7URq6Mfsv1vU5
      px5odR9AvZRLhSxBiKKYIKc0ysbMAPF0jqA9ixpsqRhcGAl6SLrbsecUACPtGBFWc0kiVKfx
      YJl+AY4FqGvNSqEsZBUyTaTjaJKFlxJ77rWUEjnXChXk/NJFSrlsp5a2/526nGLStpzUxuDq
      N/eI1zADAPNRoVAojbIxZdITaZ2gHUcJtVV0MEUCXpLeHdhTj52/VT7jmJFXUA6lBEVBCbSU
      9QXY8eH5EPK1ZsUK0P/kHl/+r18mY4GRnuHr773Ph+9/naGpBCNP7vDBpcu89/5H5G2DG9fu
      Yps6H33jI8xl/v213W9hDV2p3Ro0XwyrcmmTeik0xag6AwBK4+55BfB7XGTz5poVv6tEPK0T
      UvWqjQEjQQ9JrcUJVTDSThzQKs8A84kxqVJTqEysbS2ghaxYAXbsPcye7c7oOjY0yO5jZ3nj
      3EmGBgbpn0zwxmvnONgZYGgqA0ge3b7JnuOncVWwnVdChDoQ3gj2VG11g2QujlA0RA0+gHpJ
      ZvQlvcALURq6seMDSNvG69EwTQtzAyJC42mdsJJGBCsrQDTgJSGiToZcdhapp5ymePU2xqvI
      XGJMmYYZdrz2PICVsuJQu4VTqWlbuFUFRVWRpgUCFCHQNA3DNImNDzLp8rLzmLdqUnwllG2v
      kO+7gNZ8uOq5dmoKqXkx0WAVk9HtuRnA79Gqyi/9bdjpKcxcCk3B6cqu5xFyffORYokMYZFE
      +lsqyhz0acTSJiLSTX7ikVPk1xspSfxfKTLQij1xv1gWK4/MzmJ5G7HWoXjAqv4FmpsaeTg8
      iidiEmpqQsRSTCQyDI/F2HVqL+m2HRze18rlqzd587VTFZPiK7LjNYxb/xlN+2tVE+aNzCRq
      qH3JxOrlYtk2qaxBY9hfVX4Z7SKfT6PaOkF/CNOSCKGue3J8Mptnl0ijRbtQK1y7IeQnoxuI
      5n2IWK8TuOZvXHV5RXQb+WfvFX2vnRpGBFvQ3N6iyNPBiQRZ3WD/9tXtUrQqSfFx3eLe7R60
      6Da6QjbjGY3Dezo5dPIMU/2PaN1zlIjXRffOLryRFo7ubq+aFF8JtfOUY6HIZ6qeW68PoFZs
      W5LK6oRq2AMI1YUId2HP9uN1a5iWvTFLoJROWM1W3QMEvG7ypoXdsBd76tGqO8EKiFBp9Tw7
      MTLXwqr40fz99+7yaHDp8OnlsipJ8Qvxde9l/nFzeTh87OT8saZmx5HS2LqyB1LxNTh5pRN3
      0bafq3iu4wVe/Q1VRjdwaSoutbYxRGnciR17hqfrDLaUS1ZeWEviaZ2IT6vabCLgm8tdjuxC
      3PnPThhJlbCQ5aDM9VJb2DHGjg8jwp1FHoB0Nk9P7zg/8pnaEuTrkmHVv3E9EAJtxzmspRpb
      LMBOjiHqCIOolYIFqNZ49UJUqBACv2d1fAHW2G1yf/FzNZ8fT+eIhINU+7P7vW5HAfztSD2J
      HetfVS/wPJoP4fI5neDnkIkhZwO84He9/niM7vYoTeHVN2S8mAoAqNtexRq+hrQrj6QyWb4g
      7kqpJRBuIY4zrA8p5bwvYKWY/RcwHn/FydaqgpSSeEp3FKCK0ro1BU1VyAq/00Nt8sHaKIBQ
      EIHiGkHl8gA+6OnnjaPbK0bdLpcXVwHaj2HH+px6P0sgTd2pQelf/fautfoACiiR7Y7X08qv
      Ski0lNIpLWLlscbvVD0/q5sIK4cv3FR11hJCEAl6iafzKM37nOy41UqGKbqQggi2FPkC7ESx
      EyyeyvFgYJpXD21Qn+DNivCGnVj70aXryzg+ANeq1LJZTDxdmw+ggBLqcBLtzdzqhEQbGexY
      H9qeb8EarB4h6+QBpKtugAtEg15mUzmUue6ZSg3ZdPVSSIx5nhcgnZaoC/ZsVx6McGB7U12D
      TT28sAoAoG5/DXNw6X2AzM2C5q4pEaYWpJSksnmeDM1w8/EYkWAdfxRPCFw+7NS4Ew+0wiWQ
      nRgGJK6j34M5cLFqR514Wickls4DWIyTG5xDbd7nFBNbg0EE5hJj5pxhUk8jzXxRFO43egb4
      2PEdVSvpGXqa/mfPeNY/iGHaGLk0A4NDc21+JfGZCUYnpln8K23aynC1oG47i/6NX0Za5nwB
      2oXI9BTCG0Eo9duvpZRkdZOJWJpnY7M8GZrmyfAMsykdn0djR2uEN45ur/n7hBCoczFBQV/H
      ijfB1sgN1I4TqG1HkJkp7PSUE+W5BIm0TqhCIsxinCWQjgi0OiEQytqMlUqoA3OuG5CdGHEK
      F8xZhKbiGfrHZzm9v/oebrSvl6y7ieagHwWTS5ev071nB1eu93BidxN3+2Zp8uikdMm+7c8t
      Wi+2ArQdRiZHnRqeZVqZzvsA6owqzBsWv/IHl+gdmcGlqWxrCbO3q5EfPryNruYQkaAXrUbz
      50IKG+GAdwfTyfpCuouQEmv4Buq2s+AJojTuxhq7hbL3U0t+JJ7O1T0DjEwnUZpP4f/+31mT
      fRQ4lTMKiTEyMYwIdVKoPHHp3hDHdrcS8JYfwKSU2LaNEAJdzzAV07GNZsJuEyXSTldXN6N9
      wwxPGOzce5x2b46L94ZeHgUQLj9KyyGskRso+98uOV5vHkCBR0PT9I/P8k9/7C0aQj7cZWrl
      LwelYRfm4GUCzZ9iYKK65WYppKVjTz3GffbHnJqm217FGriEq5ICzDnBRKByz+MC0aCX+/1T
      CEV1lkFrhJMa6ewBCmHQQgiklLzfM8Dn3jxUk6l53/HX2Csl/feuMzC5IJcZZ/aVAFKWZBi8
      0HsAAG37nD9gycyi+vIApJS8d6OPt07upK0xuGoPP4Bo6MaODxLwqCvaA8j0FDKfRGnYCYC2
      4zWswUsVQ6zjaaeZd60NpyMBz3y7pLVE+JuRuVmklXfKoc9tgMdmUkzG0hzfs3QYuxACRVEQ
      QtDf+5DB4RGmElkizW2QHKev7wmWN0xXWyf9j+7z4NFj2tqLk5xeeAVQt53BGutBlukgshwf
      QCqb5/bTCc7Xsb6vFSXUiczOEtAs0rnl5wRYoz2oLQfn63QqjbuRZv55CuMipJTMpnQi4VDN
      y8Ggz01ON9e+kK+iOkqQmijKA/jozhCn93fgddc2AG3r3oVbFew7doaWcICzr5zB4wlx5uRh
      Ao0dHNu/nZZt+4r6OcNLoABK835kNlZSZUxKiZ0aq3sGuPF4jPbGAB1N1WsI1YsItoCZw0eW
      nGFhL1cBRm6gdi7o2OnyobYexBopbfVaIJGeU4Aa0wwL8UBrHrIhFJRgG3ZydM4L3IWUkm/0
      9PPm8R01e9pVzU17RyeRoBPmoXl8dHS0zYWqCELRJlqaoi/fEkhoHtT241hDi4pm5VNg19dh
      0LYl793s461Tu9akJJ9QNJRwF+7MMKZpL6tIrrRMrPE7KB0nnn+vEKg7zmFWCA2Jp3NEI6Ga
      78vvdWGY9pwZcW0RoTZkYtSxAkW6GJiIk87mObSzem3WlfLCKwDg/PEHLy8q5DTrlNeuEvi1
      kInZNIMTCc7UYHZbLkrjLlypQScidBlFcmUuhsxMozbtLXpf3X4Oa+jqkqEh8ZROJFJ7Uruj
      ABaGsbYzgOMM68CavO/kKXtCfHh7kFcPddUcaLgSXg4F6DyNPXG3KE1SZmNOM4c6Gjp8dGeQ
      Y7ta18zrCI4CuFegAPbEA5RwZ0mFBiXchXB5sKd7Sz4jgUQmRyRcuwJoqoLf6yKZrZ56upIc
      b3DCoq2hqyiRLqSED3oGePNE95oXxoVVVgBp5em5cY2rV68yNpPE1DPcuXWD/pEpJBaTE9Mg
      JePDQ+RXcXOlNO1GGjnsxMj8e3ZqwqmAXGNtGcO0+OjOIJ84WUP/shWgNOzCnR7CtJaXFums
      /0+XHlDdKO3Hy9ZPzWQNNDuHJ1xfSHMk4CWeqqwAUkq+8O49vvjhI6xlln1XQh3Ykw9Rwl30
      jsSQEvZ1rX7+Qdlrr+aXGakZLF8zZ8+epb0xxN2b12nfc4jYwH1i2TyDA6OkY6P0TaYqNsqu
      F6FoTlnzBVXjZJ3V4J6NzpLVTQ51r+26U4S7cOVjYOnk61xeSGljjd4s3gAXvleI5ybhRcTT
      OcIiXbdFLBr0MJsurduzkJlElq9c7eUrV3v59S9eJaPX7+EW4Q6n/1i4i2/0DPD60W1rEvlZ
      jlV1hFkIMlPDXLwwys6Dx0hbguagF9oamYyliY0P8OHsFG998hMrygkuh+g8i9n/AeLw9wBg
      xocRSzXFLsO7N57x2uFOBDbGCrLVquJrQuYS+BWDRCpLU6iO5VYujp0Yw27YXfa+ZPspzG/8
      MkYuU2Tvn46nCGs6ljtSV55tyO8mlqjc2Ptr159xaEcTP/bZk/zGF6/xL37nfX76c2dpidQe
      OyS9zqBjBdr58OIg/+iHzq96/vFSrKoCeMOtnH+jDZmPc+HWU1QhsKQkb+RxBzUa2rYT0DKM
      zaTY0RJafk5wGdTtZ8hc/200mUe4A5jpcbTOEzV9dzqX59aTcf7hD72x9nm6rih5T5CAopMz
      7LquZ00OIdx+XJHOsutjGWnHCLSizDxy6pvOkcqZREIBNHftCTzg5AYns8aSMmZ1g/d7Bvib
      f+kVGsMB/sEPfow/eO8e/+x3vsHf+tw5Du9srul6Uo2iA4+nJAGviz1dTes2A6zqEig5NcLl
      K1e4dLWHtq5OdrY38OGFizyZMNjW5EdRFPYfO83wgxtkVnmUFdEdANizA86/idqdYHeeThAO
      eNjeVrvJdPkIlIZd+M2ZukskFuz/Sz1UQtVQu05hDl0pej+ezhOJ1H9vkaATEboU1x+NEvK5
      2bfdWa9rqsIPfMsR/se3T/B/fOECX7n6tDZfh1BQt5/jw2G3E/m5Tg8/rPIMEG7p4lzLwsSF
      Jtp3PX918vQRAF5/8+OreVnA6fOrbXsFa/CSk8SRKR8gtxgpJe/e6OOTp3auW/NqpXEXfmO0
      rpwAKSXm8HVcBz9b4SyBuv01jJv/CV79yfl348kM0VD93RajAS+z6fKbYMu2+fKlJ3zba3tR
      F0SKCiE4f3Q7nU0hfvm/XKBvbJYffedkxZASIQTu7/5NLv7Cn/JLf2lH3XKuhJfCDFpg3h+Q
      nQW1tkSY6USW3pEYrxxcn0pkMKcAik66nqwwI4Oc7UdtPVTxNLXrNNbkQ2Q+Pf9ePJEkEvTW
      bVYMBzwk0npZE2fvcIxYMsfZA+ULCO/siPK//+S3MD6T4p//7vvMJLPYdqFsZqnZ9NaTMdoa
      ArQ3rr4HvhIvdDToYtT24+gf/AoyPohweatWPwC4dG+Y/dsaaQzX7jBbKUq0G7+Sr2sGsBMj
      jqWkSs1M4QmhNu7CGr2F1n3eyQXO2uxvr9+sWKgOYZh20QgupeTLlx7z1qmd+DxL72HCAQ8/
      +1fe5Pe+cpu/9q++RNDnJuz3EA44/0UCXiJz/3/p3jBvHl8f2/9CXioFUEIdCLcfc/Aywh2q
      WsrPsmzev9XP971VvcLcaiJCbQQ9CtN1zADW6E2UtqNVu9wIRUXddhZr8DJa93kA4qkM0Ro6
      ZC4m4HFjWhZ50ypSgMnZDHeeTfLDn65epkRTFX7k7RP85W89SiKtE0/n5v51/kukczwdiRHw
      utbcB1NWvnW/YhVyeZOB8TjJTJ5kRieR0Umkn/+bzOi4XRo/84PnS0cfIVC3n8O4+ydOg4sq
      o8nARJxERufIrrWPOVmI8DcT8LoYqGMGsIZvOK2bakDd/hr6B/+agoE1MRsj7Kt/tVuIB1oc
      EPfujWcc39NGU42zphDgdqk0R/00R0uXpc5qSK776A+bcA9w6d4wv/7Fq/zpBw+4/GCYkakk
      iiLY0Rrh/NHtfO9bR1CE4Pe+ervs2lTb/ioyPliTBej9WwO8crCz4jS+FghFJdjQWnNOgDR1
      7MkHqO21FYZS249hx4eQmdhcWySdaB1xQAW8Hg0pnUGpQCZn8PWb/bzz6t5Ve2CFYEMeftiE
      M8DHT+zgY8e3z1lkRNnw9V0dUX7m//4Kp/Z1lOSLKm1HnI7mocr9ALK6wZUHw/yd731tFaWv
      nWBTB+l+Aymrj3wyPYk0sigNNVpIXF7UtsOYw9cQO86TMl1EovXvARQhCPndJNI6HU1Oefkr
      D4ZpjvjZ3bn6VSI2gk03AwghUOeyfJZ6LqJBLz/1XWf5jS9eI7Yot1b4m1EadlY1gT7on8Lr
      1tjVsTF/SH9TF/l8vqaEE2v8LkrT7pojW8WcXd0avERyZgKvCzRteZltheR4cPZMjulzX5Hp
      80Xmhb2LU/vaefVQF7/5Z9exFgSVCSHwf99vo+36xJKflVLy7s0+Pn6iG3UdQm7L4W/swszr
      NUWEWsPX0TpPU2syCzBXOvIis4kUkWDtEbGLiQY9zM45wx4OTpPRDU7tW/12UxvFC6sAQgh+
      6FNHGZtO8bVrz4r2A8LlqxgFOpvK8XBgmnOH16cJQzm8gTBmPotpVN4HSNvCGutBWRDaUAtK
      835kPsXs6DOidYRBL6YQEVowfX7y1C687k23cl42L6wCAPg8Lv7Gd7/Cf3n3LkOTtVVZiCWz
      /NofX2HftkZay1gk1gtvIIRpUzXoS2amkbk4auPu+i6guFA7TjJ9/90VzQDOEijH2EyKR4PT
      fOLE+psq15IXWgEA9nQ28B2v7+fX//QaurH0wySlpKd3nP/tt96lrSHA3/hLr2yY5QHA6/Nj
      KV7yY/crVnWzp5+gBFqgztKEhTTJ+MwMEf/yrVyFCnFfu/6MU/s6aAgtX5k2I2uqAJMDj/jg
      owt848JVTNvgds8DpGVw5eLlVUuIEULwHef343ap/PH7D8qaRvOGxRfevcuv/fEVfuhbj/IT
      334a/xLFltYLTVXQXC7iX/0F9Iv/pih0YSHW8PWyAXCmZfPejT5+9Q8v8XBgCrvM76ltP0dC
      BoiElj/TRYNehqeSfNAzyNuv7NnQQaMSI733+PDCRT66fJN6Uq3XVAF6hyZ57fXX2NWgMBzL
      YOQN+h7cpnX3gVVNiNFUhZ/6zjN87foz7vVNFh0bm0nx8//xG9zrm+Kf/NgnOH90faMNl0II
      QcDrxvr4P8aefEjmD34Cc/haiQI7CTDPHWBSSp6OxPgXv/s+f3bhEZGAh//rjy7zT377PS7d
      GypKshHR7SQDu+sq476YkN/Ds7FZOpqC7Ghfj2jZ5dE/HuO1187R4jOYTtXuYFzT3YwFaELg
      9XqYyuWJjQ8y7vLxqYOr13G8QFtjkB/5zHH+ny9d55//xCcJ+t1cujfE7/z5LT5xspvPvXkI
      zybbvEWCXv70dprvfP1n6U5dJPcXP4e2+5N4zv2159UsLAOlxanMFk/n+KP3H3Dh7iDf/tp+
      3n51Dx6Xxve9dYRL94f4w6/f5//973d459W9vHFsB0Gfi3TLKzX1Ml4Kn0dDVQTvnNu7qU2f
      NqAKgUdzkTMMoLaecGv6RAQ0mM3kGZ+K03Z4N5m2HezrjnCt5yHnTh2sw6hXG28c28HNJ+P8
      9pdvEPC6ufl4jJ/6zrOc2Fu5MfRGUZi1fv1LN1EVP+d3/X3ODP0RLQM/jvfN/wW16wzC34Tl
      beb9G338/nv32LetkX/+E5+kreF51KTf6+KTp3bxsWM7uPtski9deMSffPCAN4/vYCKWqa+K
      9SKawj6+9xOHOVGhQttmwCMkKd1gOpFhz+7aZzwh17D2XT6b4N79xwSbO9mzo5WxkWk6OlsY
      6X9GQ+dOfC6FmZkZGhtXLwE6kdb5x//uXTqaQvzV7zi1Jm11Vhs9b/JwcJr3bvRx79k4bfkn
      fMx9nRP7upjK+/gv6bfI5Ax+5DPHObqrteoSzrYlfWOzfPniY648HOHnf/Jb6Wxe3Ubhm4GF
      z04uFeP+o6dE23aws6ul5sF1TRWgFlZbAcBpYO3zuJZVwXkjKcTtXH80yns3+hgb6kO4A3z7
      x0/wmVf21G1/l1KSzOYJ+dybcgZcKavx7MwrQD6fJ5VKrYpg9ZBKpQgGKydBVIuXqSWephqr
      cY3VlFNKyfBUEo9LpSVaezbXZvktVnqNWqjl2anGCzEDmKaJpi09+lU7bs+FSigVNnErvcZ6
      yGnbNlJKVHVpL3ctMqiqWvHhW437WA85V2MG2FxmkSWo9EPWcryWkWal11iN76ileV21c1b7
      PqSUIETRmrqW+1gPOVcD9fOf//zn1+VKS5DNZvH5nChHy0jxbGCa1GQ/Pfce0dC+DY9W/GP2
      Pn5MyKfw0cWrZEyNlsZw0fHB/l4UbxiPpjDc/wQ8YbyuBSOJNHj8ZADNSnL5Wg+KL0okUJwv
      O9r3BOkJcPvaRUamM3S2F5f3sI0UT/unSE0N0HPvEdH2bXgryJk21BI5k5PDxPIqgw9v8bh/
      jLaODjRFlMg5M/qMB72DtHR04lIXHrd4/OQZfkXnwpWbWFqAhrC/6BqTA73kPREeXL9A/1ic
      ro7W4ofTzvG4dwQjMc6N2/cJNLbh92hF33H72hXCrR24Fmy8Fx7PxicZm80z0feAB72DNLd3
      4i6SUzL09AG3em6RFx7iySwNkWDRd0wN9KJ7Ijy8foG+CnKaSUdOf2MbAY9W9Owsl021S7RS
      UyQMGJpO8+r+FvonMyXnzMzO0v/4CftOnSMdHy86lpwZo+dWDzeuX+Patas8GZjEpS26xXyG
      WCbPs2fDnDp1hKnp6ZJrjE3PYiZGcDfuAqvUQ2ulp4kbgqGpFOcOLC3nwJNe9p58lUxiouT4
      dCyGNJLETT8dURfJ7KIwDiNLLK0zkw+xp93PdHJRdQbLIJbM0Pu4j+NnzxKbLv4tAEYmZ3EZ
      ExjudlyijHMoGyOmCwZGp3nl8HaGppIlp0SCGl/771/n0ePHDIyU3kcqPkPe1JnKCPZ2BErl
      tPMMx/KcPtSNgYfYzGTJdwxPzuI2J9FdbXgUgxKndnaWmA79o9O8cmQHw5Px0ntZJptqBlA8
      AWLDvbTu2IuZN2nvaCkaeQBcUmfG8rCrJYAlfETDzzeIHl+QhnCY7j376N6+jZ3d23Gpi6Zi
      1U0+PoEaaSPqVfAGogR8xU6TkFeld2iGA/t3gSWJRos9oIo7wOyII6eRN2lrbynxbLukzozh
      ZldrEAtvkZwAAb+PZ0/72X3gALZh0NTciLpw2aC4MJITtG3fjpU3aW5pQlt4DUVFZmfJexto
      C2mo7jChRR7faNDNvcfDHD56CGkaRKPR4qWJ2096oo9wx05UadPY3IR3UfkSbyBMS2OEQDCE
      3+/H6y4OIfH6/Az3PWPH3v3YeaNUTqGQmRnhYW8fo5Oz7N6zl2iweNRuCHm4+3CII8cOIc18
      GTl9pCcGCLV1oyFpaG7G61JXZQbYZHsABSktem7f5fTedsqFyitCkJ0abB4iVQAAGCZJREFU
      4KEvgLvc/j0X51G/5OS+rvLrUCvHdAbO7O9CCCjnJVBVhXw2wd2HT4n6S38iOxsj52ricGsD
      UL6B9PDYNMdOn0VVBN3bSq+iKAqWZdBz+x672sKl8XBWjqmUpHtfABEpYwWSkmwuRyaT5FZs
      HImCqh2grTEE0ubJgzvEMwYCeHD7BrgClMRxSgHYPLh/n+P7tuMtE0802v+EmdkEur8dn9Q5
      deJo0XEhFGzbpOf2XQ5uaywdvRF07ztM1+6D869Nyy4yUSuqimnk6blzj5ZwGaedFAgsHj24
      z7F92/EsswhvOTbVEshIDKH7dtDa4KfRZ/NsvNQs+3R4knPH95ExXczGSqd9X6SJ8cc3uXT1
      Otd77qIvrkCnuDBnB/ngyk16e3uZjpcucR48fsapM2dAWszGYyXHhSvI+ONr3Lj7kN7eXlK5
      0ijUoGbw1a9/xJPeXkYmZkqOD/U/pXPfcYIekGaWRGZRhQjFjZUY5tbt2/Q+7SO3uJCunSdh
      uDh79iynjh3AG4jw5OHdOQEV9h46zunTpzlx/BjHjp/g5JF9pe2RshPEZDM72iKEvNA/Vrq0
      mEnkOHJ4Py5Nw8iXFsmaHusj1HGAaEDDreSZiC+qJCcNLn50gf7+fp4+usP7H17mwtUbRafc
      v/eI46+ew0WeRDJZZgk0wYxsYkd7lKBHMDA+WyLHctlUM4AWbEPvucjAxBS5dDsnXivtTtgS
      cvPRtTuMZNwcO1xaziTY2Mbbn/12TENnYGAIFrdGFipHzrxGTjfQNA2vtzRmpLujiUsXLzE+
      k2DXngNFx6SUoLp4/RPfMv+ee/E+A+jae4yGXA5F1XC5S13zbe3tXLl1lbGJCfLbdnJ2z+IK
      FwqHT7+GbjjmwBKnnuLCTs8wMjGNlRzHVvx43cX3Mjvy/7d3Xs9tpOm5/3VABpEJRjDnLCZp
      NDNn17vlKtt/qS/P1Snf2MdVtkczw0yKOQcEksgZaHS3L6gh2QSlHUrcXZZmnhtV8YPQAd/z
      vfl9j9i6SFFWNHwOmampV0YS2PyI2XfsXsW5jAeYnKuvjx4e6GZ1Y4e8IjA6Plm37vY3s7e4
      Rvjqmkq5nen5+mc1O1wMDA6hV/OUOEPUjETq6Wjh5x9+4PoqRqhrgLpAt82PlH3HzlWc2FWA
      iUfu83PxYuIAWq2KogmotbuT0GyxIT/Q4ZOJOB6fHxGVRKqA33enn2u1KscHe8QzBcKxS779
      /o8EvS7jwafXWFlYIJnJEOruR5MdDHUZS/wqxRy6yU784hAcjbQH79QctZQmUVA5Pz25/VvP
      0Dheh3HzHbxfJpVKoAUGMCtFXk0YO7rpuk65mCdfUvB4PfXTUPQaqwsLnKVKjHf48XSN4bXd
      1891VKXK6ckxgtVDqLURTVUx3yPBxtLPdI1Ps/t+A02tMTc7+0At1FFrd7PKJEmuS7MIH21z
      ES8gCxru5i76QsZa65su37VbFU6S5boWk9l4hL2TCAgSgyNjFLMpmppuvqdcLiNLItVfajkE
      EZv1romvWlOoVI3S0WSxYpKeJ43mxUgAXVUolWtEwuEPfxFo7+7DZTOejIfHJ8z6/IDE0dE+
      ft/s7drlyS67F0lmZqYRZRNNvkeyTpUiFdnNSL+Hsmgmla8fWL29tUPfcC/RdA3t+oD24Nzt
      mmTz0GjVsYoq8fSNimZ+JOUiWVCYmRhi5UpGycfr1lORI3YiOdoaXezu7DD75hus8r2No5Qo
      yy5aGy2YZChWakYCqArv3r3D6fYiFC+Jms2EmoybYXR8hMXlBbKFIp29w/UqUCXNf/z3BsHA
      zSHS1j1A4EGvn8tkkdm5GSQBFhaX4AEBslcnrOxf4m2wgSjTPzCI3XJvW+k66UyGQqGIzSwQ
      uU4z2HH3HeVyGUEtE778oCaabAz3dd2ul3JpzqJGz1FzqAffMxXmvBgCSBYHTuUS1eRhvP/x
      fpMAfrvEux9/RkTB22Kck9XSN05zj8rZ8QGFXJafl9eYHB/Dct+zYXYR8ojsHocRLW5eTdeL
      dV+DlaWFNfon5okc79atq4VLVnYvQc0TsEC+qZOHZupgdxs/r++Tr5mYmKofaFFVanT19tPi
      taNVbiSBxWm6O6HNDXR4JTYOEpgsXYx7HhiHgoCtwcvkxCd6BUkmLCYZt6sBl9v9YWr0vXVR
      xhdoZmLi44OwLUKZhcVlzBIk4nGW194zMjJ86y0SRYnWjh76Qx9pLqZWiGVrOJwOpsYG2DyI
      AR8+q+s4HHY0zUav84OUFYyHidPbyIg3QORkj/B1FpsrgOcLslsf4sUQAEA0N3C++W/o6gQu
      q0xjSzsOi/EWA03NpEoRQEYU6rU3QZTo7B2ks3ewrrikmLlm++CmfXqD66bEMJsr0PCg3LBj
      cJyOD6p/q++xbmw6DS4flUyR5oCNaKZMk+OOApeXl5SyGcx2Fz4gm83Q5DVSxOly8X5/i0vz
      jXGZLGxS6+qj2ddwew3JZCbg81GrFilVag/ehYhVUFheXUUE/C0ddDT7DdfYWVslNDKD1yrx
      3//zPwS//RYjAyS0SoqV1VUEINQzRMBtlACjM98+8vx3MFntJA8PWU2EQZQZGBo23qdkwuOw
      4ZJl3i2u4woYGxFETo/I3m8RabIzNvig/rmc4Dih83Z2jvjxBruRNMNtj3vfnooXRQBBMvH6
      +1/amQiPTgnc2jth7vXrX9XK/KEb1OYKMD1uZnn3mumxXkrpGKfpEm2NRgJEDrfZPz2lLDjR
      dJF//tNbw7rkaGZySKNWcnIUzTDaZXRzBoNBCAbr3Y73YLU7EbQatZqOZPPwanzIaPxVcxzG
      iryZma5P7dVvxpcOjk7e6u+iZFQ7rmJhCoUC5+fn5CwiNe2h+pPjMqdgtlgeLaf8BUdbqxyc
      RbA6HNQkL396a5Q4JqsDWdCoKQq6bKovOtLB5XbTFAzQ1G1cQhDo7BuimIqysn2G1SJhNju5
      T9JSPs3VdYJi5pqzMxu1QglVfj6z9UURAEEkfLJPRRVRdBNz8/UGjlArc3p+gSyA1ekm6Pv1
      ZXqCIIBkpZyKkc63UEwmqen1xeaxdJHJ0X6iFR/FxHHduq6WWVpYQTTdGJypQis+553xKQgC
      F4dbhBMFRF2lpWeE9kajPRI+O6N79BVBl4WjnXVSBQW/8569I1upZq84P3chiBLNzS2Yf7ER
      dI18IU/qKkqhcmM8+praab9nA1htdrqH7zbr+Nio8SHMToJ+CHjv3t9jSXipkspgbyeWxh7C
      x9t168nYOYGuMbqanMSO3hNNlQn57unngkD0eBfR6iTofjxotX8YZvabeSwCLC4toeldt0FB
      STbjaPDzauKDdHP00PoFbV4e4kURQMleoLl6mesPUIxusxspMNZmVB2Gxydufftm02fcvmTh
      9ZsZjg6PsLgaGW2t1117O9sxOT2U1peRnPXrWjGOOdDLVP/Hq6SiySLzc7OAzsLSCu2NM4b1
      YGOA5ferROwWimWV9v6HzyIxOtzPcTRJwPPAkyXK+Dxuri6OqVZv3oWhwZYg4PL4SJwfsnt8
      SFJxIqhV/uUf/2D4jKBVWVtcRvsgPTr6Rwg+mO3VFWrH4bSxvr6CMxCqe063L8D+yjrpqINC
      ocx0xwP9XNdxNDjZe7/Mhc2Gv6WDzhbjtMomj8y7H5fx2CTi19esr6/R2TeMz2nBbLUTMEv8
      9G6Bq1Qau0mif+Z7OgLPM0fgRRFAdjZSWl9iveQmm04z8aZ+GES1XODwJIJZFrD6QrifOvmk
      VuKHH37C7nRC4QzJZKY9aJQC0UiE0EiQ6bnXLK+uG9aSlxecRePEYlesFW/cp519I3gcRm+V
      qORZWV1DEiERv2Ztc5fRof5bf77N28SbeT819WZOWF2Vl66wf3SOIohYVJFEQaXZde+E1qrk
      a2ZmZsc+Wv10dpVmdmqQjZgdoXBR/4FyCs3Zzsxo+6PfcR0+5ODsGovTy+zrt/X+ecDs8PHm
      m9coNRXZZEJ6+CFRxG61YDIpVKtV7I76jdvUM4G7tUhF0RkfH//w3+49aymB6O+hxRJloreR
      nUz56ySAIFkZn55CV0qEHR4azPVv/OgshtVqpn9wgN3dU+DjHqPHLwIOT5CZqY/PBBCpEU9k
      MLmkujlenkALJrub8fEb9aJcKGC21b/G8alX7Owfowkm/vAPf8Yii7eb/Oxwm+v0vQQ6ycLY
      6LDRW6XraIjIkkAmlyfYevculGKGrf0TErEoa2sqAuBvDhlUIIC+zjaq1gBi+mdqZiPJs4kY
      xxeXXEejrNduEgLbuwcMLc/Poinm37zmeHuNdFHB56hvJZO7PmNx65wGhwVEmeGRMRzWe+9D
      rRLN1Jifm0NXiqxsH9I4aVTHLk93OE7WCDhlNtIVvpufMtpv9iAhTwrd2sDi9gWDE0Zp+iV4
      UQSo5SIcRCVqqRNavBYOroP0Nxr9vS6nE7/TzPutPQTpc3zBElQzLC0vIwBNoV7aGo12RN/o
      FCeH+2zGNF69MrYkVAtRji5NTPbfeGuE/AX7hS5GWoyqw8bGFv1jU0hqkY3NHV5Pj9+udfQO
      0wHkUtekSjq+Blv9DC3ZxszEAJu7R7jbB/A75HtLDYyOjjI6ereRhEf094bAjYR6Nf+Wg8MD
      w5rTG2S0oQGny09nqJli6pLyAzlQLKTZ393lMhojUZFoagzS1W5U+zRNp713kP72jwzhFk3Y
      9CIbm5uolTzu4ENLGDK5ChOTUzhkgdzKMpoOt/HPcprzvEyouRFopKVr4PHrfCZeFAEEk43c
      1R5mpwuTpGA2GX9URVHoHxhA13VGPSXMtieqP7qGootMTt8Fth7bOJHTQ+yBDoLkWV3f5LvX
      d358wWSjkI6h0wS6TvQqTUNX/ckooIMg3vz7iIKRjBxxFK9SLmZR3BYCXaO470uScobdSI7Z
      2VmuTreJpu20fogFCIKILGpsbO3TFbSxsHVKS8cAwz0fn4mQyRpbR4qiiFjLc52r0SvLmClz
      nMgTdN0dKvPzb6nWVNrabuanSbLxOaNnB0SvUxRLCrmrMxBlBodHHrhrdToGRpBEAUGUbqve
      7iPgb2B1cRGbWaJYLLC2ukJX/yi+BgtUc2zuxFFa7w6pQHMbLvvzxAJeFAEkq5eJ8WEsZomL
      yzS9HmN6QTabpZC6Ipm/ySVp8DfTG3pCp2JVIZstch27oFy9SS5rau+mJWCUAG1dfWwu/ciu
      6uSbOWOgTLL66GvJ8O7dO0Rdx9PcSY+nngDjkxPs7m2hSnYmxx+xZaoVbE43WjVHvlAicF/k
      q1U2N9+zd5FBzV9TqWq8an2Qs6TXKJbK7B8kmXszx/7eCXBHgET0lOPwXQRVER7ZMLZGvKzw
      089XaEi8etVlWLbY7HxqmwVb2ojG4phMJnqHx3E/iNqj66iVEjuHp0yPDVErZVnfj/Bm2phR
      ara7afogQFy+IL2dxkxeURQN5ZPPWeD/YnKBAJRsmM2ogJo+xd8gowbH6Q18OJFqZQ5Pw4bg
      lt3lozX4hFwQXWN7bYlURcTnlIlcJhmemqPll8mEWo3d7S0KlRpqtUQVM063j8nh3ic90/bW
      JoPDIzexCq3K+50TxkaMortcyHByek4qW6CjZ4DWoNcoJ1SFVKGK1/UxKaeTiF2Q06y0eS1k
      KhKBJxTP/4JKKU/2QzqI0+XFZvn1Z+L1+R45OUjIqfD+Is+r4QfqjaZysLPO5nGMzrYWBFGi
      u28Ql91I5nIxd3sP27v7fP/d27s4TzHBUdZET3O96/OrygUCEGQL+fgRss2Jw6JRuK+eiDJ+
      vzHSKT+SZflJVLPkRQ/Tg05+2rvmD28mWT25vCOAKDM4OkE5l2R9ax+zoOP6DJ9zvnDPwBUk
      ioX6SitRFFGqVWRZplQsoKoeY+KfoBO5iBApJ0kUVabn3+A0f3gfqkIskSaTSJIv10hEIdDa
      +XQCVLP8tLRNpZInYDcRGJgh9AQC1JQK8dQlYq5GLJrixC7R0tp2Z8yLIo1t3fzLwDhKMcNp
      JPmo61oQhFuvj45uTNmw++n5K7Z2elEEkG1+xodUUiUwO8z4vfdOClHG4/FwdXHISTSJiEDX
      4ChPcoZpGtlsisvrKqVigYtIjIpS/wr29o8Ym5nDJt0kgHW3PW2IXlezh3c/LuD1OEkn4rT1
      1+frmKxOQqF2wuEwp6entLa2IN8vBK9VyJcrCFIT/S05MgUFp/mDQiKZaA4GcFokkukcOuC0
      f4ZDQC1j87RgL0bp7fBxnC0T8v96EjW292PK3iQEzvmaQBCM7ly1ys7+CfPTY/y0usXwUA9b
      u4dMj93lHum6jlKtUiwWqVZKDA6N/U17GL0oAqiVDOvbJ5SUKnPdXk41O91+oxZ6HI4zNz8P
      msLCynsCs79uciIAFjdTQ92oms60+2ZTT7TVR5IDbhu7u/t4rAKa+HRjqzHUj7e5QrFUoa9/
      EPMj44nyyRjh6wIdvcOM2K3146DMTjoCdmy+INWcmYD7gQ2gVlnf3KOv7yZvxvQ5I5BsAUa7
      K6gVC4cXcYaGn9aCXTZbCQQ+QTxBQNBULi8OsQVCeL1ejiPGAqPI3gZy+wheS5ql8yxyIk9z
      4GnTcL4EL4oAmlJEsnvx6Dmq1cqj87MEpcjW9jaSAMn4Fdt7Rwz0ddcHYB6DKOEP/OXTvKVn
      BHviilxFY/bVxzMlPwXZZMFl+jh5LFYblUKY3e00yBbGR0cexAE0UqkU60eXSGqZN74gpvvq
      iSAhoGMy3RieT+6CV7jmX//ffxEM3NkeiWwnbf5nnNQumhnua+fiOs/4YCe1cpqOTqOdEC8o
      DNskllbCfPvt92ysLhndoH9lvCgCyM4Wuv0HHJyVSLk7GGisP12m5r6hVCohSCa6urpvxO4z
      v6xk5JjdiyROi8hVKsfM2PP6ngGi4Qtae0do/tiUmmqeguDC1+alTYyRr2gYs4AF2luCpFI3
      J2oDMnbrE6SV1cObmTESySxmewNtra14H6s9/kI0+JoY9n2IHTi8BB9cYrA3xOK7H3AEQpgE
      kETp2X/PT+FFEUAtJ8moTr7/vp/MxR6RjEK72+haO97doKhbEWolHI1d9Hd8ehrk5+A8lmR2
      bgazAAtLS8/+/QCeBiuLG+9JN7pAMtHT3W0srTQ7aPLYycRPOC4rTLY/zLJUCV8mmX8993kb
      RjLR1TNAZ7dGPHrO4g//n76ZP9LT9Pyt6z8FqzvI22/vfsPJyafNQvtSvCgC6LUqqUweTdMo
      5rOULSpgJEBBkXg1PYYgwMLSMvwVCNDT0czCjz8iSwIO718euP1UqLUajkAnrxuaEQQBTdOM
      6d21MtF0mY7WALT6QX5EzxYkbHqef/+vHwkFPXgCLTQHnjDAQq2ys7NNvlTD7fPz3Z/++e8+
      NefvgRfVFUJ2Bmm2V1laWiKuu+l6xMCStRJLyyssLy+TTWdY3tj+VaNGfy1UpUK2AtPTrwj6
      vDQ3fSTE/wU4O96joEDqOoKCmfR1mHTxXs6RUiJ8lYJaGZTHRychiAxOvebtzDihUOgT8YKP
      QCkSS+QBnUwyztb7Na4y9Q2+vna8KAlQy0bJCH7m5kbJXWxxcFlkqNmoI0/MfYtaU0glrnD5
      WujremIy3F/AweYaekOAnf/8D7pGp9jcWOcP333zrNdQVRVdB0Wpouo6mqYa+wIJIvHwEYvZ
      MOgaWNwMj44aUwx0lYPdTbJFhVolj6NlmJmh+nTlj8Lq4Y//59PVXr8FvCgCiFYnmdgOiYCJ
      s/Nr2iaMxmcmEeXg6AytnCUptfAP8/UpBl+KnCYz29tDNpWkN9RK+jr27NdwNzjY2VylVilx
      lVpD1TQm2+95gKxu/ukf//zpLxFlxqZucprUaoG13bNnv8/fAl4UASSLhzczI5xHr2gbGMdj
      MWpo2+/Xkdxt9Ld6OCj5HvWvfyk8dpnFxUWK+TxLi4uUtOd/RY1tPTS2PXHu70NoNfZ2tsiX
      a2hqDXfz1zW/92+FF5MLpOs6tWqFaPiU7f0T/I1BBobHcT3ItVfKBU6OD4gmCgRbOxnqafs7
      3fnfEarCVTpP0NtAPJMn4H1aAOtrwVeVC6Rkwvzf/1xnfn4Of2OB2en6ViJwU4TdPzxJPzw6
      E/g3Aa3KWeSSoMvKyXn0N0uA58CLIYDJ3caf38BF7IKLiws8/ia6Q62fjPB+jXOvfh0E4pET
      FospTqJxqBYItHbR1fr8HquvHS9GBboPXddJXoWRnE11tba/43f8gq9KBboPQRDwN7X/5Q/+
      jt/xhXhRgbDf8Tv+1vidAL/jN43/BUjkUlyZxgwWAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='FilterLabel' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nOy9dWAd1533/Zm5qHt1xcwsWSxLMsmcGOPYTuJw0rRp0pQ2Xe52d5/3WXp2
      C9s0bbbb7qZJGmjAITtmZssoZmbmyzTz/iGZYie2Y7u2q/v5x9bcOWfOnXu+c2B+IMiyLOPB
      wzREEARBvN2N8ODhduIRgIdpjUcAHqY1HgF4uClYrdbb3YSvhEcAHm4KAwMDt7sJXwmPADxM
      azwC8DCt8QjAw7TGIwAP0xqPADxMazwC8DCt8QjAw7TGIwAP0xqPADxMazwC8DCtUX7+gN1u
      Z3x8/Ha0xcNdjNVqvSvNIS4TgFKpxGAw3I62eLiLMRqNd2W/uUwACoUCLy+v29EWD3cxSqXy
      ruw3njWAh2mNRwAepjW3VQCy5MY4PoLFId3OZniYxly2BrgMp5lj+7ZR1T46dUAgLmsJS+cl
      o7rBizsnevnpX36d2G++x3NF/rSePkCDK56lc5NuuO7bTVtDBYFx2RjUt7sltwHZRW9TJUdO
      ljFukwhNyGXpgpl4qwRkyUl3zWn2nqxG1gYwe9FS0qP8ARljXxN79h9l2CqSPHMB83MTUAqX
      Vj3SUcn+Q6cZc2qYuWgZOQkhKARwWUY4cXg/dZ0j+EVnc++iAvy8FNjG+zh++Ait/eMo9MEs
      Xr6C2EAvzlV79RHAaaF410b2nKiisbGRxsYmeoaM3IxntsonnB/+YiNPFAYCbtpO72X3iWZc
      N6HuPxZ24wBHd27i3Xff5b33P2Tf2SYA2hsrMTmuvR5bXw1HKzrvqu/+RTjGByhr6iVv0WrW
      r11N4EQFr364H5ckU7X/Q/Y22Fi2Zj3LZsWy543fUjMm0d9UzAdbSphRtIL1qxYxWrqJT4+2
      cCFoj4ypo5g3N5WQtmAVa1fOpXL7mxyp7gV5kI2vfYgzJJO16x8gUdHAa+/sw+x2UV9RjiY6
      j7Xr1nNPXjDvv/oqTUMX3DevPgJMsfzZf+RbC0IvfMnhNl59+zOWPvciid5QvvW3HHfl8a11
      KWz67XuELLyPseI/0KCaw7NFAr/a2c2ccCcHj5WjSZjHD557CINrlI9/95+kPPLvhHV8zKu7
      ShmU2vnL5i3krn6eJ1Mn+N3+IZ5+5gEC1fDxL/8B3dLvsSJdx6s/e515G1ZRtX0TlviVPLk8
      ifI9H/HRnhL0cYU8+eSDJId436zf9MpIdsqPHcYWlMOGZUkoJBsjRuf5j90OK6PDZiRRjY+P
      NyqFgORyYjQacbpklFodPt5eiIKANiiBXD8FSsDtsGBHi0qyYrS48AnwRbabMRqtSIjoDD54
      aZQIX9yy24rKN5yVK8MRhMkWes2dx9GNh5GkJcQXrCLVxx+1CIT4URi7naYeGwlxmTzx1Cx0
      XpNdclZhGp+UdML8hPP1dteV45+1jIy4cARgXm4UR9p6WZwxg1VPPYOfvxYBCF4wj2PFBxhz
      KcmevwIEYfJeBQWQEnCSgXELyUGTO1bXLICTn72OtUQHgkj6/PXMCzfRUFNDwdQja6SrnjpH
      NJIcR1ttGaVtjXTbAlj3YCjyRAU7PnwH45J7SEmJ58Dm37J7/nIeiLPRVH0GP7NMUnAMyREB
      uFyJFMxKJSHSH5exkZqGLuzuyWu015Tgk2cBWUF95Sk6RxqZUMTz4IIAGg69y0/fOsHS5Qvp
      K9vBz15R8NK/PsmtlIBzuJkGczAPLk+e/EEVXgQHTN5Y63APhw/uJ1CvxDQ2TGTuvcxJCaK/
      pYLSxkEUChgfHSdz8f2kh+uhv5zNLaE8uSCOifoDFLsyUDYdZoAY1j2YT9muXYwovNHgROWf
      yPx56Whu4Xe7Ec51fJAY6axn9/Y9pObfh1IhovbzP3/eQMNxDnUG8swGHVrdhfK20Q4O7Ksi
      Zfk3uFjlkTNyGd10nLbscGK8LJytGiRx0RIQvPCfqlaWXBRv2oaYNZdgjXC+uNMyytlDW+lR
      J7E4wu98ndcsAPPEMIODZhBEJiwOvjScnMVMT+B8Xvm3J9ErRUylFUQXruJHf/N9AhRG7C3H
      6B8chzjF+SLBKYUszorFZF/IE19bgRcwVnbqi68x0Ydy6bP8v6/dg7dK4nd/fYQFX/trvnNf
      DqamBH70849oHnqSnKBr/YbXz/jQANqQELyuMJHU+IVSNH8Z0f4qpIFqNlb2MiclmNDEPFYk
      iYgCuAfK+aSyndTwdBSXlJapPX2aZStWszQqAIW1lV57CKseWIC3Qsbtlj93/p2H3dzKO796
      j263QExSBvkJIec7o+Q0cWTzu5zoVvHAs18jfKrzy24HbeUH2bijjPw1j7FkRtBF/V9AHzqD
      mdGNbPzfl3FJMhEz5jIjOmDqc5nxnlo+3fgZ7viFPL2ygHPLr2OfvMKB6jF0gREUzM1Ar77w
      g12zAJY+9TeXTIGsvVVffLKXPytWLMFbdeFnEhUKFAoFAgKCICDdaERGfQwrlxViUCkAK8YJ
      M5V73ucnlTvAaUbU6xFv8eaSIIh8UWRJUaFArVYjCiAqlci4kAHzSCenT5fRP2ZGcoxj9S7A
      BZd16JjsOWREB6IQBdBFEGcoY8unm4lLSCIlOZEAgxfCnToHAjT6eL75ox/htJnpaijlo0+3
      8P3nH0NpH2L7e28zHDibZ79ZSLD35Dgmu+1UHPiYXfUyDz37AglhvogXfz9ZonrfJrr1OXz/
      r57AS+Gi6tAmth2p4BurCxhsLOa9LadJX/wIi/MuXTwXPfhnzF3nZGK4lx2fbuWM98MUJQcD
      1yGAK+F2GxkZtWJy9lHbOgKRUx+IIirl9VatQKdXMtTVjdXmQqWaVKnZPIrZYmO4v4HWQYmc
      86crUSrOfUtvEpPDaSOP77y4AYNgo7W+Gp32Rr7d1fENCsZe2YdZysD7GjaUZclF8eHDxMxd
      x+JwX0RzI58cMF7hTAFvH9/Jzg8gejFrxQNkTAzR1tTIgX0HuWflCgKuNPTcAciyG1lWIIoC
      Kq03sYlpsKsUsyQxdGY3TdoC/uKB+ZfswIy3n2VHhY3nvvt1grRX+l4SfZ2D+M0LR69WAArC
      Q/3pPtEH2Ni+aScz1/2A+SmBF7VDRpZlRFFEVKjwC4khOVRDx+AE3KgANIYgUiO1/MOjSwiK
      zyBMHEUfefVyX4yCtHn3In/8b6xe/CpLXvgJ/3pfKn4jv+PpNcuISc9HtH7xI33Bw9+g5Mf/
      yZpFL+FSaJkxZxn/8I+zbqRBV0UZmEy6XwX7j1SyvCgDpdtC77CN6IgvmHfJMm5BgUGnRbIb
      aaiqxegKv/qFLEPUDziJjQolNV1FR+dB7C6JO/U95lDrGT7dchbfyDDUChnTUB/hOYvwV9nY
      d/wMcoiWzZ9+CoCgUJI1bzkTVeWYbBJHdmyeqkUkPDWf2TMCKdv0PySt/wHz7lvGax++z9tV
      EehEF52dQ9y7/jEYraKkQUJZeZjB6snSev9oZs1K59AHv2ZEFYOvXo3kNNEzquPhpdHn2ypc
      NTq05KK/pwOFXzRB3hfvzstYRvvp7B9D5xeCXjBjFnyICtYx0NWHOiAMf/3k+W7LCO2jLmLD
      Q1DgZqC3HQyRBOkE+rrb0YUm4acVkGU3Q90djJgdGIIiiQjUMdzTzpDRhW9wOBj7UAZEE+gt
      0t3Wg39k1NTTAJAlTKMD9AyOIQtK/ILDCPbzvnQYvQU4rWPUlp6lpq0PlF6Ep+SxKDeekmM7
      iclbSZAOGG9nZ72dFYVJ9DWVcPxsA261H+mpQfQMGVi8aAbqwSp2dgewMjcCY/MxKoVc5iXo
      py5ipvxMMfVtg7iVWtJnziMjPhTlHdT/29vbiY2NBSZHuonRQQaHJ3BJ4GUIIDwsCLVCYqir
      g0Gj7Xw5QVQQGp2AxjFEZ+/oRdvrIoagcPwt9XxwoIdnv74OkLGMD9HbP4JTFvEPiSDYT4/o
      NtPc1Injoq6s9vIlKjocwT5BX98gFocLUaUlLCISg5cKgcno0FcXgAcP18DFAriZTPR1YtYG
      EO6nv+l1C4Ig3NAawIOHW41PWDQ+t7D+O2gQ9eDhj49HAB6mNR4BeJjWeNYA14HT6cTl+lMw
      V7v5uFyuuzJHgEcA18G5FyserszdeG88UyAP0xqPADxMazwC8DCt8QjAw7TGswj+isiyTHdT
      Ob1jzkuOq/QhZKTHXtGn2e0c4eDeSuYuW4Tuc3e+r3QLHUErmBV99zsRy04z1WeOc7K0ljGr
      E1HpRe7StSzKjMJp7mfvJ59SO2hCELXkL3uAxZmRWMd6KD58hNq2bmwOGY1/JKvXrSM+6IL/
      ruwY48DWz6hsH8IlifhFpbJm9T2EGtRYRro4c6qY/Vubeea//o74qTKSy0pD6UmKT55ESFnL
      15bPuOSp7xHADaD3CSRY5cbeU8GRfn+W5kWj0nh/6bAqud1XPC5LbqS7bxPlijgtZsyqANY9
      /S0CvNVMdNXw28/2Mm/G0zSf3EOPXz5//lQBlu4KXv94L1kznkEyjeIbU8A3Vm7ASyFRV7yJ
      g0dqiF+fP+UVJtNTvpdmMZXnvvckXgo3p7a/w5GSVjYsSqXyzAk0EYmkho9d5Kwl0ddQRpdV
      T25eKjUTl1sTewTwFREEAf/QaPwBq9SNwRlCbFzclGOLTE9DCaU1bVglFZmzF5MSMRk2UHZb
      qTqxj85+I9EZBeSnRF6w+58qK8suaooPUN9nJTpzFgXJYQiAaaCZwyfKscoaErNnkXORl9Wd
      hNo3hNkFIcDkSKnSqhDcAFZamgYoWP8YSlHAJyqFHO9d1PXJFEVlEBzFVBkRrVK8LECAy25D
      4e2LTiUCIv4+elqckyPw7OUbABPDeyouKiESkT6XCGCowUjdxOVt9QjglmDHgT+LVuWgE6zs
      3Lob/eLVRBhkRnp7iC58hHWzFJzeuYVjimUsSL7If8DtoGLfFgbD53J/gR81h3dSLN7LnHAL
      e441smDVevwEE20d4ziBO3vCJNNdc5iPt59l8UPPolZamBjRkqqf6naCF0HBAg2D4xA55afr
      snBy50ccb1fx5DdnXuT1JhA7Zw1h727k9XfL8VPaGbL7sv6B1BtqoWcRfEvQEhEdxMRAN+3d
      Q+hVKkatVkAgMCqR2BBflGo9s+bnMlTfjv2ikk7LGI1WAwszIlGp9aQW5jBSX48TJRo1DPX1
      YnKpSUiOvqM7v9th4uT29/j0WDf3PvZ1CuP9EBAQFfJFoU4k3JKMUqEAZMzD7Xz05qvUu+N5
      +msPEqq9dGQ09XcwKvqRkZlNZlYWAeI4HQNjN9ROzwhwC5DtAxzacxJ1UAg6lYjRZMfnsvm9
      gKjXo7KOXDLUu5xOzP11bP54cryW3DasynAkTSBF+SlUNtRRXzKOd3QWiwpTLgscdScgy05q
      Dn5M8VAE33hmKb6acx7PPgSGOhgbs4NBgyxZ6OsTCS/yRjIPsOWDj/EqWM+TBfEoP+/JJLs5
      u/cIYXMfYU7KpDtjiNLEGyfLKExc9pXb6hHALcDcWY8juoBleZPujnX2CS6PkSVj6u5CCgvF
      CzjnGazWaPCLzGLVfUunnvAXnpjasATmhyeCbOfUzi20j6eQ6HdZxbcd+2Azu6tlnvvzZfhe
      0o81pGYks3HPHrKeWc1o9Skqlcm8GCLQVlyMMWIuj81KuKy+sZ4q1OHphEZ4s6ekmpnRRfgo
      HFSUV2HwLbyhtnoEcAvQBUXgqK6iQjOOYB2mvLaXjLg8AOzmYZoa61E6TTQ0j1B4T/4lESEU
      Xv7kRojsOXCShHBfnKYxzMpAcuN9KatuwNsvCIXLyIgQQsrNd5K6KTjdAlpXO7976ecXDoZm
      8uLjy4jMWcoqyz7+51e/wCsgjgfXrUADyAIMVh3k583HpwooSJyzkrX5Bo7tOMzKb2aQvGgD
      9lOHeP/VV7C4lSTmFLFhbjYwxAcvv02X24V51ETFz3+OzjeMtesfYKJyO/tK2nE6LFicSl6q
      2Un2PY+xPHfSgd3jEnkdOByOK1qDus1D9Fi0RAV7T+3KyIz2ttE1aMLLP5RgLwF0vvhoob+j
      kxGTBRcqwmPiCDJoEQSwjvZg0YQRqBORZSc9rc0MGx2odL7ExEWhUwqYR/vp6B7ELWqJiI0l
      0PvOCY3V29tLePg1OPhfJwPVRzkzHsjqeTNuet16vd7jE3w9fJEAPNw6AdxK9Hq94NkF8jCt
      8QjAw7TGIwAP0xrPLtB1IIoiCsWdHpb29iAIwl15bzwCuA6USiXK6455Oj1QKBRoNHfOrtS1
      4pkCeZjWeATgYVrjEYCHaY1HAB6mNZ4V3R1ET0cTPqHxeGvuvt2Uy5Fxmoc5W9FIcnYhgfoL
      XU2WXDSXHcUWnEdmtC8AboeZ5qoyqlp7kAQtSTmzyE4MvewJPd7bwInTlUw41WTMKiItKuB8
      CHy7cYCSE02kL5uH71QbHMYhSs6cpWtoAlEXyOyiIiL8tOcdiTwCuCFG2fHGZgbUKpSAQqUl
      MimXOXmJqL6CmXJTbRkJPjF3vwAkO40lx9lzshGjZRB9bO55AZj6Gti2Yx99/V34zY05L4DB
      rmpqO+3MyM5DtI1wbNvbDN/zDEszgs/bV1l6S3n7ozLyF84jQW3j0KY3GVvxFPNSgmk4tY1D
      pS10lZkJPicAyUVNyUmMqnBy8pKwjzTzzmtv8eizzxDnP7lj5RHADeFGoY5m7ZP34I+MzdjL
      nk930ZaYSLLvpJ+vw+FEQkClUqFUTD7PZFnC6XDglkCpUqNUiJfm+5Jl3G4XkqCYTAMlS5P1
      SKCcqkdyu3A6XciCgEqlRqEQEQC3y3mF4zIupwOnS0JUqlCrJlOsTrbPgSQLKJRKVKqblHpV
      llD6xvD084s4/ul/X/qZqKZg9ZNo23Zw1HXBDC00vpC18cLUfZBRT3Swq6GTpRnB58/prDyJ
      IXMFc3ISJhNcDNVyqL6DeSnBaPzjeeSZeRwa+ejCtQQlOQvvu5AmVU6gqeJluoaNHgHcfAS0
      OgMGjRK3BLhMlB49ROOgDYXsRBOQwOJFhRhUMs0lByhtHkEUZSRNEAsXzyf0opTysmzj8NZN
      +GYvJy/Ol8azByhtGUOpAF1EOsvyoyk5fpyuETOS24nCEMu9987FII9xZOce+h0iCtlNUEIh
      8/PjcQ+3sXXPcdxKDZIkMmfZ/cT5yTSfOsSpjnE0ooxCG8E9a4ow3IxbofAiPjnxih95h8Th
      DXS3fe7uTT0BZLeTjtqT7C7tZ876lZecE56cycjO03TlRRChtVBRP0zcrDAAYpPTueBVcb7S
      C2lSreNUn9pHJ9EUhV9I1eoRwA1itwzTUF2Nzu1gsKsDZ3QBib4w2FRNhxTG+gfyUAku6k7u
      42xtNwuiLJS0C9yz9gEC1AKdVUc4Vd7E/fPTAZBdNqqPHUFImE92XAD2kTrKutSsWv8ABpWA
      3elGoVKQPXcJ+Wo1ouyi4uh2WvrNZKk76VTE8sgDhahwYXfKKNwWig+dJGnRWrJC9dgGq9h+
      pISw5UnUtlu5Z/2DhKhk7DbHFUO5/DHpLdvJG9tO41YYyMqfR0KI7pI0qYbIbGaGt/KH37yE
      W5IITytiQULwl9Q4yWSa1FE0vuHMW7IcX6+vkCbVw5WRZTdOpxO35MbL4IvTbsIhyQwNjhMZ
      k4NGKQJqwqLCaazvZ0w1gT4miUDt5K2PjIrm8JEunIBjtIutH3+ET0wGjy2IRgGM9bahi5uJ
      YSozvFajQHY7Ge2q43RZLUa7m4mJCfIi7Igh0YTZt/PpliHSZ2SSGBeBZLfR6VCwTOvGaDQi
      q0NR2A5ik3NJiVax85NPSUxNIy0xgQAZbmeYifDclfx9zjImhvs4c2gPWw968fiyrMlpkSzR
      eGw7bYoUvvMXT2BQOjmz52N2F9fy5LKcL6236ME/Y+5aB8O9LWz9bBtqw6MUxk1mk/Rsg94g
      Wn0IGbm55M4sYO6ChcSJLZxqGkcUBaSLAv3IsoQgiIiiiCRdiE8jSxKIk/N3tX8Uq9asQD9c
      S9vopN+BQqG8LOryeEcFx+rGWbBmA0888STLZ01NN9R+3Lv+UVbNz8bWW8H2XScwuUC2DHL8
      yBEOHz7MkaOn0EWmoFaoSJ27ksfWLiFAHuXAts/oNN7ixMpfgiRJk/F8BAU+QZHk5KfQ39J8
      SYyf9oZuQpPi8dUqEZVeJMSG0dLR+YV1yrJ8/l6LSjXB0WlkRWno7B49f45nBLiJOMxj9Axa
      MSRqCNOHUF5aQ2pUEN6ihca6dkITF+AXbsNRWkJbUggxvgpq6xoIi5hx/odQ6oNZuaqIzbt2
      oV+zjMDYGbi2naEv8V5C9QJjRjtOmwOdfyAGtYhpuJvW7hG8fcBpGqbPLBAWFEHeLC1Duw7j
      UBSQEh4BM+aSFxOA7DDRO2hCJdvp6h4lMCSUtOx87CO9DJucxPrcuD2P2zpBZWU5o2YX1Y0d
      9CoPMxQQyMyFM7G0lFLXNcFIQyONksQBRxcRyTlYa7dzZlBDfJg/gttBW3MTeQsfQcBO1c43
      iV3xPLPunc8b2z7B3pqIXuGksaaJ+SseBkyUHjrDmGShrqcV84ED9Gh9mJGWwomtr2PzSSHQ
      oMHtGKeuS8naBVHn2+rxCLshRtj6u08Z8tKiAkRRSVBsBvNnZ+KFnZaqM5yt7cAhiUSn5TEr
      JxmtAvqayzhd2sCE3U1AzAzmFWbhq1Vy+sgOonPuJdSgpKNsP1WmUJYVpTPSUsrxsw3YZJGo
      tFnMTvblzJFDtA5b8Q+LxcA4hsR5ZIW4OXXiBB1946DUkJI3n+ykECRTP4cOHGHQ6EBQ60jJ
      KiA7IZj2mjOU1nXilBUEx6Qxf3Y2Xl/xkXhxlki33URDXS3j1ouj4OnJKMzA1llDc5/pouMi
      IXFpRPuLdLe3MThqQhLVhEbHEx3qj7O3lHe3NfLs848AMsahLpraerC7FYTFJhEd6odCsFB9
      shLjRV1Z1HiTkpaGxjlKa2snRpsDUe1NQlIyAQaNJ02qh5vLrUqTOtbVwoQ2iJigm58r0pMm
      1cMdj19UArcy8otnEexhWuMRgIdpjUcAHqY1njXAdeBJk/rFuN1uT5rUP3U8aVK/mLv13nim
      QB6mNR4BeJjWeATgYVrjEYCHaY1nEXxDOOhpbmfMfi5VqpLg6GiCDV43XrXbSk/vOIHhYVzZ
      Q9JO2fbjhK1aTJhwqQ2z22mir99KWEQwijvsEWcb7+Hw7j1Udw4iKPXEZ89j9aIcFE4z5cf2
      cqyiGasDYrPns/qeQrwvSoEj2ScoO1VMWVU9IxYn3gHRLFm1itQwAy7bBI3VFRzbv5WUR3/M
      whgAGfNQJ8ePHaOhrRe7S0Fo2kzuWzoXvymjJ48AbggjFUcrCShIZTJXxU3eBZHlL6lRxmGx
      XZZJ8dxnX1bydlJ7YgdD/rP5s4cycFsG2Prm7ylJTid27BRnulQ89cKL6Nzj7Nn4NvsrIrk/
      L/K8u6htqJtRZQhrn1pEoLeS5uNb2H60hNQNi2gqPUqz1Y/4UB22czdFdtPb2YF/0lyeXR2N
      Bjs73nmdM00J3Js1mSDDI4AbRKMLJCUj41J7FWMvVaNaMmMmXe96G+uQQ2II84aWpj4iIv2p
      rajAJyEff/cgNlHLcFsdPRMyqXmFJIQYQCFjG7dDNIBMT2MpVc39oPEhO7+QsCnbMNt4LyfL
      axh1qMibN59QvQJZkrHZbCCAZbSbPpMSR38D7cM2wlNyyY6f9KKSnBZqzp6ic8yOT2AEsbHR
      RIb4YR3u5ExpNRa3ipi0bNJig2/aXNlmMuGXHIpSFFDq/YnwgzGLC233IFEzZuGnVQKBzFow
      k/cPV0Je5PmyusgZ3HPhTwy+eqSOSYvTtLmrSQMathfTdu4EQUlS3vyLrq7DoFNidl3we7jD
      Bsg/Ecz91HZdyF440NJAn9GGLNlorirnyMEjGNUhhPtrGemq5tDhEvSx2czLi6Gm+AxjbgAL
      bbUd2AB7byXHm13kz51PfloYo6PnfF9HKTnTSkR6PrMzgjl5+CQ29+QUqLWlC7cMtrEO9u08
      iDs4hTmFGXSfOcGACyTHBMf37sbok0BR0VzCNcPUto0hO4Y5driCiOy5zJuVicI4ge0m3pqM
      ouX0H/+EHXv3s+2TD6lVF7AwQYt/oJ6Wqhom7C4kyYVb0jBm7r3iSCa7nbSV7+PdPa0sX1Rw
      Tdd1WUc5tvl1KuzxzJ4Rcf64ZwS4QSaGGtn64QAaAKWB/PlFXJ7m7Rwyw/0DZKx+kMzYYBQC
      oPAma1YWSRGBgBdBinrMDvC7aBkhSxKiQsDtlvAJiiNNKQJ2wI95S+cRJQq4nV7ohN043Z/L
      HSyoSMydQ3pMKILgINogMWoFzUQX416xrEqPQQQkfx9aeybbKAsKZLcLhY8/yRkhN/EpKWGZ
      GEep98fPxwdJYWe4e4IJh0RkxgIKh3fz+9/8CkmpJyLUD6VKe1kNTusop/Zs5XSfkvufeJyE
      kKuZSctM9DWw/bPdOMNyefLhefhrLyyqPAK4QXyCkln08KJLp0B9X3S2QFBMMslRU51/6hgX
      /V8Q4PMvVLUR6WQPnuXssYNYHAIZ85aQGq66YtkrXlVg6rwL51gtNvx9Ay7v3OpACgviOFt+
      giqLjcC4PObmJXylOEeXM8GxHSfIfvz75IQoAZn44+/w6dFWvrUsiVnLNzBr+eSZA41HMZXK
      CJc4KTs4/OnbtGpm8u3n5qO9BmXKEx28/dZnpK1+kqWZEZe5PHumQH9kvko/klGRmDOHFfet
      Ye3qmbQUn8F4gyZJWi8t48bRCxOMcwtuGfwiU7lnxSruv/8+tCNltA45v7ii60KDj8FJXW0r
      TgnspiHKqrsIDfZFskzQ0dOPU5KxDLex72AFufNmAmAZ7cTkAnNLMWXmZB5bX3RNnR/Zxdnd
      2whb8hhLM8KveO89I8CtQO+LONBCc4cS93gvZ+p6yM746tUZexqo6bMTFuKPa6wDRWAwmht8
      dBmCwtGVH+J0jR9hWicNlfU4w+aBdZiTlS0EhoShkc2MOw3E6G5WpDovitY9wjF9WE4AACAA
      SURBVOEDh3jl5c8QVDqSs1ayPDMYwTlKR+kBPmnoQeEVSP6CNeRE6hEkI5X7t5G1/gWMRisT
      Paf5n5drztfoP2Mxz67O58AHL1PS5cY62oO99OdUGnxZsmYNZoeb6r3v0Xb43HfQMOf+RyhK
      CQE8PsHXxeVZIm10N48QlBjBpa7kMv2t1bT2m9EHRhCscaMICCNQBz2dw4RFR6Kc6sBjgz24
      tQEEGrSAi4GObnQRsXgrbXQ3jxKUGI5GdtLdXE/noBGlLoAZ6cnoVRIDLT3o46PRCwKy5Kan
      u5OQiDhEyUxvn5HwqDCcpkGGbVoigg0ISIx0diCGxuGnnlwY1lTXYxO9CfIy0jIRztLZsZgH
      O2lo7cEpaIhNTiXcT3fVe3OrskQaW06wsxYevm/OTa/bkyb1OvlTSpPqtlvoHzUSFByM6DJT
      fngfpN5Lfoz3V6rvbk2T6pkCTVMEQWasu55Tx4/gQkl4QiaFkXdo6vlbiGcEuA7+lEaAm83d
      OgJ4doE8TGsumwK5XC4sFsvtaMsdj8vl8owAX4DT6cRkMl39xDuMywQgyzJut/tK5057BGEy
      zr+HyxFF8a68N5cJQKVS4e/vf6VzPXj4QiYmJu7KfuNZA3iY1ngE4GFa4xGAh2nNNb8IMw60
      UVHThMklEp+WS2KkP4op08Lm4o/4yS9+T8NwNL/Z+ktCe0v5xU9e4kiDlv/vtz+k4a3/wpz/
      LX7wYK7H+Gia4HaaaSgvpXPEindgJDnZM9BPmZTKkpvO+lIc/mkkhZ178ywx1tNCWU0Lslcg
      2blZBOovMexGdtvpaKqhtXMIJ0qiU7JJjg68yLJWxjrQzOGGCYoKsvHWKnCax6itqaF/1Iyo
      9SUrL5fgqfDocC0CkCWMXaf5P//4Ml3mSatAhTqIx//i77i/IA6FYGbHOx/hV/Q4/zl/JtFq
      JSd3vUeb71x+9p/LSIyKIeXZF3EbIrnLk39ejuyit7maM+V1TNgl/IJjmTkrj3BfL1rPHscU
      kkpWdODtbuUfHZdpgO2bNuMMTCYm2JehpmJ+3zLECw8twDnSwe6dO2lqbSFw4QvnBTDUdIb3
      d1WQk5+DrbeKN99q4ZlnHyLwIqu/0dZyiqv7iIuKQC+Z2ffhmwze9yQL0kIBcNtG2b1pDzu7
      B0lJTcNbraLq1GE67L5EBgVgH2vnzTfqePyZx4nynRTXVQUgOyb4+NXfYE2+n19+/wHCdG72
      vvEfvPX678lK+Fva9r/K0cZh9NpaDuyXGB0pZdORZpw+Kg7uP4F3bAiW+mrMicHEhoDkslF5
      ZBv7S9oJSsjj/tWL8RWNHNuxlVONA6QUrWL5rBTU4m1MVnWNWPrrOVzRz5Ll6wnSiQy0N2My
      28DXC/PYMOMGx+1u4u1B1DFr9cOEBUx6STiSozj7+se43EU47XaSFz9CQfLuS9KkVpacIW3h
      gyzICgM5G+Xbr3CwcoAHC8LOP639Ewt5NPFCRslAqY8DDZ3nBdBRVcxwWDZZtsOTBQQluYvX
      kns+W2QBwx2/oGVgnCjfSbfQqwrAPNbL6dJhvvb6w0T4qRCQWf7EU2w5+gtqWvtQ2W24JAmn
      w4bVasPpVOJwuXE57VitNtySjYaThxhWzWRhkpZ9r/07L+3qoCA7ibGqYhpyC+nf8ve8fdpN
      WkIgb//b39D3t7/guYVXTrN5J+EwjuHWBxLgrUEUICw+FRmZ/vqTHCmpxFLfR/tpHUmzV1IY
      o6Wi+ADVPRPIEgTF5rC0KAP1eBvvnexlaRxs3l9DweoHSNcOsu1QKTanGxklWQtWkBXjh+y0
      UHZsL/VdRlAqYVxkwbc2EOGwUFG8j8ouIwqFioS8+cxNi7hq+28VSp03YVMGpLLbRl3pEbwD
      UlEqRLSRKaQD3d2XlnG6HKhUU91R0JCSPYNNVc2QH3beieLiVKqDHXUcLB0mfeU9ANiH69h3
      eozVX1vOptfOCeCCO43LbqKp4hgdjhBmhV1HmlS324LN6k+AnzhVmYBgMBAgy1glkfuf+jal
      u6uIeuLbPD03abKBtWVUxT/NDx8sAMapnKrLPtjG7jNtfP2HP2VDYQSS04Yk9/EX+8f4xr/8
      mOWZoRS/+x9sPHga08JEvppd4h8Pn5h0Qip28NkOI5kZyUSEhqDXqghNnc2CmQOMRRcwP2XS
      Pmag6SQt1mAeeuQ+lC4TZQd3UNoeyyw/MA+2clYOZ93jjxHko0N2qFl+fwLeWgWWkXb2nSgj
      NXIxxuaztLtjeODRLLQKG0f+sBuAofYKWqyhPPL4/YjmbnbtKGEgMYKQ2/leSpaxGQc4sPUj
      6izhPP7IYhRfMqqnpqXx8b6t+DgK8VJIdDa2Y7Je7hLZXbWP9zcXY5LUZBctISPKH3BxYt9x
      4uYvJ1x7+TWOffIKB6pGUBpCWbzyfgL11+ESqVDo8NKNMTImIQcrEJCRTUZGRQFvzfUlVLMY
      x7A4tMxIjUAhCig0XjA6SK9pgkMfvUHZNiXm/nasQig2uOMFIGr8WbL2Qbpb6mmoPsmJYhWL
      l91DTODl9vMjA/1EJi9EqxBAYSA1NZrdzV0U5GtRKr2ZvWgRgV4iICOplLSe2Edt+whOlxOj
      6Ivb7aKnvY/U/Hl4qRSAiFIx+UMO9fcTllCECgn0IcT6jdEzLBESdrs2+WRs4228/uu3CJ5z
      P88vyMVb/eVtic27lyd8qiipaQKtHwafAAK43N83MvMe/jJjMaahbg7s3MLOE96sTxrn5LA/
      zyWF4nK7kaRJawZJlhEFgaIH/4w599vob6/ls+2foTU8Tm7U5PTsqgLQ+4VTkBvA73/zPvE/
      2ECol5u97/6BEX0EafEhXJad+0swBIUS4GVh/8Ey0u7PwW0Zw6mJIiHQi4IVj7J+bjKybZzO
      rvE7vvOfQ6HSEpOaQ0xqDv11Rzh4toaY5VeIVDCZ7PZzxyb/UfmFTnV+QLJzZttmbKmLeHBu
      KILTwp69ewAZWZIRrxDpSnYYOX1wO52lkw8kQaknX+EEbjzj41dBto+y6Y33SHzoeyxPDfpC
      X+VLEJSEJeWyOikX3Bb2vvsaiXNXX/AhlWUkWUYQRARBgSE4hsXzcvnVoXp6vdSIpkZ+98ov
      QJaprCyn3/o26x97lLxYf0RRRKHSEpGUR2FsKc2tQ9cuAEHtw0PPfYfSf3yZF5/7DAEQVQE8
      9ud/R6zh+vZ1lL6xPLL+Hv7j9X/j2B8U6EPi+O4P/y/r1+fym5f/gQ9eBoVSQ1rhQ/zFX8Zy
      +QB4JyFjHh1g3KEiKMgPlSBhtbnx0k52Oo2XGrvZiiRLyBIEhoRSXVdLduwclC4TNbUdxGRk
      IzJ4abWSkzGbhvSYIBSSg4HeTsZtAEpCIv04XdVAUlEykmWCEaOZaCAoOoVkhYZ752ejElyM
      jwyjvAnpTr8qxr5WqiYE1lo6KC3tmDyoCyQ3JYbRngbaB8wMNXXR5famRGckKCoJb0c3JdWd
      +Af5M9RWRbc+l8fjfRBkBw2HNhK+6HFaD2+mbtSb2JggVLKD2jNlzCxcTWx+PH89azUAstvF
      b379M1Y9/nVifGHH+79FCMsm1E+HyzbM6XY3K+ZeMNu+Zn8A40Ab5dWNmJwi8TPySIo69x7A
      QXXxGXTJWcQHGQDorj3LuHcc6dGBgIO2igocIWmkhHkjS066GsqpbR/BEBxNTnYaXlhpqKyg
      fWAMpVcAM7IzCfPT3c6k5deAjGmwjeKTJQyO20EU8PINZ07RHMJ9tVhH2tmz+zATbgVpc1cx
      M0pDzenDVHSMIMkiYQm5LJqdhmqig42nB3jk3nOjhpvBhrPsPFGPUqsnJDiUUdMoq1asQS2N
      ULx3H53jTnS+vpiaR1j04lNEOkyUnThEfec4sqjANziCufMXEngTIjReKxdnibQbhyg9e4ax
      iwMK+USybE4mffUnqWy/EDMJQSQ6rYDUcC2tdZW09o7hHRJHTkYSerUC52Alb28s5dnvPY3b
      bqSxppauwTHcgorolExSooNRXrS2kGWJxoZaImJT8dYoMI/2UF3TyJjZhqj1IzMnh1A/L0+a
      1Lsd2WVk18Z9zHx8HSHXNMe4tdyqNKnDrXWM6cJIDL35uSI9aVLvMiw9NRxvNRPq64V5pAdL
      cDR/6q/ZAuPTbul39AjgLkITFEeqtYMRow1DaBLL42IR74Cn/92MRwB3EQq1jujEtMl4uR5u
      Ch5rUA/TmmsaAWS3g5GhYaxON6JKQ0BAABql4tr2d6+Ro++/RFPgMr6+LIvafb/nraYQ/uOF
      1TfvAjcBj0/wF+N2uydDst9lXN0YzmXl5NY3+OmvP6BzzILGJ5yHX/gh33qoCK+baN450FpN
      k2NyK9A3PImZouHmVX6TkCQJSZKufuI0RJblu/LeXFUAxqEmfv/7fXzrlfcoivLBONBMdZsD
      cNNdV86YVxwzYgNwWvo4eaKLgkUzcfXVUT2qJcjRQ8uQg5gZucyIDsBlHqG8qong8AAaapvw
      CopjZm4qXopLhxK11puI4CmDJdlJd0M1Va29+Eakkpseh1Yp4DQPU3q2nGGzC/+IRHIzEtAq
      PTM6D9fHNdgCadBprTTVtpDqk0p4dCbLEhSAlfKd71EZ9QRpsQGYR2r5r59t4qV5OZjLdvCP
      /1tCSrCSodFx0CXxT7/8MfGWdl7/5f/D7heBZWQIk1XJ6m//iBdWZl1yzabjH/HbzlyKMmNo
      ObmZn77yIaMucLlFVn3r//Dsvcls+vU/sfHMAKIoolTF88Nf/gPZAXeLAYWHO4WrPjJ1AbF8
      87nH2fvK3/L8C9/nX196nU7j1Ye6wNQF/OTXr/Pm//6YHF03+060IAMqr2Ae/6sf8847b/E3
      G2awZfshpC98FWdj98ZNhK/6Dm+99y4/fDyf4m27GHI5qSxpYMV3/4l3/vAOv/r37xHjfWcb
      Tni4M7mqAASFhvR7nuKj7Tv5yV8+irrjEH/3768xYvvyF8jegSH4aBToAuKYlRnNxPgEEqBQ
      eREc5Iuo9CJ17iw0Y+Nfks5tgMZWJ+qJdrZt2kzzoBuXuZ8xu5b7n1jLoZf/iiVLV/Pj9w5i
      ddx9808Pt5+rToGctjG6eyyER4cyc/E6YvzdfO0/S7BYHYCMw+7A7XJiHB3nYv8nye1CkmXs
      I12UN/Xjk+SDgBlkCcktITnttJRV4PTz/RKbH19CQxS4dQGkzkhGTE0mpVAmVOPGL38d/55z
      H8aRHt785U/YX7uCJwuDb8ItuR6cDPf0Y3JOBhITlRr8AwPx1qpAcjAybEQfEPgFaU6vgH2Q
      o6f6KFiQdYcbAn45sttBT2stx44cp3PUis43jPnLVpEZ7Y/bMU7J/l0cq+1EbQhj4YrVZMX4
      g+SgrbKYHQfPYhN0ZM27l0X5SZ/LTOOmrewoe46WYHSqyFywkkV5iWgUbjpryzhx+ixdgyY0
      fpEsWLaczGh/rKOd7N2xm5b+cRSGSO5bfz/xwfpr9wke7y/hX1/8LQHZqehVAqOd9cRnPoiP
      XodeJ1K8+X/5l9pQBjvr6SfqfLmOU1v453+uwdjfQt2QLy/NSUA0V2IzdvC7n/4z/sIENdWt
      LP/Wv3zJ20xfihbP4OcfbcTUkoBScmB1+/N8chgb/+VHjAbE462UaDfqWeJzOzyOJzi58xi6
      zHh0yNhNo5wy6VixZiHeshvj+ARq/8BrN0qWnIxPmLnbxzLnxBCVjT0U3vcUG4J0DDae5vWt
      20n91uN0lezj2KAf3/3BBsYbjvLG5t0kfP9RpO5qPj3UxCPf+D6B7j4++sNHVEZ8h7wIr6nO
      KuMaquWT/U2sfeYFYjVG3nvzfcqDnmFWrJWy8iHyVzzKQ8E+DDcd5A+fHiTqO6s5uuUzvPPW
      8r3Hwhms28sf3t3ON1/YQMCU48xVBRAYvYD/+x8qdh0pxWSXScp/kQfXFKETYe7jP+Br8keM
      aqJ4+OkNlB5sw1shYgYCY5OJDvTBEbOGb69eRYq/EosZVJoA4pNjkE12nl//Xe6dnYwAJBUu
      Q+s7mQMzLG0eK8Im/1/0yF/jG7WPfWfqEbyCmLN4GYmGYJ798++y49BZxuwiz/39N1mUfHui
      knkZwsidNWsqR5iNU599RNswZAaLKGQlCiXgMtHaMY7By05DUxdqvwgyZiTipRRAdjPY2URD
      ex+i6GTCdu7ZLzPa3UhNSx/awFiyUqNRK2C0qx13YBTCUCu1Q1CUm8xoTwN1Lf1IKj1JaemE
      +f0RzUCvgNo/gpWrLrhk+gQFI7pqkLFSW9XCwvt+gEYhEpKWz8xD/01Fv4x3XT2xuQuI9FED
      MSyclcC+sibywrPO+wQ0l50hcvZSkgJ1gI75M6Mprm9nVlwO9z92wcQ5ICwchbMXi9XOgBM2
      pEShUohEZKwivvhntPaPExB7rf4AooqYrAU8n7Xg8i9qiOSxF35w/u+c1MmcTv2AISKT5/7s
      wcvKKDQ+LNnwTbJ9Lz2efe9jZE/9P65gNXHnC3iRuWANmQvWXHJ++Ix5PDtj3tWa/0dDltwY
      h7oZdvsT7Q1gpaWsEW1yNF6OMU4cPEBQWibpySn0N1RQ2ezNrNQwuutOUd4N2ZmpCOZuOgcs
      IMuMtpVyuHac7Jw0LB3lHC2DRTOjGGqupbt3kIneYWKzZuIcaeZIeS85uWkobaP0D43fdgFc
      QGakq4bt2/aTU7QOlcLCxIgXKYYpX01BR0ioTOuAEUxmNCEXPOm0gf7Yq4cvqktibNiOX/qF
      HAYGXz/GuoYuupybsf42Nm/cRsqyxwjxUqKwW2jtGyUrNgCcNnRoGTKZgWsUwFdBodKi117u
      kCqISnQ6Pco/Ifutc2lS1ZILUeNLSm4hoVeYwPuEJlM0Nw+dABprP1XDE0AAra0DZM1bTZSf
      CqwS+roOQKa+sYPUvKXEh/tAqIauLScYyYgCbHT2OVh1zz0E6dXYegdxq/UE+Pmh04QQeYdE
      05AlJ+1lB/n0QB15y9ayICsGURhAli9tnyAISOct8oWLPwD50iDNn7fcFwQBWZ6cMMpuJ20V
      B/hwVy0L1j1GQWokKkHmvuWL2Lz1D+xzuPAOiEQed5AsXtj7uSUCSFr+PV5Zfvlxr4gs/vWl
      H9+KS942zqdJldyM9LVw6swJ/AJWE+P7+TMvpCgVzkcrGMNqCcTP93MPCxlGR3roO3uczqkV
      dL9xAIvVBWjJmV1I0FTQKG1YCtm9J9m/axui0pvkmbNJi/S7zc5EblpObOaDM26e/+63CfY6
      9/0MBATbMZqcYFCBbGVwQCZstg+GIR8GTBfC8tuHx9CEXuxfIBIYrKPTbD1/xDgxhr9PPAD1
      Rz5me4OCr33/e4R5n+vWAsHJs3kuefbU3zJb3v4vgn0MF9Xq4eYgKgiISCQpSKK191r9pPWo
      1GNYrJ9b9grgExBBckYOBQUFFBQUsHbdQ0RMLfQv3jOQUZGYN581a9awpCiF9lOljN1mcyXn
      SDs7To7yzPMPEXTJTEBLYkoUJ46dwCFJjLRWU+GOJStUICoxjo7KUwyandiNfZyuaCczOxkE
      MI92Ygdi07PoOnuUjnEbLusIZ6r7SUqJAecAB073sX7D2os6P4DE+FA/E2YHkttBd+VueuR0
      4kIvTKM85tA3iNtlZ2Js0sXPNtZDVbud7AwDcC3JInSEBkFpaQ2zZkQw0FTJoFENCCTHRnC6
      tZ2ArBSULiPtXYMkZeVdVoN5oJ36PgvRUWG4x8eRdHrUt3kWZDEZGRmu4/3//uWFg6GZvPj4
      MuIK7iF9+2e88vIplBo/5q9Yh0EEYrJZnjPIu//zK1yoSC68l5woHbhGOLPtU+Y89SLq8GxW
      5/ey5Y1fY3OLJBYuJyfGH8yVdLT3sPH1/zq/beobls4DD6/ANdzK1n0bGbe6MITFs2bdanwu
      moN7XCKvg8tzhFmoPn6WHvOkFaRKayBhRiYxQd6AjY7aPoJmxKFzTtDUbiQ2KRIVYB0bYMCq
      IDY8ENllo6WmnJYBMzGJyQgukfjkSFS46W+ppaa1D0mpJzUzi8hAHaPtLbiC4wjRTT27ZCdd
      jdU0dg4h6gLJzs3E3+uPHxDoVuUIG6o+zP4uPY+syL/pdXvSpF4nniR5X8ytEoDb6UASFagU
      N/89jydNqoc7HoVKfUuDKnsWwR6mNR4BeJjWeKZA14EgCOcjFHu4lLv13ngEcB2oVKq7MhXo
      HwOFQoGX151ignHteKZAHqY1HgF4mNZ4BOBhWuMRgIdpjWcRfAfhthkZtgmE+P0pRLeQcdtN
      tHb2Exodj+GcX6gsYRrqpq61B7VPKMmJMXipxEvK9TZXMiiEkp0QelmtkstOb3sz3UMmdAGh
      JMZFny/vtE3Q1tRPZGYy5z0LZDeDnc20940haHxITkvG5yIfVc8IcBNwmtrZ+NoHNI5Yrn7y
      l+AYauZ49VRCCWMvR45VcmM13iZkNwNNpbz26pu88/4faBu+4C0+3lfDG7//mIGJCWqOfsb7
      u8sucgGVcU008+Hvfs9vtxZfsd6qQ5vZcrSSCaORlpoaukcmjQ57G4p5543XePWl9+k5f75E
      T/k+Pth1kqHxCQabTvLW+zsZsV24omcEuGFkBmsr0IR7U1XbS2JR4s15qhjCWVB0821r/ii4
      LPSOwkPf/A5nPvvNRR+4qTq0i/BFj7F6ViSSJZP/ffkD2pfOJN4LZJeNvZt3kL58BSMtl6eY
      dQyWsr9Bzde/uQ6/z5m8Do+5WPP0MwSOfXzR5ezsO1DNwqefJztoclT95NWfUds1m6KkIMAj
      gBtGdoxR1alk/uoCTmw5xbA9gWCNAOPtvLe/ggg9dA9MoPaPZNGieQR7qzm14y1GlJGMD/Xh
      VujJnbeY9KjPJYCwdLHjyABLVsxEYxni4OGj9I6YkWWRpPzF5KeGo+w9w2snJ4jXGukbMaEO
      SmDVklnoVDDYWsmR0zXYXAK+cdmsnjuDobYKjp6uweoWCE3IYl5+BjrBwskDe2kaNCMIIom5
      iymYEXZj9jcqAzmFM6/wwQTdnZC+fNJfWPQKIifaSF2nnfgUNQONx+lQZvNwtJKjLSOfKyvR
      UlJOQFIunZUnKTc5CY5JISU2BKUokDlrAZflqxOVxIfpaGrsJtUvGcnYzZBDR6bPBddLjwBu
      EPPIIHb/IAK0QUSGuOnpmyA41hckN3a3ivTZi1hoUNJUcogzla2smvv/t3dmwVFd6R3/3d5b
      3eputZZuSa0FSSAhhJAQCBD7NpjF2IPx2PHYztiuslNxZpJUJg95yEuqUvMwVamkkpmqWTKT
      2GPPjDHGBmMMYh8LCZDAIBAghPbW3mpJvW/35qGFhEE4gyVhY+7v7W7nnL59vnvOvef7vn8h
      kXCY5HnlbN6UxFjnJY7UN5KXeVfMtRQlGIzEcyYp9SxcsYk1iQak4DBHjpxiOPtp0sQwQVFL
      yYplrEvUUHvwID2eADnaMWrq26l6Yhc2o5JRTwAC/Zw5386iTU+TZxY4f/IITZ3pLE7spjmU
      zrPfW4JaDDDiFWcxmixMwK9Cc9tpX1CjT1DQ6fUT8Q5x4nQna5/7Pprh+imulXC7hmnpu0xG
      RT46RYRTe9+ia/NzbFmUPXV1ChVLNm/i/fc/4qfHAyBoWLrpaXJTJhfsZAOYJoN9TlLtxQgI
      ZGak09DjZFFOPB5SnZhMqjl+s7PmzKOxoQMoRKXVk5psRSlAUs5cHOePMhCC+2U1ErR6wp2f
      c/hUJ8GoyIB7jJJg3C3bYs8mzWIAYiTqdEREkeBAG9hLsJl1KIAki5rR1utE7fnkj0u45uZm
      8HnfAIp0Gwkj1VSfDLNw4UJy0kyzaABKNFqR2MQUPEYkLKLX6bh65iBCYSWFFg2+ux/+8buA
      RqunfO0TbFoSnxousCn5ec3l+xqAFA3zp+pqTKVb+YfKeUij7bz7+2PccNhYmBGXYJUNYDqI
      Pm42NtOFk1sXBCQxiDuUyqplxVPIvEowVdeSJKQ7FM2nqITuhhOcHzOzZt1m9CqBc6cOfmmz
      JAkUKuVd+0R6Gk/zTvfl+LYYw1a8GhJs7Ny9i4HeDq7VHeJzQxFPrC9DNys+yFayckVutQ8y
      f1EqYsjF1S4jVU/Crdo+bvR+yE9q9xMZ66PRGeIngRA/fPMZjIIACOQV53G07gqBxenEVWW/
      3P8oFgnS2O3i+zvy0auUkJzPAls1zW2DsgFMH4nwYBu+jBW8vLEUNYAU4fKRD2nuC1Guj3ey
      mCghSBG6O9owWePaLpIUF3KWJIGRrlb69alU6iB2n3rcriC5CxaTZNQT9I7gC355UI4uNQfp
      8hVG/Q4sOgWBUIREaxqOnBLWbarCqlMRCngJSWpiIT/+qAJ7znzsmZkc/rgab7gM3TTcesRI
      kP7+PgJhkQHXKHS1YwiayMjNoHBJFf+zfx9zDBsYbjqDL7eCfKOeea/9mK3j1/taz/DTEy7+
      6bUnQYrSdnY/Kct2kTR3NUW1v2H/URMVeYmcP3mZisqdQJieNidBycegx42ztRWVWktaajJl
      jkQ+PnyalYvmEB3rprYtxBOrJj+vygbwVZGgo6WDtKwlTLjHCWqyCjI43tTCogo9XudV9r3f
      QVSUSLBmsXpNPINByDPEqU8/4JwyhlJjpmLVajRAYMqKFOSW5HDo5CfcUGpINCczGvry3HEa
      o52Kue18+uEeBIUKg2M+26uKWZzdyeG9exBUCpRqA4VLVlBkClD72XlGffFUl+nzV2KeZl5G
      MezjRmMDfaMR1NZ83G2XONdmZVO2ndT8Sl77roHj5xsw2Ip5cUv5PS/cmuQ5bF0en+bERm5y
      os7Fq8sAdSLbX/hLLtbVUH+hi7nrdlM2Lx0Y5Xr9eQZiIobSbHrPnWPQmMyqNevY8NwbXK+v
      4crFetBbee71N8iwTP5AOSTyqyJJSOPTlztTO0qSiCSBMNrOu2cHeX5zBRICCoViIh1K3afv
      kFb5PNkmCUGhQDHuSixJUnz6ohAmldEVCoRx8QlRAoVCAUjjZUmIkhA/kck0JgAADZ9JREFU
      f1xJnjvKEkVxvDzFRCaJ+L644rpCEW9PXMw7fu3tdj4osyWTOnjzMoP6TIodM68VKcukTofx
      jnZ3VxGEyc6GoECpvPcWC4BCoUR116G4T/1k+YrJREIolMo71hcmTmIyD5aAcEdSLEEQUE4R
      RzvVPoWg/MYuiabOLb3vx4GZQDaA2SIhhWULppZ5mlOyDH3ClIdkHjKyAcwWWhMFjqkPpTkK
      Hm5bZO7LN3Tgk5F5OMgjwAMQjUaJxab+WPm4E4vFCIVCX3czHhjZAB4AURRlA7gPt9c2HjXk
      KZDMY41sADKPNbIByDzWyAYg81gjvwRPixge9yihcf9epUZHosGASvnoZUh7OHg48e4eLvS6
      x7dFAl4/lc+8yXdKUoj4hqk7+SkNN/rQJTvYtHU7+WmTkqZIUTqvnONYTT3uoED+opWsryrF
      pFXhGeqkvuYzLrX2oTKksnLjFkrzUiHspeH0Ec5d7SSqMVG1YSvl89JRK/5MlUiZL2OEU3sP
      ocjLQAf4xoZJyFrMhoq8r1mi6JtKIutfeJX141ticJB3f/EODkcSiD5q9+9lIHsdf/23+YRH
      hxgTv/hVyd/dwAc1XTz7/OukJ8Lpvb/l01od31s3n/pTx9Ev2MybO9IJDjTx1u//iPm1vyLw
      2T6uqUp45c2nUQf7ePvXe9AYX6HMIbtDzwgGcxblG9ZikSRiwSGO7q+hpySP1NgIne2djPjD
      GFMc5GXZ0ChhtK+fkAqGnD2EBAMFhfkkauN/g3+kj9b2HqIaM0WFeeiUAlHvIP1hIxZhhA7n
      KNlFRRi/Jf+a89oFxuylzLco8XRc44qQwxtVBSgFAY017Z6YCt9QL6r0AtIt8UCfwsI53LgV
      V5Jc8/RLKBRKBAHUaTmkaIP4/GH6nB7yt+ZhUCtBnUl+mo5hjw+QDWBmEQQUWj2JGojEYGSw
      B29UTZLVQO/1s4xGq1hWkIzz+lmu+i2UzstEM9zF8dMjbFxXiT7Sy7Fj9TiKitAGujlZE2D9
      ygXEBm9ytkuLYbgDfeb8SfnYR52Yj0uXblKx9mUEwDXYizjmZf87v6K134MxNY8t27eQY02Y
      cBC0Fi4j5cLHHK9Tk2MWqb/Yw+LVO4Hbjn8SYd8Inx36IwHHGgrSEnCsK+O9Y0cxVC5E7e2m
      JWZjhyNlohmyAcwUkkhfcyPtoplyPehzikkbP5RjDHOgeRAKkgEjC5eWU5hqAubgP/4JPcNe
      9G31GBaspqwoCaQ8eg8ewOWdi0WM0nbDya6nt5ObmvAtmVpJuFtquSUUsjEn/iSOhAMEQhqq
      nnuJp4wqWs4d5r2PqvnxKzu57XOr1BhIMevoab3GqBqCQgImo3aiVE9fM394aw+Gxdt4ds0i
      9EqQzFYM0k2amxoRQn4SzFnoNJMesbIBTJPbOsFaQUGyYy5P7qhEL0DPjfM0XO8iFI4hhUYZ
      SbpX4A6UmE0mggEvnn4/Y/6r1A7HP8wNDvnJCIWxKFQUVqwiN0X/Len88ZiJEycuUbX11fHQ
      RjBZUkhIA9t4DHXu/HKC5z+5I5JU5Gr1HlzpG3ipKhcAf2c9vzh0ijk/2IH3Vg2/3XeRzS/8
      iIWZifGYiIifPe9Vs+KF15hrjbvfNh7+HccbWtlVFXdIlA1gmkzoBH9hb4Dm607K1m7HYdYi
      DTezt3EKPxkpxpjXhyXLgGjSkWjNIDs5rv+bnZ2HNSkBfCAoHs3c+1MjEepvoC2ax8b0STHl
      lKx5GI59zKXeJSy0GXD1dWA0poAAYb8bSWtGpVbicbnwR7JJUEm4BoeIokBBlJPHa1m24yUW
      Ou4M6hfQKiMMuEbJS0pAiAYYdI0gmOURYJZRAWECwSAhpYeLdecZUxSPH4swNuolZNIw1HqB
      nkgK85MTUZbkc/lMF5o5lZjVYa41tqC1JGH4smoeRcQg9YdrKdn6GibN5DKUMjGTHduXsO/9
      X1MdFtEk2PjOzp0IhLl56j0cm9+gYMV22g5+zC//6xRRScSQmMm2bdtQ4aHt6jWuDL3N2fGE
      WWqznZ3f3c2WHZv5+NO9nN0fRhIEUueUs6N00k9dDol8AO5VifRx8/M+HGX53B1D7h/u4ty5
      S3gEM8sX5+McFSgrsNF08hDXPSIqUSTRPpfli4smclsOdzVRf7mFgKhm7qJKCh1WYu52WoLJ
      FGeaHtrv/CrMlkqkv6ue/XVenn923YyXLcukPiDTl0kVaTp5AsWCpRSlfrM79IMyWwYQDfkI
      ShqMuplX5pFlUr8GlCr1eBC7zJ+DSmuYIsfSDJY/i2XL3IOCwlVrvu5GyNyB7Awn81gjjwAP
      wKMqBfqweBTvjWwAD4Ask3p/VCqVLJMqI/OoIRuAzGONbAAyjzWyAcg81sgvwd90JAmvx4PG
      YESj/BY9r8QwvZ1OMKeRnhT3eJJEkTFXL/3DXlQ6I/Z0O3qN8l4vWEnE4+pjOKgiIyMNtQIk
      McrIYB+Doz4UGgPpGXYMmnj3Dnpc9PS5ENUGsrIy0N4RsiobwHSQJLyuTmrPnGPAF8OeW0Ll
      4qKJCK+ZqSPKxZoacleuI8ukpv3iGcIZy5ln08xcHQ8ZSZLwdJznZz97j5SK5/i7v6gCSWK4
      pYa3D10hMyMNMRYjt3wNlYX2e66Phjzsf/8/uNTs4O//9Yek6yXqP/0dDT0CyRYj4REno/oS
      Xn5+PYZQD+/+9x8gxYFytJNY9iZe2FGGTpBjgqdNaLiFT45dY/l3drAxUUFn02VanS4WTSHw
      PDOoyC3/Fqwki34OHrrIqk0r6BqPj495O9jzyXV2v/4GjoQvGemkKC2f7UdVvBWH88btnaQV
      ruLVJwqIO5iGeP9nP+FG7woUZz9EveS7vLgqD4EI7/znT2nqzmdxlhwSOW38rn7E5GwyLXoU
      AuQuXMJtz8L60wfJWbKd1AQI9l3jcEuMp1bO51LNCcYENYPdPQQlPeVr1lGYYUEx0MgfGtyk
      xFz0jwaxzy1n5eJ56L7QF2K0150mNK+KQqsG/3A3p07U4A5DSnYxq5eXopNC3LxUy4XmHkRB
      jaO4kjWlMy9c8ZWRonTUfEy4cCMF5pYJAxhsb0GyZyP23uCSN0KCJY3cLNtE9obbjHVd5WSX
      nhdezOWt6tsGoCAnPx7gIkkSoz1X6A+ms9QgUdcTo3R12vg0Sk1+uo3efjfIBjB9TJnFlEku
      Ltce4YYzSNmKVczNSEIpgM8zQnRcyUiMBBjxxDMc+MfcCI6lbH9mNRF3N5/V12E2bCAj4sfl
      E9iydTtmTZSLf6rm81YrywuSvlBnyDdGICoR9rr405kGClduIztZTcflM9Q0tLN6noL6myNs
      2rkLsxBmyDMd79UZRpLoajxNbb+Np3bNZ+RSy8Qhz9goWsHKyNAAzuEAOvcw9Y1NPL99fXyF
      WZIIu5o5eKaL9Vs2YlKP3lW0iKujkf1HLrFoWTFrd+8m2whHYzG0qkkj0ico8Xkmg5NkA5gG
      SoOVokIrklRAobuL6sMH6C3ewPpFWfe/SGUk05GKVqVAm5pNmvEKI94QGYDFlkWSQQNoKMpL
      52i/B0iaspiQf4iuzgEETR0tgBh10z+qRqyoYvWCbk4c+ACV1kzuwgoybFPqUz58fJ28+797
      YO4KDrz7Nm5nE80DBg5k6imzmBmJhCldtoVSIOzu4l9+cwBp2/p4ULwU49QHb3FhKJ1oxM05
      3Fxpu4Hmo4/Ysf0p1M6T/GrfFXa+/AolmePCJGIIm07NWHAyvcrISAhL1mSYkWwAXxkJUZQm
      /IMSrNmsXl5CdbMT7jaA+0VciCHGxoKkJGjBf8fpksTQkBuL6T4C0IBabSQxzcaisrLxzi2g
      1hnQKpQ4SlbwTNFifGN9nKmupz9nB/ZvggeHzs4P/vGfCUfiHdJ5VSTSlsTSBXkka9JIOvo+
      dR1LWZploq/rJiaTHQQIegYQ9aks3/0jinzh8cKcdH8eYumySqz6CPuqa1m7+3UWZN6hyiOo
      KV2Uyr6TF5j/zCpUvm6ahsI8kSlnhZgRhtsv09gTo6gonwRVlGvXO7A7lgKgBPoH+tEFIpw/
      c44xTVn8opifocFhrMoQzqY6vMYibGYN+MHnHsQ1YkH09nHuVohV26z3rVubaCU7IcytwSDz
      HSb8A52095mYn6XjeouTnIJ8hECAsFqD9hvx+AdUWmz2jMlttx2b34o92QyYeGrXGvZ99BuO
      +yIkJGWz86mdCFKApmPvUbDjbzBZbSTecUtsqTYy0tPRqdz0tLTQ9PtfcXpchV5jyWDX955n
      ztJtLHTu4ef/VksMNSuefIGspMlMEnJE2DSQxDDdN69yrcVJCBXZhWUsyLejEsA71EF9w1UC
      ykRKi7IYCKgpL7BTe+gD+kU9KkkgKbuIpSV5aJQCOM/y70d7KUpRIWktLFm+jBSjGkGK0dHS
      iiUrF7NOyVBrM1FbAXaDCqI+LtbV0u0OYEjOYmlFKYkakf62a1y81oGks1C6uILMpNl3Upst
      lUhfex37zgd48dn1///JD4ggCHJI5ENFilFbfQT7kjXMsd4V7u48yzutNr6/Ovdradp0mS0D
      iEVCRCQlOs3MT1ZkmdSvAa1ej2qqkEilFqNO/jvuRqnW3iOkPZPII4DMjDBbI8BsIgiC8C1y
      LpGReXDkMfcBkCQJecCcGkmSEEXx627GA/N//+lAPNQ1CvUAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Filters_Sliders' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='IfThen CalcField' width='192'>
      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
      0Ku52381j7MAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
