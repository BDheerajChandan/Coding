
=======================================================================================================================================================================
									R Introduction
=======================================================================================================================================================================

R Programming
--------------
- For R Programming we need to install Rstudio and R
- It is a programming language.
- It is used for statistical computing 
- It is used for graphical presentation to analyze and visualize data.
- It is commonly used to analyze and visualize data.


Why to use :
------------
- It is open source and free
- It has large community support
- It has many packages(library functions)
- Good resource for data analysis, data visulaization, Data Science, ML(Machine Learning)
- Provides statistical analysis[like: statistical tests, classification, Clustering and data reduction]
- Easy to plot pie charts, Histogram, Box plot, Scatter plot, etc.. .


R Basics
----------

- Single line comments can be given by '#'
- Multiline comment by insert '#' for each line 

--------------------------------------------
# WAP in R to print "Hello Wdrld"
print("Hello World")
--------------------------------------------
# WAP in R to print first 10 natural numbers
# Using for loop
for(<variable> in 1:10)
{
	print(<variable>)
}


Steps: 
------
1. Download and install RStudio and R from [ https://cran.rstudio.com/ ]
2. Launch RStudio 
3. Setup the Workspace panes
4. Write "Hello World" or print("Hello World")
5. Click on Run button available on top(Run the current line or selection)
6. Save it as <File_Name>.r
7. Alwaya open with RStudio

R Coding
----------
"Hello WOrld"
5+5
print("Hi")
print(5+5)
plot(1:10)

=======================================================================================================================================================================
									Variables
=======================================================================================================================================================================
- Variables are the temperory memory location where values are stored and that can be changed during execution of a program.
- Containers for storing data values.
- To assign a value we use '<-' or '='
	<VariableName_1> <- <Value_1>
	<VariableName_2> <- <Value_2>
	<VariableName_3> = <Value_3>
	<VariableName_4> = <Value_4>

- To get values use print() function
	print(VariableName_1)
	print(VariableName_2)
	print(VariableName_3)
	print(VariableName_4)

- For concatenating/join two or more elements we can use ',' or paste() function.
	<VariableName_1> <- <Value_1>
	<VariableName_2> = <Value_2>
	paste(<VariableName_1>,<VariableName_2>)
	paste(<VariableName_1>,<VariableName_2>,...,<VariableName_n>)

- We can assign a value to multiple variables(Assigning >1 variable with same value)
	<VariableName_1> <- <VariableName_2> <- <VariableName_3> <- 10
	<VariableName_4> = <VariableName_5> = <VariableName_6> = "Dheeraj"

- Limitations and Rules :
	1. Must start with a letter and can have combination of letters(a-z;A-Z), digits(0-9), periods(.), underscore(_). 
	2. If starts with period(.), it cannot be followed by a digit.
	3. Cannot starts with a number or underscore
	4. Varible names are case sensitive
	5. Reserved or special words cannot be used


=======================================================================================================================================================================
									Data Types
=======================================================================================================================================================================

- Variables stores different types of data.
- There are 5 different datatypes : 
	numeric : 10.5 ,5
	integer : 1L, 55L (Where, 'L' declares as an integer)
	complex : 9+3i (Where, 'i' indicates as an imaginary part)
	character (String) : "k", "Hello World" ,"FLASE", "11.5"
	logical (Boolean) : TRUE , FALSE
- To check type of data we can use class() function
	<VariableName_1> <- <Value_1>
	<VariableName_2> = <Value_1>
	class(<VariableName_1>)
	class(<VariableName_2>)

Numbers
-------
- 3 number types : 
	numeric : <VariableName_1> <- 10.9 ;Contains any number with or without a decimal.
	integer : <VariableName_1> <- 10L ;Numeric data without decimals.We use the letter 'L' after the integer value.
	complex : <VariableName_1> <- 2+3i ; A value having an imaginary number.

- Type conversions can be happened by using the functions : 
	as.numeric() -  Convert to numeric
	as.integer() - Convert to integer
	as.complex() - Convert to complex


R Math
-------
- print(10+3)
  a<-10
  b=30
  Sum_res<- a+b
  Diff_res<- a-b
  paste("Sum result : ",Sum_res)
  paste("Difference result : ",Diff_res)

- min() : function used to find the lowest number in a set. min(<value1>,<value2>,...,<valuen>)
- max() : function used to find the highest number in a set. max(<value1>,<value2>,...,<valuen>)
- sqrt() : It returns the square root of a number. sqrt(<value_1>)
- abs() : It returns the absolute (positive) value of a number. abs(-<value_1>)
- ceiling() : It rounds a number upwards to its nearest integer. ceiling(<value_1>)
- floor() : It rounds a number downwards to its nearest integer. floor(<value_1>)



Strings
--------
- It is used for storing text.
- It is surrounded by either single('') or double("") quotation marks.
- Assinging a string value : <Variable_1> <- "<value_1"
- Assinging a multiline string value : <Variable_2> <- "....
							....
							.... "
- R adds a "\n" at the end of each line break which is called an escape character.
- cat() : It is used when if you want the line breaks to be inserted at the same position.
- nchar() : It is used to find the number of characters in a string
- grepl() : It is to check if a character or a sequence of characters are present in a string. To check existance of a string in a string
- paste() : To concatenate two or more string values.

- R Escape Characters : It is a backslash '\' followed by the character you want to insert.
	s<- "<value_1> \"<value_2>\" <value_3>"
	print(s)

	Code  |  Result
	--------------------------
	\\    |  Backslash
	\n    |  New Line
	\r    |  Carriage Return
	\t    |  Tab
	\b    |  Backspace


Booleans
---------
- In R we get one of two answers either TRUE or FALSE.
- We can use relational operators.
	10 > 9    # TRUE because 10 is greater than 9
	10 == 9   # FALSE because 10 is not equal to 9
	10 < 9    # FALSE because 10 is greater than 9


=====================================================================================================================================================================
											Operators
=====================================================================================================================================================================
- It is used to perform operations on variables and values.
- R has 5 types of operators :-
	Arithmetic operators : 	+ 
			  	-
				* 
				/ 
				^ 
				%% 
				%/%
	Assignment operators : 	<- 
				<<- 
				-> 
				->>
				=
	Comparison operators : 	== 
				!=
				< 
				> 
				<= 
				>=
	Logical operators : 	& 
				&& 
				| 
				|| 
				!
	Miscellaneous operators : 	: 
					%in% 
					%*%


=====================================================================================================================================================================
									Conditional Statements
=====================================================================================================================================================================
- If statement

if(condition)
{
	# statements
}

<VariableName_1> <- <Value_1>
<VariableName_2>  <- <Value_2>
if (<VariableName_1> > <VariableName_2>) 
{
	print("<VariableName_1> is greater than <VariableName_2>")
}


- If Else statement
if(condition)
{
	# TRUE statements
}else{
	# FALSE statements
}

- Else If statement
if(condition_1)
{
	# statements
}else if(condition_2)
{
	# statements
}..else if(condition_n)
{
	# statements
}else{
	# statements
}

- Nested if statement : if statement is in another if statement
if(condition_1)
{
	# TRUE statements
	if(condition_2)
	{
		# TRUE statements
	}else{
		# FALSE statements
	}
}else{
	# FALSE statements
	if(condition_3)
	{
		# TRUE statements
	}else{
		# FALSE statements
	}
}

- AND(&) is a logical and operator
- OR(|) is a logical or operator
- NOT(!) is a logical not operator


=====================================================================================================================================================================
										LOOPS
=====================================================================================================================================================================

- Loops can execute a block of code which executes a statement within a block until the condition is met.
- Loops can execute a block of code as long as a specified condition is reached.
- R has two loop : while and for loops

while loop
-----------
- It can execute a set of statements as long as a condition is TRUE.
-
	Initialization
	while(condition)
	{
		# Statements
		Updation
	}

for loop
-----------
- It can execute a set of statements as long as a condition is TRUE.
-
	for (<Varible> in <range_1:range_n>)
	{
		# Statements
	}

	Initialization <Varible_1> 
	for (<Varible_2> in <Varible_1>)
	{
		# Statements
	}

	dice <- 1:6
	for(x in dice) 
	{
		print(x)
	}


- Break : It is a statement where we can stop the loop before it has looped through all the items.
- Next : It is a statement where we can skip an iteration without terminating the loop.

- Placing a loop inside another loop. This is called a nested loop.
	adj <- list("red", "big", "tasty")	
	fruits <- list("apple", "banana", "cherry")
  	for (x in adj) 
	{
    		for (y in fruits) 
		{
 			print(paste(x, y))
  		}
	}

========================================================
			R Functions
========================================================


Without arguments :
-----------------
- A function is a block of code which only runs when it is called.
- It reduce complexity of code
- A function can return data as a result.
- <FunctionRefrence> <- <FunctionName>()
  {
	# Statements
  }
  <FunctionRefrence>()


With arguments :
-----------------
- We can pass data into a function which is known as parameters.
	<FunctionRefrence> <- <FunctionName>(<VariableName_1>)
  	{
		# Statements
  	}
  	<FunctionRefrence>(<Value_1>)
  	<FunctionRefrence>(<Value_2>)
  	..
  	..
  	<FunctionRefrence>(<Value_n>)
- <FunctionRefrence> <- <FunctionName>(<VariableName_1>,<VariableName_2>)
  {
	# Statements
  }
  <FunctionRefrence>(<Value_1>,<Value_2>)

- <FunctionRefrence> <- <FunctionName>(<VariableName_1>=<Value_1>,<VariableName_2>=<Value_2>)
  {
	# Statements
  }
  <FunctionRefrence>(<Value_3>)

- <FunctionRefrence> <- <FunctionName>(<VariableName_1>=<Value_1>)
  {
	# Statements
  }
  <FunctionRefrence>(<Value_2>)
  <FunctionRefrence>()

- <FunctionRefrence> <- <FunctionName>(<VariableName_1>)
  {
	# Return Statement
  }
  <FunctionRefrence>(<Value_1>)
  print(<FunctionRefrence>(<Value_2>))

- The terms "parameter" and "argument" means the same where information that are passed into a function.
- Parameter : It is listed inside the paranthesis in the function definition.
- Argument : It is the value that is sent to the function when it is called.

Nested Functions
-----------------
- Writing a function in another function.
- In R two ways to create a nested function : 
	1. Call a function within another function.
	2. Write a function within a function.
- <FunctionRefrence> <- <FunctionName>(<VariableName_1>)
  {
	# Return Statements
  }
  <FunctionRefrence>(<FunctionRefrence>(<Value_2>),<FunctionRefrence>(<Value_3>))

- <FunctionRefrence_1> <- <FunctionName>(<VariableName_1>)
  {
  	<FunctionRefrence_2> <- <FunctionName>(<VariableName_2>)
	{
		# Return Statements
  	}
  	return (<FunctionRefrence_2>)
  }
  output <- <FunctionRefrence_1>(3) # To call the Outer_func
  output(5)

Recursion Functions
--------------------
- It is a function which calls itself.Function calls same function.
- # Recurssion program for sum of natural numbers
  <FunctionRefrence> <- <FunctionName>(<VariableName_1>)
  {
	# Return Statements: <Value_1>+<FunctionRefrence>(<Value_1>-1)
  }
  <FunctionRefrence>(<FunctionRefrence>(<Value_2>)

- Global variables : It is a Variables that are created outside of a function are known as global variables.
	<VariableName_1> <- <Value_1> # Global variable
	<FunctionRefrence> <- <FunctionName>(<VariableName_1>)
  	{
		# Return Statements
  	}
	<FunctionRefrence>(<VariableName_1>)
- To create a global variable inside a function we can use the global assignment operator '<<-'
	<VariableName_1> <- <Value_1> # Global variable
	<FunctionRefrence> <- <FunctionName>()
  	{
		<VariableName_1> <<- <Value_2> # Global variable
		# Return Statements
  	}
	<FunctionRefrence>()
	print(<VariableName_1>)
	


=======================================================================================================================================================================
									R Data Structures
=======================================================================================================================================================================

Vectors :
---------

- List of items that are of the same type.
- To combine list of items to a vector we use c() function and items separated by comas.
- Example : <Vector_variable_Name> <- c(<value_1>,<value_2>,...,<value_n>)
	say, letters <- c("Dheeraj","Chandan","Ramesh")
	     numbers <- c(13, 3, 5, 7, 20, 2)
- values can be string or a numerical values.

- Create a vector with numerical integer values : <VectorVariable> <- <value1>:<value2>
	Say, numbers <- 1:10

- To create a step size we use seq() :
	numbers <- seq(from=0,to=100,by=20)

- Create a vector with numerical decimal values : <VectorVariable> <- <value1>:<value2>
	Say, numbers <- 1.5:6.3
  	Here, a sequence where the last element is not used

- Create a vector with boolean values : <VectorVariable> <- c(<Boolvalue1>,<Boolvalue2>...<Boolvaluen>)
	say, bool_value <- c(TRUE,FALSE,...,TRUE)

- To find length of a vector we use length() function : length(<VectorVariable>)
	say, length(bool_value)

- To sort a vector items alphabatically or numerically we use sort() function : sort(<VectorVariable>)
	say, sort(numbers), sort(letters)

- To access first vector element we use indexing within '[]'
	example : <VectorVariable>[<index1>]
	say, numbers[1]

- To access multiple vector element we use indexes separated by comas within '[]'
	example : <VectorVariable>[c(<index1>,<index2>)]
	say, numbers[c(1,3)]

- To access vector elements except first element we use -ve indexing within '[]'
	example : <VectorVariable>[-<index1>]
	say, letters[c(-1)]

- To replace a value use indexing and assign a value : 
	<VectorVariable>[<index1>] <- <NewValue>
	letters[1] <- "Sunil"

- To repeat a vector we use rep() function : 
	To repeat each value
		<VectorVariable> <-rep(c(<value1>,<value2>,...,<valuen>),each=<count>)
		RepVal <- rep(c(1,2,3),each=3)
	To repeat the sequence of vectors
		<VectorVariable> <- rep(c(<value1>,<value2>,...,<valuen>),each=<count>)
		RepVal <- rep(c(1,2,3),times=3)
	To repeat each value independently
		<VectorVariable> <- rep(c(<value1>,<value2>,...,<valuen>),each=<count>)
		RepVal <- rep(c(1,2,3),times=c(5,2,1))



Lists
-----
- It can contain many different data types inside it.
- Collection of data which is ordered and changeable.
- We use list() function for creating a list.
	<listVariable> <- list(<value1>,<value2>...,<valuen>)
	thislist <- list("apple", "banana", "cherry")

- To access the element in a list we use indexing :
	<listVariable>[<index>]
	thislist[1]

- To change the value in a list we use indexing and assign :
	<listVariable>[<index>] <- <NewValue>
	thislist[1]="grapes"

- To get length of a list we use length() function : 
	length(thislist)
	
- To check existence of an item in a list we use %in% : 
	<Value> %in% <listVariable>
	"apple" in thislist
	
- To add items items into list we use append() function:
	<listVariable> <- list(<value1>,<value2>)
	append(<listVariable>,<NewValue>)
	append(thislist,"Jack fruit")

  To add element after the specific index
	append(<listVariable>,<NewValue>,after=<index>)
	append(thislist,"Strwberry",after=2)

- To remove items from a list we use negative indexing :
	<listVariable>[-<index>]
	thislist[-1]

- To get range of indexes we specify range by using : operator 
	<listVariable> <- list(<value1>,<value2>,<value3>,...,<valuen>)
	(thislist)[2:5]

- Loops through lists :
	for (<variable> in <listVariable>)
	{
		print(<variable>)
	}
	for(i in thislist)
	{
		print(i)
	}

- To join two lists :
	<listVariable_1> <- list(<value1>,<value2>...,<valuen>)
	<listVariable_2> <- list(<value1>,<value2>...,<valuen>)
	<listVariable_3> <- c(<listVariable_1>,<listVariable_2>)
	IntList <-  c(1,2,3)
	Strlist <- c("a","bc")
	JoinList <- c(IntList,Strlist)


