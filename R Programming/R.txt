
=======================================================================================================================================================================
									R Introduction
=======================================================================================================================================================================

R Programming
--------------
- For R Programming we need to install Rstudio and R
- It is a programming language.
- It is used for statistical computing 
- It is used for graphical presentation to analyze and visualize data.
- It is commonly used to analyze and visualize data.


Why to use :
------------
- It is open source and free
- It has large community support
- It has many packages(library functions)
- Good resource for data analysis, data visulaization, Data Science, ML(Machine Learning)
- Provides statistical analysis[like: statistical tests, classification, Clustering and data reduction]
- Easy to plot pie charts, Histogram, Box plot, Scatter plot, etc.. .


R Basics
----------

- Single line comments can be given by '#'
- Multiline comment by insert '#' for each line 

--------------------------------------------
# WAP in R to print "Hello Wdrld"
print("Hello World")
--------------------------------------------
# WAP in R to print first 10 natural numbers
# Using for loop
for(<variable> in 1:10)
{
	print(<variable>)
}


Steps: 
------
1. Download and install RStudio and R from [ https://cran.rstudio.com/ ]
2. Launch RStudio 
3. Setup the Workspace panes
4. Write "Hello World" or print("Hello World")
5. Click on Run button available on top(Run the current line or selection)
6. Save it as <File_Name>.r
7. Alwaya open with RStudio

R Coding
----------
"Hello WOrld"
5+5
print("Hi")
print(5+5)
plot(1:10)

=======================================================================================================================================================================
									Variables
=======================================================================================================================================================================
- Variables are the temperory memory location where values are stored and that can be changed during execution of a program.
- Containers for storing data values.
- To assign a value we use '<-' or '='
	<VariableName_1> <- <Value_1>
	<VariableName_2> <- <Value_2>
	<VariableName_3> = <Value_3>
	<VariableName_4> = <Value_4>

- To get values use print() function
	print(VariableName_1)
	print(VariableName_2)
	print(VariableName_3)
	print(VariableName_4)

- For concatenating/join two or more elements we can use ',' or paste() function.
	<VariableName_1> <- <Value_1>
	<VariableName_2> = <Value_2>
	paste(<VariableName_1>,<VariableName_2>)
	paste(<VariableName_1>,<VariableName_2>,...,<VariableName_n>)

- We can assign a value to multiple variables(Assigning >1 variable with same value)
	<VariableName_1> <- <VariableName_2> <- <VariableName_3> <- 10
	<VariableName_4> = <VariableName_5> = <VariableName_6> = "Dheeraj"

- Limitations and Rules :
	1. Must start with a letter and can have combination of letters(a-z;A-Z), digits(0-9), periods(.), underscore(_). 
	2. If starts with period(.), it cannot be followed by a digit.
	3. Cannot starts with a number or underscore
	4. Varible names are case sensitive
	5. Reserved or special words cannot be used


=======================================================================================================================================================================
									Data Types
=======================================================================================================================================================================

- Variables stores different types of data.
- There are 5 different datatypes : 
	numeric : 10.5 ,5
	integer : 1L, 55L (Where, 'L' declares as an integer)
	complex : 9+3i (Where, 'i' indicates as an imaginary part)
	character (String) : "k", "Hello World" ,"FLASE", "11.5"
	logical (Boolean) : TRUE , FALSE
- To check type of data we can use class() function
	<VariableName_1> <- <Value_1>
	<VariableName_2> = <Value_1>
	class(<VariableName_1>)
	class(<VariableName_2>)

Numbers
-------
- 3 number types : 
	numeric : <VariableName_1> <- 10.9 ;Contains any number with or without a decimal.
	integer : <VariableName_1> <- 10L ;Numeric data without decimals.We use the letter 'L' after the integer value.
	complex : <VariableName_1> <- 2+3i ; A value having an imaginary number.

- Type conversions can be happened by using the functions : 
	as.numeric() -  Convert to numeric
	as.integer() - Convert to integer
	as.complex() - Convert to complex


R Math
-------
- print(10+3)
  a<-10
  b=30
  Sum_res<- a+b
  Diff_res<- a-b
  paste("Sum result : ",Sum_res)
  paste("Difference result : ",Diff_res)

- min() : function used to find the lowest number in a set. min(<value1>,<value2>,...,<valuen>)
- max() : function used to find the highest number in a set. max(<value1>,<value2>,...,<valuen>)
- sqrt() : It returns the square root of a number. sqrt(<value_1>)
- abs() : It returns the absolute (positive) value of a number. abs(-<value_1>)
- ceiling() : It rounds a number upwards to its nearest integer. ceiling(<value_1>)
- floor() : It rounds a number downwards to its nearest integer. floor(<value_1>)



Strings
--------
- It is used for storing text.
- It is surrounded by either single('') or double("") quotation marks.
- Assinging a string value : <Variable_1> <- "<value_1"
- Assinging a multiline string value : <Variable_2> <- "....
							....
							.... "
- R adds a "\n" at the end of each line break which is called an escape character.
- cat() : It is used when if you want the line breaks to be inserted at the same position.
- nchar() : It is used to find the number of characters in a string
- grepl() : It is to check if a character or a sequence of characters are present in a string. To check existance of a string in a string
- paste() : To concatenate two or more string values.

- R Escape Characters : It is a backslash '\' followed by the character you want to insert.
	s<- "<value_1> \"<value_2>\" <value_3>"
	print(s)

	Code  |  Result
	--------------------------
	\\    |  Backslash
	\n    |  New Line
	\r    |  Carriage Return
	\t    |  Tab
	\b    |  Backspace


Booleans
---------
- In R we get one of two answers either TRUE or FALSE.
- We can use relational operators.
	10 > 9    # TRUE because 10 is greater than 9
	10 == 9   # FALSE because 10 is not equal to 9
	10 < 9    # FALSE because 10 is greater than 9


=====================================================================================================================================================================
											Operators
=====================================================================================================================================================================
- It is used to perform operations on variables and values.
- R has 5 types of operators :-
	Arithmetic operators : 	+ 
			  	-
				* 
				/ 
				^ 
				%% 
				%/%
	Assignment operators : 	<- 
				<<- 
				-> 
				->>
				=
	Comparison operators : 	== 
				!=
				< 
				> 
				<= 
				>=
	Logical operators : 	& 
				&& 
				| 
				|| 
				!
	Miscellaneous operators : 	: 
					%in% 
					%*%


=====================================================================================================================================================================
									Conditional Statements
=====================================================================================================================================================================
- If statement

if(condition)
{
	# statements
}

<VariableName_1> <- <Value_1>
<VariableName_2>  <- <Value_2>
if (<VariableName_1> > <VariableName_2>) 
{
	print("<VariableName_1> is greater than <VariableName_2>")
}


- If Else statement
if(condition)
{
	# TRUE statements
}else{
	# FALSE statements
}

- Else If statement
if(condition_1)
{
	# statements
}else if(condition_2)
{
	# statements
}..else if(condition_n)
{
	# statements
}else{
	# statements
}

- Nested if statement : if statement is in another if statement
if(condition_1)
{
	# TRUE statements
	if(condition_2)
	{
		# TRUE statements
	}else{
		# FALSE statements
	}
}else{
	# FALSE statements
	if(condition_3)
	{
		# TRUE statements
	}else{
		# FALSE statements
	}
}

- AND(&) is a logical and operator
- OR(|) is a logical or operator
- NOT(!) is a logical not operator


=====================================================================================================================================================================
										LOOPS
=====================================================================================================================================================================

- Loops can execute a block of code which executes a statement within a block until the condition is met.
- Loops can execute a block of code as long as a specified condition is reached.
- R has two loop : while and for loops

while loop
-----------
- It can execute a set of statements as long as a condition is TRUE.
-
	Initialization
	while(condition)
	{
		# Statements
		Updation
	}

for loop
-----------
- It can execute a set of statements as long as a condition is TRUE.
-
	for (<Varible> in <range_1:range_n>)
	{
		# Statements
	}

	Initialization <Varible_1> 
	for (<Varible_2> in <Varible_1>)
	{
		# Statements
	}

	dice <- 1:6
	for(x in dice) 
	{
		print(x)
	}


- Break : It is a statement where we can stop the loop before it has looped through all the items.
- Next : It is a statement where we can skip an iteration without terminating the loop.

- Placing a loop inside another loop. This is called a nested loop.
	adj <- list("red", "big", "tasty")	
	fruits <- list("apple", "banana", "cherry")
  	for (x in adj) 
	{
    		for (y in fruits) 
		{
 			print(paste(x, y))
  		}
	}